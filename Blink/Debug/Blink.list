
Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080064f4  080064f4  000164f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065b8  080065b8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080065b8  080065b8  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080065b8  080065b8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065b8  080065b8  000165b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065bc  080065bc  000165bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080065c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001240  200001e0  080067a0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001420  080067a0  00021420  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013676  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002db9  00000000  00000000  0003387f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d30  00000000  00000000  00036638  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be8  00000000  00000000  00037368  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016992  00000000  00000000  00037f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d90e  00000000  00000000  0004e8e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006fc87  00000000  00000000  0005c1f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cbe77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037f0  00000000  00000000  000cbef4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	080064dc 	.word	0x080064dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	080064dc 	.word	0x080064dc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fadd 	bl	8000710 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f85f 	bl	8000218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f913 	bl	8000384 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015e:	f000 f8b5 	bl	80002cc <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000162:	f005 f8e7 	bl	8005334 <MX_USB_DEVICE_Init>
  MX_I2C2_Init();
 8000166:	f000 f8df 	bl	8000328 <MX_I2C2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	HAL_Delay(100);
 800016a:	2064      	movs	r0, #100	; 0x64
 800016c:	f000 fb32 	bl	80007d4 <HAL_Delay>
	CDC_tx_size=sprintf(CDC_tx_buff,"Scanning I2C bus:\r\n");//Guarda en la variable CDC_tx_buff el string y el tamaño del string queda en CDC_size_buff
 8000170:	4a23      	ldr	r2, [pc, #140]	; (8000200 <main+0xb4>)
 8000172:	4b24      	ldr	r3, [pc, #144]	; (8000204 <main+0xb8>)
 8000174:	4615      	mov	r5, r2
 8000176:	461c      	mov	r4, r3
 8000178:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800017a:	6028      	str	r0, [r5, #0]
 800017c:	6069      	str	r1, [r5, #4]
 800017e:	60aa      	str	r2, [r5, #8]
 8000180:	60eb      	str	r3, [r5, #12]
 8000182:	6820      	ldr	r0, [r4, #0]
 8000184:	6128      	str	r0, [r5, #16]
 8000186:	2313      	movs	r3, #19
 8000188:	b2da      	uxtb	r2, r3
 800018a:	4b1f      	ldr	r3, [pc, #124]	; (8000208 <main+0xbc>)
 800018c:	701a      	strb	r2, [r3, #0]
	CDC_Transmit_FS((uint8_t *)&CDC_tx_buff,CDC_tx_size);//Transmite por USB
 800018e:	4b1e      	ldr	r3, [pc, #120]	; (8000208 <main+0xbc>)
 8000190:	781b      	ldrb	r3, [r3, #0]
 8000192:	b29b      	uxth	r3, r3
 8000194:	4619      	mov	r1, r3
 8000196:	481a      	ldr	r0, [pc, #104]	; (8000200 <main+0xb4>)
 8000198:	f005 f98a 	bl	80054b0 <CDC_Transmit_FS>
	uint8_t i=1;
 800019c:	2301      	movs	r3, #1
 800019e:	71fb      	strb	r3, [r7, #7]
	for (i=1; i<128; i++)
 80001a0:	2301      	movs	r3, #1
 80001a2:	71fb      	strb	r3, [r7, #7]
 80001a4:	e026      	b.n	80001f4 <main+0xa8>
	{
		int result = HAL_I2C_IsDeviceReady(&hi2c2,i<<1,1,1);
 80001a6:	79fb      	ldrb	r3, [r7, #7]
 80001a8:	b29b      	uxth	r3, r3
 80001aa:	005b      	lsls	r3, r3, #1
 80001ac:	b299      	uxth	r1, r3
 80001ae:	2301      	movs	r3, #1
 80001b0:	2201      	movs	r2, #1
 80001b2:	4816      	ldr	r0, [pc, #88]	; (800020c <main+0xc0>)
 80001b4:	f000 fef0 	bl	8000f98 <HAL_I2C_IsDeviceReady>
 80001b8:	4603      	mov	r3, r0
 80001ba:	603b      	str	r3, [r7, #0]
		if (result != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 80001bc:	683b      	ldr	r3, [r7, #0]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d115      	bne.n	80001ee <main+0xa2>
		{
			//CDC_tx_size=sprintf(CDC_tx_buff,".");//Guarda en la variable CDC_tx_buff el string y el tamaño del string queda en CDC_size_buff
			//CDC_Transmit_FS(CDC_tx_buff,CDC_tx_size);//Transmite por USB
		}else{
			CDC_tx_size=sprintf(CDC_tx_buff,"0x%X", i);//Guarda en la variable CDC_tx_buff el string y el tamaño del string queda en CDC_size_buff
 80001c2:	79fb      	ldrb	r3, [r7, #7]
 80001c4:	461a      	mov	r2, r3
 80001c6:	4912      	ldr	r1, [pc, #72]	; (8000210 <main+0xc4>)
 80001c8:	480d      	ldr	r0, [pc, #52]	; (8000200 <main+0xb4>)
 80001ca:	f005 fd75 	bl	8005cb8 <siprintf>
 80001ce:	4603      	mov	r3, r0
 80001d0:	b2da      	uxtb	r2, r3
 80001d2:	4b0d      	ldr	r3, [pc, #52]	; (8000208 <main+0xbc>)
 80001d4:	701a      	strb	r2, [r3, #0]
			CDC_Transmit_FS((uint8_t *)CDC_tx_buff,CDC_tx_size);//Transmite por USB
 80001d6:	4b0c      	ldr	r3, [pc, #48]	; (8000208 <main+0xbc>)
 80001d8:	781b      	ldrb	r3, [r3, #0]
 80001da:	b29b      	uxth	r3, r3
 80001dc:	4619      	mov	r1, r3
 80001de:	4808      	ldr	r0, [pc, #32]	; (8000200 <main+0xb4>)
 80001e0:	f005 f966 	bl	80054b0 <CDC_Transmit_FS>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80001e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001e8:	480a      	ldr	r0, [pc, #40]	; (8000214 <main+0xc8>)
 80001ea:	f000 fd95 	bl	8000d18 <HAL_GPIO_TogglePin>
	for (i=1; i<128; i++)
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	3301      	adds	r3, #1
 80001f2:	71fb      	strb	r3, [r7, #7]
 80001f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	dad4      	bge.n	80001a6 <main+0x5a>
  {
 80001fc:	e7b5      	b.n	800016a <main+0x1e>
 80001fe:	bf00      	nop
 8000200:	200004d8 	.word	0x200004d8
 8000204:	080064f4 	.word	0x080064f4
 8000208:	20000514 	.word	0x20000514
 800020c:	20000484 	.word	0x20000484
 8000210:	08006508 	.word	0x08006508
 8000214:	40011000 	.word	0x40011000

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b094      	sub	sp, #80	; 0x50
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000222:	2228      	movs	r2, #40	; 0x28
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f005 fd3e 	bl	8005ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	f107 0314 	add.w	r3, r7, #20
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]
 8000234:	605a      	str	r2, [r3, #4]
 8000236:	609a      	str	r2, [r3, #8]
 8000238:	60da      	str	r2, [r3, #12]
 800023a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000248:	2301      	movs	r3, #1
 800024a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800024c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000250:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000256:	2301      	movs	r3, #1
 8000258:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025a:	2302      	movs	r3, #2
 800025c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800025e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000262:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000264:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000268:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800026e:	4618      	mov	r0, r3
 8000270:	f001 feec 	bl	800204c <HAL_RCC_OscConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800027a:	f000 f8db 	bl	8000434 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027e:	230f      	movs	r3, #15
 8000280:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000282:	2302      	movs	r3, #2
 8000284:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800028e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000294:	f107 0314 	add.w	r3, r7, #20
 8000298:	2102      	movs	r1, #2
 800029a:	4618      	mov	r0, r3
 800029c:	f002 f956 	bl	800254c <HAL_RCC_ClockConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002a6:	f000 f8c5 	bl	8000434 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002aa:	2310      	movs	r3, #16
 80002ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002ae:	2300      	movs	r3, #0
 80002b0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	4618      	mov	r0, r3
 80002b6:	f002 fad1 	bl	800285c <HAL_RCCEx_PeriphCLKConfig>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002c0:	f000 f8b8 	bl	8000434 <Error_Handler>
  }
}
 80002c4:	bf00      	nop
 80002c6:	3750      	adds	r7, #80	; 0x50
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}

080002cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002d0:	4b12      	ldr	r3, [pc, #72]	; (800031c <MX_I2C1_Init+0x50>)
 80002d2:	4a13      	ldr	r2, [pc, #76]	; (8000320 <MX_I2C1_Init+0x54>)
 80002d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80002d6:	4b11      	ldr	r3, [pc, #68]	; (800031c <MX_I2C1_Init+0x50>)
 80002d8:	4a12      	ldr	r2, [pc, #72]	; (8000324 <MX_I2C1_Init+0x58>)
 80002da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002dc:	4b0f      	ldr	r3, [pc, #60]	; (800031c <MX_I2C1_Init+0x50>)
 80002de:	2200      	movs	r2, #0
 80002e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002e2:	4b0e      	ldr	r3, [pc, #56]	; (800031c <MX_I2C1_Init+0x50>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002e8:	4b0c      	ldr	r3, [pc, #48]	; (800031c <MX_I2C1_Init+0x50>)
 80002ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002f0:	4b0a      	ldr	r3, [pc, #40]	; (800031c <MX_I2C1_Init+0x50>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002f6:	4b09      	ldr	r3, [pc, #36]	; (800031c <MX_I2C1_Init+0x50>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002fc:	4b07      	ldr	r3, [pc, #28]	; (800031c <MX_I2C1_Init+0x50>)
 80002fe:	2200      	movs	r2, #0
 8000300:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000302:	4b06      	ldr	r3, [pc, #24]	; (800031c <MX_I2C1_Init+0x50>)
 8000304:	2200      	movs	r2, #0
 8000306:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000308:	4804      	ldr	r0, [pc, #16]	; (800031c <MX_I2C1_Init+0x50>)
 800030a:	f000 fd1d 	bl	8000d48 <HAL_I2C_Init>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000314:	f000 f88e 	bl	8000434 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000318:	bf00      	nop
 800031a:	bd80      	pop	{r7, pc}
 800031c:	2000042c 	.word	0x2000042c
 8000320:	40005400 	.word	0x40005400
 8000324:	00061a80 	.word	0x00061a80

08000328 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800032c:	4b12      	ldr	r3, [pc, #72]	; (8000378 <MX_I2C2_Init+0x50>)
 800032e:	4a13      	ldr	r2, [pc, #76]	; (800037c <MX_I2C2_Init+0x54>)
 8000330:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000332:	4b11      	ldr	r3, [pc, #68]	; (8000378 <MX_I2C2_Init+0x50>)
 8000334:	4a12      	ldr	r2, [pc, #72]	; (8000380 <MX_I2C2_Init+0x58>)
 8000336:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000338:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <MX_I2C2_Init+0x50>)
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800033e:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <MX_I2C2_Init+0x50>)
 8000340:	2200      	movs	r2, #0
 8000342:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000344:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <MX_I2C2_Init+0x50>)
 8000346:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800034a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800034c:	4b0a      	ldr	r3, [pc, #40]	; (8000378 <MX_I2C2_Init+0x50>)
 800034e:	2200      	movs	r2, #0
 8000350:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000352:	4b09      	ldr	r3, [pc, #36]	; (8000378 <MX_I2C2_Init+0x50>)
 8000354:	2200      	movs	r2, #0
 8000356:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000358:	4b07      	ldr	r3, [pc, #28]	; (8000378 <MX_I2C2_Init+0x50>)
 800035a:	2200      	movs	r2, #0
 800035c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800035e:	4b06      	ldr	r3, [pc, #24]	; (8000378 <MX_I2C2_Init+0x50>)
 8000360:	2200      	movs	r2, #0
 8000362:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000364:	4804      	ldr	r0, [pc, #16]	; (8000378 <MX_I2C2_Init+0x50>)
 8000366:	f000 fcef 	bl	8000d48 <HAL_I2C_Init>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000370:	f000 f860 	bl	8000434 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	20000484 	.word	0x20000484
 800037c:	40005800 	.word	0x40005800
 8000380:	00061a80 	.word	0x00061a80

08000384 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b088      	sub	sp, #32
 8000388:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038a:	f107 0310 	add.w	r3, r7, #16
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]
 8000394:	609a      	str	r2, [r3, #8]
 8000396:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000398:	4b24      	ldr	r3, [pc, #144]	; (800042c <MX_GPIO_Init+0xa8>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	4a23      	ldr	r2, [pc, #140]	; (800042c <MX_GPIO_Init+0xa8>)
 800039e:	f043 0310 	orr.w	r3, r3, #16
 80003a2:	6193      	str	r3, [r2, #24]
 80003a4:	4b21      	ldr	r3, [pc, #132]	; (800042c <MX_GPIO_Init+0xa8>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	f003 0310 	and.w	r3, r3, #16
 80003ac:	60fb      	str	r3, [r7, #12]
 80003ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003b0:	4b1e      	ldr	r3, [pc, #120]	; (800042c <MX_GPIO_Init+0xa8>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	4a1d      	ldr	r2, [pc, #116]	; (800042c <MX_GPIO_Init+0xa8>)
 80003b6:	f043 0320 	orr.w	r3, r3, #32
 80003ba:	6193      	str	r3, [r2, #24]
 80003bc:	4b1b      	ldr	r3, [pc, #108]	; (800042c <MX_GPIO_Init+0xa8>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	f003 0320 	and.w	r3, r3, #32
 80003c4:	60bb      	str	r3, [r7, #8]
 80003c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c8:	4b18      	ldr	r3, [pc, #96]	; (800042c <MX_GPIO_Init+0xa8>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a17      	ldr	r2, [pc, #92]	; (800042c <MX_GPIO_Init+0xa8>)
 80003ce:	f043 0308 	orr.w	r3, r3, #8
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b15      	ldr	r3, [pc, #84]	; (800042c <MX_GPIO_Init+0xa8>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0308 	and.w	r3, r3, #8
 80003dc:	607b      	str	r3, [r7, #4]
 80003de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e0:	4b12      	ldr	r3, [pc, #72]	; (800042c <MX_GPIO_Init+0xa8>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a11      	ldr	r2, [pc, #68]	; (800042c <MX_GPIO_Init+0xa8>)
 80003e6:	f043 0304 	orr.w	r3, r3, #4
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	4b0f      	ldr	r3, [pc, #60]	; (800042c <MX_GPIO_Init+0xa8>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	f003 0304 	and.w	r3, r3, #4
 80003f4:	603b      	str	r3, [r7, #0]
 80003f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003f8:	2200      	movs	r2, #0
 80003fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003fe:	480c      	ldr	r0, [pc, #48]	; (8000430 <MX_GPIO_Init+0xac>)
 8000400:	f000 fc72 	bl	8000ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000404:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000408:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800040a:	2301      	movs	r3, #1
 800040c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040e:	2300      	movs	r3, #0
 8000410:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000412:	2302      	movs	r3, #2
 8000414:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	4619      	mov	r1, r3
 800041c:	4804      	ldr	r0, [pc, #16]	; (8000430 <MX_GPIO_Init+0xac>)
 800041e:	f000 fb09 	bl	8000a34 <HAL_GPIO_Init>

}
 8000422:	bf00      	nop
 8000424:	3720      	adds	r7, #32
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	40021000 	.word	0x40021000
 8000430:	40011000 	.word	0x40011000

08000434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000438:	bf00      	nop
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr

08000440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000446:	4b15      	ldr	r3, [pc, #84]	; (800049c <HAL_MspInit+0x5c>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	4a14      	ldr	r2, [pc, #80]	; (800049c <HAL_MspInit+0x5c>)
 800044c:	f043 0301 	orr.w	r3, r3, #1
 8000450:	6193      	str	r3, [r2, #24]
 8000452:	4b12      	ldr	r3, [pc, #72]	; (800049c <HAL_MspInit+0x5c>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	f003 0301 	and.w	r3, r3, #1
 800045a:	60bb      	str	r3, [r7, #8]
 800045c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800045e:	4b0f      	ldr	r3, [pc, #60]	; (800049c <HAL_MspInit+0x5c>)
 8000460:	69db      	ldr	r3, [r3, #28]
 8000462:	4a0e      	ldr	r2, [pc, #56]	; (800049c <HAL_MspInit+0x5c>)
 8000464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000468:	61d3      	str	r3, [r2, #28]
 800046a:	4b0c      	ldr	r3, [pc, #48]	; (800049c <HAL_MspInit+0x5c>)
 800046c:	69db      	ldr	r3, [r3, #28]
 800046e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000472:	607b      	str	r3, [r7, #4]
 8000474:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000476:	4b0a      	ldr	r3, [pc, #40]	; (80004a0 <HAL_MspInit+0x60>)
 8000478:	685b      	ldr	r3, [r3, #4]
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	4a04      	ldr	r2, [pc, #16]	; (80004a0 <HAL_MspInit+0x60>)
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000492:	bf00      	nop
 8000494:	3714      	adds	r7, #20
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr
 800049c:	40021000 	.word	0x40021000
 80004a0:	40010000 	.word	0x40010000

080004a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b08c      	sub	sp, #48	; 0x30
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ac:	f107 031c 	add.w	r3, r7, #28
 80004b0:	2200      	movs	r2, #0
 80004b2:	601a      	str	r2, [r3, #0]
 80004b4:	605a      	str	r2, [r3, #4]
 80004b6:	609a      	str	r2, [r3, #8]
 80004b8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a32      	ldr	r2, [pc, #200]	; (8000588 <HAL_I2C_MspInit+0xe4>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d133      	bne.n	800052c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c4:	4b31      	ldr	r3, [pc, #196]	; (800058c <HAL_I2C_MspInit+0xe8>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	4a30      	ldr	r2, [pc, #192]	; (800058c <HAL_I2C_MspInit+0xe8>)
 80004ca:	f043 0308 	orr.w	r3, r3, #8
 80004ce:	6193      	str	r3, [r2, #24]
 80004d0:	4b2e      	ldr	r3, [pc, #184]	; (800058c <HAL_I2C_MspInit+0xe8>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	f003 0308 	and.w	r3, r3, #8
 80004d8:	61bb      	str	r3, [r7, #24]
 80004da:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80004dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80004e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004e2:	2312      	movs	r3, #18
 80004e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e6:	2303      	movs	r3, #3
 80004e8:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ea:	f107 031c 	add.w	r3, r7, #28
 80004ee:	4619      	mov	r1, r3
 80004f0:	4827      	ldr	r0, [pc, #156]	; (8000590 <HAL_I2C_MspInit+0xec>)
 80004f2:	f000 fa9f 	bl	8000a34 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80004f6:	4b27      	ldr	r3, [pc, #156]	; (8000594 <HAL_I2C_MspInit+0xf0>)
 80004f8:	685b      	ldr	r3, [r3, #4]
 80004fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004fe:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000502:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000506:	f043 0302 	orr.w	r3, r3, #2
 800050a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800050c:	4a21      	ldr	r2, [pc, #132]	; (8000594 <HAL_I2C_MspInit+0xf0>)
 800050e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000510:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000512:	4b1e      	ldr	r3, [pc, #120]	; (800058c <HAL_I2C_MspInit+0xe8>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	4a1d      	ldr	r2, [pc, #116]	; (800058c <HAL_I2C_MspInit+0xe8>)
 8000518:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800051c:	61d3      	str	r3, [r2, #28]
 800051e:	4b1b      	ldr	r3, [pc, #108]	; (800058c <HAL_I2C_MspInit+0xe8>)
 8000520:	69db      	ldr	r3, [r3, #28]
 8000522:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000526:	617b      	str	r3, [r7, #20]
 8000528:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800052a:	e029      	b.n	8000580 <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a19      	ldr	r2, [pc, #100]	; (8000598 <HAL_I2C_MspInit+0xf4>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d124      	bne.n	8000580 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000536:	4b15      	ldr	r3, [pc, #84]	; (800058c <HAL_I2C_MspInit+0xe8>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	4a14      	ldr	r2, [pc, #80]	; (800058c <HAL_I2C_MspInit+0xe8>)
 800053c:	f043 0308 	orr.w	r3, r3, #8
 8000540:	6193      	str	r3, [r2, #24]
 8000542:	4b12      	ldr	r3, [pc, #72]	; (800058c <HAL_I2C_MspInit+0xe8>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	f003 0308 	and.w	r3, r3, #8
 800054a:	613b      	str	r3, [r7, #16]
 800054c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800054e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000554:	2312      	movs	r3, #18
 8000556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000558:	2303      	movs	r3, #3
 800055a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800055c:	f107 031c 	add.w	r3, r7, #28
 8000560:	4619      	mov	r1, r3
 8000562:	480b      	ldr	r0, [pc, #44]	; (8000590 <HAL_I2C_MspInit+0xec>)
 8000564:	f000 fa66 	bl	8000a34 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <HAL_I2C_MspInit+0xe8>)
 800056a:	69db      	ldr	r3, [r3, #28]
 800056c:	4a07      	ldr	r2, [pc, #28]	; (800058c <HAL_I2C_MspInit+0xe8>)
 800056e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000572:	61d3      	str	r3, [r2, #28]
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <HAL_I2C_MspInit+0xe8>)
 8000576:	69db      	ldr	r3, [r3, #28]
 8000578:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	68fb      	ldr	r3, [r7, #12]
}
 8000580:	bf00      	nop
 8000582:	3730      	adds	r7, #48	; 0x30
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40005400 	.word	0x40005400
 800058c:	40021000 	.word	0x40021000
 8000590:	40010c00 	.word	0x40010c00
 8000594:	40010000 	.word	0x40010000
 8000598:	40005800 	.word	0x40005800

0800059c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr

080005a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ac:	e7fe      	b.n	80005ac <HardFault_Handler+0x4>

080005ae <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005b2:	e7fe      	b.n	80005b2 <MemManage_Handler+0x4>

080005b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <BusFault_Handler+0x4>

080005ba <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005be:	e7fe      	b.n	80005be <UsageFault_Handler+0x4>

080005c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr

080005cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr

080005d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr

080005e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005e8:	f000 f8d8 	bl	800079c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80005f4:	4802      	ldr	r0, [pc, #8]	; (8000600 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80005f6:	f000 ff4f 	bl	8001498 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200011b0 	.word	0x200011b0

08000604 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <_sbrk+0x50>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d102      	bne.n	800061a <_sbrk+0x16>
		heap_end = &end;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <_sbrk+0x50>)
 8000616:	4a10      	ldr	r2, [pc, #64]	; (8000658 <_sbrk+0x54>)
 8000618:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <_sbrk+0x50>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <_sbrk+0x50>)
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4413      	add	r3, r2
 8000628:	466a      	mov	r2, sp
 800062a:	4293      	cmp	r3, r2
 800062c:	d907      	bls.n	800063e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800062e:	f005 fb11 	bl	8005c54 <__errno>
 8000632:	4602      	mov	r2, r0
 8000634:	230c      	movs	r3, #12
 8000636:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000638:	f04f 33ff 	mov.w	r3, #4294967295
 800063c:	e006      	b.n	800064c <_sbrk+0x48>
	}

	heap_end += incr;
 800063e:	4b05      	ldr	r3, [pc, #20]	; (8000654 <_sbrk+0x50>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4413      	add	r3, r2
 8000646:	4a03      	ldr	r2, [pc, #12]	; (8000654 <_sbrk+0x50>)
 8000648:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800064a:	68fb      	ldr	r3, [r7, #12]
}
 800064c:	4618      	mov	r0, r3
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	200001fc 	.word	0x200001fc
 8000658:	20001420 	.word	0x20001420

0800065c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000660:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <SystemInit+0x5c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <SystemInit+0x5c>)
 8000666:	f043 0301 	orr.w	r3, r3, #1
 800066a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800066c:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <SystemInit+0x5c>)
 800066e:	685a      	ldr	r2, [r3, #4]
 8000670:	4911      	ldr	r1, [pc, #68]	; (80006b8 <SystemInit+0x5c>)
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <SystemInit+0x60>)
 8000674:	4013      	ands	r3, r2
 8000676:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <SystemInit+0x5c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a0e      	ldr	r2, [pc, #56]	; (80006b8 <SystemInit+0x5c>)
 800067e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000686:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <SystemInit+0x5c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a0a      	ldr	r2, [pc, #40]	; (80006b8 <SystemInit+0x5c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <SystemInit+0x5c>)
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	4a07      	ldr	r2, [pc, #28]	; (80006b8 <SystemInit+0x5c>)
 800069a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800069e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <SystemInit+0x5c>)
 80006a2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80006a6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <SystemInit+0x64>)
 80006aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006ae:	609a      	str	r2, [r3, #8]
#endif 
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr
 80006b8:	40021000 	.word	0x40021000
 80006bc:	f8ff0000 	.word	0xf8ff0000
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80006c4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80006c6:	e003      	b.n	80006d0 <LoopCopyDataInit>

080006c8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80006c8:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80006ca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80006cc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80006ce:	3104      	adds	r1, #4

080006d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006d0:	480a      	ldr	r0, [pc, #40]	; (80006fc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80006d4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006d6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006d8:	d3f6      	bcc.n	80006c8 <CopyDataInit>
  ldr r2, =_sbss
 80006da:	4a0a      	ldr	r2, [pc, #40]	; (8000704 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80006dc:	e002      	b.n	80006e4 <LoopFillZerobss>

080006de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006de:	2300      	movs	r3, #0
  str r3, [r2], #4
 80006e0:	f842 3b04 	str.w	r3, [r2], #4

080006e4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80006e4:	4b08      	ldr	r3, [pc, #32]	; (8000708 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80006e6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006e8:	d3f9      	bcc.n	80006de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006ea:	f7ff ffb7 	bl	800065c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006ee:	f005 fab7 	bl	8005c60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006f2:	f7ff fd2b 	bl	800014c <main>
  bx lr
 80006f6:	4770      	bx	lr
  ldr r3, =_sidata
 80006f8:	080065c0 	.word	0x080065c0
  ldr r0, =_sdata
 80006fc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000700:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8000704:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8000708:	20001420 	.word	0x20001420

0800070c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800070c:	e7fe      	b.n	800070c <ADC1_2_IRQHandler>
	...

08000710 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <HAL_Init+0x28>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a07      	ldr	r2, [pc, #28]	; (8000738 <HAL_Init+0x28>)
 800071a:	f043 0310 	orr.w	r3, r3, #16
 800071e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000720:	2003      	movs	r0, #3
 8000722:	f000 f945 	bl	80009b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000726:	2000      	movs	r0, #0
 8000728:	f000 f808 	bl	800073c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800072c:	f7ff fe88 	bl	8000440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000730:	2300      	movs	r3, #0
}
 8000732:	4618      	mov	r0, r3
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40022000 	.word	0x40022000

0800073c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <HAL_InitTick+0x54>)
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <HAL_InitTick+0x58>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	4619      	mov	r1, r3
 800074e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000752:	fbb3 f3f1 	udiv	r3, r3, r1
 8000756:	fbb2 f3f3 	udiv	r3, r2, r3
 800075a:	4618      	mov	r0, r3
 800075c:	f000 f95d 	bl	8000a1a <HAL_SYSTICK_Config>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000766:	2301      	movs	r3, #1
 8000768:	e00e      	b.n	8000788 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2b0f      	cmp	r3, #15
 800076e:	d80a      	bhi.n	8000786 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000770:	2200      	movs	r2, #0
 8000772:	6879      	ldr	r1, [r7, #4]
 8000774:	f04f 30ff 	mov.w	r0, #4294967295
 8000778:	f000 f925 	bl	80009c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800077c:	4a06      	ldr	r2, [pc, #24]	; (8000798 <HAL_InitTick+0x5c>)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000782:	2300      	movs	r3, #0
 8000784:	e000      	b.n	8000788 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000786:	2301      	movs	r3, #1
}
 8000788:	4618      	mov	r0, r3
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000000 	.word	0x20000000
 8000794:	20000008 	.word	0x20000008
 8000798:	20000004 	.word	0x20000004

0800079c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <HAL_IncTick+0x1c>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b05      	ldr	r3, [pc, #20]	; (80007bc <HAL_IncTick+0x20>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4413      	add	r3, r2
 80007ac:	4a03      	ldr	r2, [pc, #12]	; (80007bc <HAL_IncTick+0x20>)
 80007ae:	6013      	str	r3, [r2, #0]
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr
 80007b8:	20000008 	.word	0x20000008
 80007bc:	20000518 	.word	0x20000518

080007c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  return uwTick;
 80007c4:	4b02      	ldr	r3, [pc, #8]	; (80007d0 <HAL_GetTick+0x10>)
 80007c6:	681b      	ldr	r3, [r3, #0]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr
 80007d0:	20000518 	.word	0x20000518

080007d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007dc:	f7ff fff0 	bl	80007c0 <HAL_GetTick>
 80007e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007ec:	d005      	beq.n	80007fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <HAL_Delay+0x40>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	461a      	mov	r2, r3
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	4413      	add	r3, r2
 80007f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007fa:	bf00      	nop
 80007fc:	f7ff ffe0 	bl	80007c0 <HAL_GetTick>
 8000800:	4602      	mov	r2, r0
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	1ad3      	subs	r3, r2, r3
 8000806:	68fa      	ldr	r2, [r7, #12]
 8000808:	429a      	cmp	r2, r3
 800080a:	d8f7      	bhi.n	80007fc <HAL_Delay+0x28>
  {
  }
}
 800080c:	bf00      	nop
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000008 	.word	0x20000008

08000818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	f003 0307 	and.w	r3, r3, #7
 8000826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <__NVIC_SetPriorityGrouping+0x44>)
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800082e:	68ba      	ldr	r2, [r7, #8]
 8000830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000834:	4013      	ands	r3, r2
 8000836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000840:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800084a:	4a04      	ldr	r2, [pc, #16]	; (800085c <__NVIC_SetPriorityGrouping+0x44>)
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	60d3      	str	r3, [r2, #12]
}
 8000850:	bf00      	nop
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000864:	4b04      	ldr	r3, [pc, #16]	; (8000878 <__NVIC_GetPriorityGrouping+0x18>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	0a1b      	lsrs	r3, r3, #8
 800086a:	f003 0307 	and.w	r3, r3, #7
}
 800086e:	4618      	mov	r0, r3
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088a:	2b00      	cmp	r3, #0
 800088c:	db0b      	blt.n	80008a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	f003 021f 	and.w	r2, r3, #31
 8000894:	4906      	ldr	r1, [pc, #24]	; (80008b0 <__NVIC_EnableIRQ+0x34>)
 8000896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089a:	095b      	lsrs	r3, r3, #5
 800089c:	2001      	movs	r0, #1
 800089e:	fa00 f202 	lsl.w	r2, r0, r2
 80008a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr
 80008b0:	e000e100 	.word	0xe000e100

080008b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	6039      	str	r1, [r7, #0]
 80008be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	db0a      	blt.n	80008de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	490c      	ldr	r1, [pc, #48]	; (8000900 <__NVIC_SetPriority+0x4c>)
 80008ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d2:	0112      	lsls	r2, r2, #4
 80008d4:	b2d2      	uxtb	r2, r2
 80008d6:	440b      	add	r3, r1
 80008d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008dc:	e00a      	b.n	80008f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	4908      	ldr	r1, [pc, #32]	; (8000904 <__NVIC_SetPriority+0x50>)
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	f003 030f 	and.w	r3, r3, #15
 80008ea:	3b04      	subs	r3, #4
 80008ec:	0112      	lsls	r2, r2, #4
 80008ee:	b2d2      	uxtb	r2, r2
 80008f0:	440b      	add	r3, r1
 80008f2:	761a      	strb	r2, [r3, #24]
}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	e000e100 	.word	0xe000e100
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000908:	b480      	push	{r7}
 800090a:	b089      	sub	sp, #36	; 0x24
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	f003 0307 	and.w	r3, r3, #7
 800091a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	f1c3 0307 	rsb	r3, r3, #7
 8000922:	2b04      	cmp	r3, #4
 8000924:	bf28      	it	cs
 8000926:	2304      	movcs	r3, #4
 8000928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	3304      	adds	r3, #4
 800092e:	2b06      	cmp	r3, #6
 8000930:	d902      	bls.n	8000938 <NVIC_EncodePriority+0x30>
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	3b03      	subs	r3, #3
 8000936:	e000      	b.n	800093a <NVIC_EncodePriority+0x32>
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800093c:	f04f 32ff 	mov.w	r2, #4294967295
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	fa02 f303 	lsl.w	r3, r2, r3
 8000946:	43da      	mvns	r2, r3
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	401a      	ands	r2, r3
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000950:	f04f 31ff 	mov.w	r1, #4294967295
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	fa01 f303 	lsl.w	r3, r1, r3
 800095a:	43d9      	mvns	r1, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000960:	4313      	orrs	r3, r2
         );
}
 8000962:	4618      	mov	r0, r3
 8000964:	3724      	adds	r7, #36	; 0x24
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr

0800096c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3b01      	subs	r3, #1
 8000978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800097c:	d301      	bcc.n	8000982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800097e:	2301      	movs	r3, #1
 8000980:	e00f      	b.n	80009a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000982:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <SysTick_Config+0x40>)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3b01      	subs	r3, #1
 8000988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800098a:	210f      	movs	r1, #15
 800098c:	f04f 30ff 	mov.w	r0, #4294967295
 8000990:	f7ff ff90 	bl	80008b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <SysTick_Config+0x40>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800099a:	4b04      	ldr	r3, [pc, #16]	; (80009ac <SysTick_Config+0x40>)
 800099c:	2207      	movs	r2, #7
 800099e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	e000e010 	.word	0xe000e010

080009b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f7ff ff2d 	bl	8000818 <__NVIC_SetPriorityGrouping>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b086      	sub	sp, #24
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	4603      	mov	r3, r0
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009d8:	f7ff ff42 	bl	8000860 <__NVIC_GetPriorityGrouping>
 80009dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009de:	687a      	ldr	r2, [r7, #4]
 80009e0:	68b9      	ldr	r1, [r7, #8]
 80009e2:	6978      	ldr	r0, [r7, #20]
 80009e4:	f7ff ff90 	bl	8000908 <NVIC_EncodePriority>
 80009e8:	4602      	mov	r2, r0
 80009ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ee:	4611      	mov	r1, r2
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff5f 	bl	80008b4 <__NVIC_SetPriority>
}
 80009f6:	bf00      	nop
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	4603      	mov	r3, r0
 8000a06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ff35 	bl	800087c <__NVIC_EnableIRQ>
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f7ff ffa2 	bl	800096c <SysTick_Config>
 8000a28:	4603      	mov	r3, r0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b08b      	sub	sp, #44	; 0x2c
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a46:	e127      	b.n	8000c98 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	69fa      	ldr	r2, [r7, #28]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a5c:	69ba      	ldr	r2, [r7, #24]
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	f040 8116 	bne.w	8000c92 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	2b12      	cmp	r3, #18
 8000a6c:	d034      	beq.n	8000ad8 <HAL_GPIO_Init+0xa4>
 8000a6e:	2b12      	cmp	r3, #18
 8000a70:	d80d      	bhi.n	8000a8e <HAL_GPIO_Init+0x5a>
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	d02b      	beq.n	8000ace <HAL_GPIO_Init+0x9a>
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	d804      	bhi.n	8000a84 <HAL_GPIO_Init+0x50>
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d031      	beq.n	8000ae2 <HAL_GPIO_Init+0xae>
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d01c      	beq.n	8000abc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a82:	e048      	b.n	8000b16 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a84:	2b03      	cmp	r3, #3
 8000a86:	d043      	beq.n	8000b10 <HAL_GPIO_Init+0xdc>
 8000a88:	2b11      	cmp	r3, #17
 8000a8a:	d01b      	beq.n	8000ac4 <HAL_GPIO_Init+0x90>
          break;
 8000a8c:	e043      	b.n	8000b16 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a8e:	4a89      	ldr	r2, [pc, #548]	; (8000cb4 <HAL_GPIO_Init+0x280>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d026      	beq.n	8000ae2 <HAL_GPIO_Init+0xae>
 8000a94:	4a87      	ldr	r2, [pc, #540]	; (8000cb4 <HAL_GPIO_Init+0x280>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d806      	bhi.n	8000aa8 <HAL_GPIO_Init+0x74>
 8000a9a:	4a87      	ldr	r2, [pc, #540]	; (8000cb8 <HAL_GPIO_Init+0x284>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d020      	beq.n	8000ae2 <HAL_GPIO_Init+0xae>
 8000aa0:	4a86      	ldr	r2, [pc, #536]	; (8000cbc <HAL_GPIO_Init+0x288>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d01d      	beq.n	8000ae2 <HAL_GPIO_Init+0xae>
          break;
 8000aa6:	e036      	b.n	8000b16 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000aa8:	4a85      	ldr	r2, [pc, #532]	; (8000cc0 <HAL_GPIO_Init+0x28c>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d019      	beq.n	8000ae2 <HAL_GPIO_Init+0xae>
 8000aae:	4a85      	ldr	r2, [pc, #532]	; (8000cc4 <HAL_GPIO_Init+0x290>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d016      	beq.n	8000ae2 <HAL_GPIO_Init+0xae>
 8000ab4:	4a84      	ldr	r2, [pc, #528]	; (8000cc8 <HAL_GPIO_Init+0x294>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d013      	beq.n	8000ae2 <HAL_GPIO_Init+0xae>
          break;
 8000aba:	e02c      	b.n	8000b16 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	623b      	str	r3, [r7, #32]
          break;
 8000ac2:	e028      	b.n	8000b16 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	3304      	adds	r3, #4
 8000aca:	623b      	str	r3, [r7, #32]
          break;
 8000acc:	e023      	b.n	8000b16 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	68db      	ldr	r3, [r3, #12]
 8000ad2:	3308      	adds	r3, #8
 8000ad4:	623b      	str	r3, [r7, #32]
          break;
 8000ad6:	e01e      	b.n	8000b16 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	330c      	adds	r3, #12
 8000ade:	623b      	str	r3, [r7, #32]
          break;
 8000ae0:	e019      	b.n	8000b16 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d102      	bne.n	8000af0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000aea:	2304      	movs	r3, #4
 8000aec:	623b      	str	r3, [r7, #32]
          break;
 8000aee:	e012      	b.n	8000b16 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d105      	bne.n	8000b04 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000af8:	2308      	movs	r3, #8
 8000afa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	69fa      	ldr	r2, [r7, #28]
 8000b00:	611a      	str	r2, [r3, #16]
          break;
 8000b02:	e008      	b.n	8000b16 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b04:	2308      	movs	r3, #8
 8000b06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	69fa      	ldr	r2, [r7, #28]
 8000b0c:	615a      	str	r2, [r3, #20]
          break;
 8000b0e:	e002      	b.n	8000b16 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
          break;
 8000b14:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	2bff      	cmp	r3, #255	; 0xff
 8000b1a:	d801      	bhi.n	8000b20 <HAL_GPIO_Init+0xec>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	e001      	b.n	8000b24 <HAL_GPIO_Init+0xf0>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3304      	adds	r3, #4
 8000b24:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	2bff      	cmp	r3, #255	; 0xff
 8000b2a:	d802      	bhi.n	8000b32 <HAL_GPIO_Init+0xfe>
 8000b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	e002      	b.n	8000b38 <HAL_GPIO_Init+0x104>
 8000b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b34:	3b08      	subs	r3, #8
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	210f      	movs	r1, #15
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	fa01 f303 	lsl.w	r3, r1, r3
 8000b46:	43db      	mvns	r3, r3
 8000b48:	401a      	ands	r2, r3
 8000b4a:	6a39      	ldr	r1, [r7, #32]
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b52:	431a      	orrs	r2, r3
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	f000 8096 	beq.w	8000c92 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b66:	4b59      	ldr	r3, [pc, #356]	; (8000ccc <HAL_GPIO_Init+0x298>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	4a58      	ldr	r2, [pc, #352]	; (8000ccc <HAL_GPIO_Init+0x298>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6193      	str	r3, [r2, #24]
 8000b72:	4b56      	ldr	r3, [pc, #344]	; (8000ccc <HAL_GPIO_Init+0x298>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b7e:	4a54      	ldr	r2, [pc, #336]	; (8000cd0 <HAL_GPIO_Init+0x29c>)
 8000b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b82:	089b      	lsrs	r3, r3, #2
 8000b84:	3302      	adds	r3, #2
 8000b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b8a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8e:	f003 0303 	and.w	r3, r3, #3
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	220f      	movs	r2, #15
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	68fa      	ldr	r2, [r7, #12]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a4b      	ldr	r2, [pc, #300]	; (8000cd4 <HAL_GPIO_Init+0x2a0>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d013      	beq.n	8000bd2 <HAL_GPIO_Init+0x19e>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a4a      	ldr	r2, [pc, #296]	; (8000cd8 <HAL_GPIO_Init+0x2a4>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d00d      	beq.n	8000bce <HAL_GPIO_Init+0x19a>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4a49      	ldr	r2, [pc, #292]	; (8000cdc <HAL_GPIO_Init+0x2a8>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d007      	beq.n	8000bca <HAL_GPIO_Init+0x196>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a48      	ldr	r2, [pc, #288]	; (8000ce0 <HAL_GPIO_Init+0x2ac>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d101      	bne.n	8000bc6 <HAL_GPIO_Init+0x192>
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	e006      	b.n	8000bd4 <HAL_GPIO_Init+0x1a0>
 8000bc6:	2304      	movs	r3, #4
 8000bc8:	e004      	b.n	8000bd4 <HAL_GPIO_Init+0x1a0>
 8000bca:	2302      	movs	r3, #2
 8000bcc:	e002      	b.n	8000bd4 <HAL_GPIO_Init+0x1a0>
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e000      	b.n	8000bd4 <HAL_GPIO_Init+0x1a0>
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bd6:	f002 0203 	and.w	r2, r2, #3
 8000bda:	0092      	lsls	r2, r2, #2
 8000bdc:	4093      	lsls	r3, r2
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000be4:	493a      	ldr	r1, [pc, #232]	; (8000cd0 <HAL_GPIO_Init+0x29c>)
 8000be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be8:	089b      	lsrs	r3, r3, #2
 8000bea:	3302      	adds	r3, #2
 8000bec:	68fa      	ldr	r2, [r7, #12]
 8000bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d006      	beq.n	8000c0c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bfe:	4b39      	ldr	r3, [pc, #228]	; (8000ce4 <HAL_GPIO_Init+0x2b0>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	4938      	ldr	r1, [pc, #224]	; (8000ce4 <HAL_GPIO_Init+0x2b0>)
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	600b      	str	r3, [r1, #0]
 8000c0a:	e006      	b.n	8000c1a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c0c:	4b35      	ldr	r3, [pc, #212]	; (8000ce4 <HAL_GPIO_Init+0x2b0>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	43db      	mvns	r3, r3
 8000c14:	4933      	ldr	r1, [pc, #204]	; (8000ce4 <HAL_GPIO_Init+0x2b0>)
 8000c16:	4013      	ands	r3, r2
 8000c18:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d006      	beq.n	8000c34 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c26:	4b2f      	ldr	r3, [pc, #188]	; (8000ce4 <HAL_GPIO_Init+0x2b0>)
 8000c28:	685a      	ldr	r2, [r3, #4]
 8000c2a:	492e      	ldr	r1, [pc, #184]	; (8000ce4 <HAL_GPIO_Init+0x2b0>)
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	604b      	str	r3, [r1, #4]
 8000c32:	e006      	b.n	8000c42 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c34:	4b2b      	ldr	r3, [pc, #172]	; (8000ce4 <HAL_GPIO_Init+0x2b0>)
 8000c36:	685a      	ldr	r2, [r3, #4]
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	4929      	ldr	r1, [pc, #164]	; (8000ce4 <HAL_GPIO_Init+0x2b0>)
 8000c3e:	4013      	ands	r3, r2
 8000c40:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d006      	beq.n	8000c5c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c4e:	4b25      	ldr	r3, [pc, #148]	; (8000ce4 <HAL_GPIO_Init+0x2b0>)
 8000c50:	689a      	ldr	r2, [r3, #8]
 8000c52:	4924      	ldr	r1, [pc, #144]	; (8000ce4 <HAL_GPIO_Init+0x2b0>)
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	608b      	str	r3, [r1, #8]
 8000c5a:	e006      	b.n	8000c6a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c5c:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <HAL_GPIO_Init+0x2b0>)
 8000c5e:	689a      	ldr	r2, [r3, #8]
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	43db      	mvns	r3, r3
 8000c64:	491f      	ldr	r1, [pc, #124]	; (8000ce4 <HAL_GPIO_Init+0x2b0>)
 8000c66:	4013      	ands	r3, r2
 8000c68:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d006      	beq.n	8000c84 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c76:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <HAL_GPIO_Init+0x2b0>)
 8000c78:	68da      	ldr	r2, [r3, #12]
 8000c7a:	491a      	ldr	r1, [pc, #104]	; (8000ce4 <HAL_GPIO_Init+0x2b0>)
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	60cb      	str	r3, [r1, #12]
 8000c82:	e006      	b.n	8000c92 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c84:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <HAL_GPIO_Init+0x2b0>)
 8000c86:	68da      	ldr	r2, [r3, #12]
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	4915      	ldr	r1, [pc, #84]	; (8000ce4 <HAL_GPIO_Init+0x2b0>)
 8000c8e:	4013      	ands	r3, r2
 8000c90:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c94:	3301      	adds	r3, #1
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f47f aed0 	bne.w	8000a48 <HAL_GPIO_Init+0x14>
  }
}
 8000ca8:	bf00      	nop
 8000caa:	372c      	adds	r7, #44	; 0x2c
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	10210000 	.word	0x10210000
 8000cb8:	10110000 	.word	0x10110000
 8000cbc:	10120000 	.word	0x10120000
 8000cc0:	10310000 	.word	0x10310000
 8000cc4:	10320000 	.word	0x10320000
 8000cc8:	10220000 	.word	0x10220000
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	40010000 	.word	0x40010000
 8000cd4:	40010800 	.word	0x40010800
 8000cd8:	40010c00 	.word	0x40010c00
 8000cdc:	40011000 	.word	0x40011000
 8000ce0:	40011400 	.word	0x40011400
 8000ce4:	40010400 	.word	0x40010400

08000ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	807b      	strh	r3, [r7, #2]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cf8:	787b      	ldrb	r3, [r7, #1]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d003      	beq.n	8000d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cfe:	887a      	ldrh	r2, [r7, #2]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d04:	e003      	b.n	8000d0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d06:	887b      	ldrh	r3, [r7, #2]
 8000d08:	041a      	lsls	r2, r3, #16
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	611a      	str	r2, [r3, #16]
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr

08000d18 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	460b      	mov	r3, r1
 8000d22:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	68da      	ldr	r2, [r3, #12]
 8000d28:	887b      	ldrh	r3, [r7, #2]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d003      	beq.n	8000d38 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d30:	887a      	ldrh	r2, [r7, #2]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000d36:	e002      	b.n	8000d3e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d38:	887a      	ldrh	r2, [r7, #2]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	611a      	str	r2, [r3, #16]
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d101      	bne.n	8000d5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e10f      	b.n	8000f7a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d106      	bne.n	8000d74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff fb98 	bl	80004a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2224      	movs	r2, #36	; 0x24
 8000d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f022 0201 	bic.w	r2, r2, #1
 8000d8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000d8c:	f001 fd34 	bl	80027f8 <HAL_RCC_GetPCLK1Freq>
 8000d90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	4a7b      	ldr	r2, [pc, #492]	; (8000f84 <HAL_I2C_Init+0x23c>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d807      	bhi.n	8000dac <HAL_I2C_Init+0x64>
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4a7a      	ldr	r2, [pc, #488]	; (8000f88 <HAL_I2C_Init+0x240>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	bf94      	ite	ls
 8000da4:	2301      	movls	r3, #1
 8000da6:	2300      	movhi	r3, #0
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	e006      	b.n	8000dba <HAL_I2C_Init+0x72>
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	4a77      	ldr	r2, [pc, #476]	; (8000f8c <HAL_I2C_Init+0x244>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	bf94      	ite	ls
 8000db4:	2301      	movls	r3, #1
 8000db6:	2300      	movhi	r3, #0
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e0db      	b.n	8000f7a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	4a72      	ldr	r2, [pc, #456]	; (8000f90 <HAL_I2C_Init+0x248>)
 8000dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dca:	0c9b      	lsrs	r3, r3, #18
 8000dcc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	68ba      	ldr	r2, [r7, #8]
 8000dde:	430a      	orrs	r2, r1
 8000de0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	6a1b      	ldr	r3, [r3, #32]
 8000de8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	4a64      	ldr	r2, [pc, #400]	; (8000f84 <HAL_I2C_Init+0x23c>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d802      	bhi.n	8000dfc <HAL_I2C_Init+0xb4>
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	e009      	b.n	8000e10 <HAL_I2C_Init+0xc8>
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e02:	fb02 f303 	mul.w	r3, r2, r3
 8000e06:	4a63      	ldr	r2, [pc, #396]	; (8000f94 <HAL_I2C_Init+0x24c>)
 8000e08:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0c:	099b      	lsrs	r3, r3, #6
 8000e0e:	3301      	adds	r3, #1
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	6812      	ldr	r2, [r2, #0]
 8000e14:	430b      	orrs	r3, r1
 8000e16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000e22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	4956      	ldr	r1, [pc, #344]	; (8000f84 <HAL_I2C_Init+0x23c>)
 8000e2c:	428b      	cmp	r3, r1
 8000e2e:	d80d      	bhi.n	8000e4c <HAL_I2C_Init+0x104>
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	1e59      	subs	r1, r3, #1
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e3e:	3301      	adds	r3, #1
 8000e40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e44:	2b04      	cmp	r3, #4
 8000e46:	bf38      	it	cc
 8000e48:	2304      	movcc	r3, #4
 8000e4a:	e04f      	b.n	8000eec <HAL_I2C_Init+0x1a4>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d111      	bne.n	8000e78 <HAL_I2C_Init+0x130>
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	1e58      	subs	r0, r3, #1
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6859      	ldr	r1, [r3, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	440b      	add	r3, r1
 8000e62:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e66:	3301      	adds	r3, #1
 8000e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	bf0c      	ite	eq
 8000e70:	2301      	moveq	r3, #1
 8000e72:	2300      	movne	r3, #0
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	e012      	b.n	8000e9e <HAL_I2C_Init+0x156>
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	1e58      	subs	r0, r3, #1
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6859      	ldr	r1, [r3, #4]
 8000e80:	460b      	mov	r3, r1
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	440b      	add	r3, r1
 8000e86:	0099      	lsls	r1, r3, #2
 8000e88:	440b      	add	r3, r1
 8000e8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e8e:	3301      	adds	r3, #1
 8000e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	bf0c      	ite	eq
 8000e98:	2301      	moveq	r3, #1
 8000e9a:	2300      	movne	r3, #0
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <HAL_I2C_Init+0x15e>
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e022      	b.n	8000eec <HAL_I2C_Init+0x1a4>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d10e      	bne.n	8000ecc <HAL_I2C_Init+0x184>
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	1e58      	subs	r0, r3, #1
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6859      	ldr	r1, [r3, #4]
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	440b      	add	r3, r1
 8000ebc:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eca:	e00f      	b.n	8000eec <HAL_I2C_Init+0x1a4>
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	1e58      	subs	r0, r3, #1
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6859      	ldr	r1, [r3, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	440b      	add	r3, r1
 8000eda:	0099      	lsls	r1, r3, #2
 8000edc:	440b      	add	r3, r1
 8000ede:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ee8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000eec:	6879      	ldr	r1, [r7, #4]
 8000eee:	6809      	ldr	r1, [r1, #0]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	69da      	ldr	r2, [r3, #28]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6a1b      	ldr	r3, [r3, #32]
 8000f06:	431a      	orrs	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000f1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	6911      	ldr	r1, [r2, #16]
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	68d2      	ldr	r2, [r2, #12]
 8000f26:	4311      	orrs	r1, r2
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	6812      	ldr	r2, [r2, #0]
 8000f2c:	430b      	orrs	r3, r1
 8000f2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	695a      	ldr	r2, [r3, #20]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	431a      	orrs	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f042 0201 	orr.w	r2, r2, #1
 8000f5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2220      	movs	r2, #32
 8000f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	000186a0 	.word	0x000186a0
 8000f88:	001e847f 	.word	0x001e847f
 8000f8c:	003d08ff 	.word	0x003d08ff
 8000f90:	431bde83 	.word	0x431bde83
 8000f94:	10624dd3 	.word	0x10624dd3

08000f98 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	; 0x28
 8000f9c:	af02      	add	r7, sp, #8
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	607a      	str	r2, [r7, #4]
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8000fa8:	f7ff fc0a 	bl	80007c0 <HAL_GetTick>
 8000fac:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b20      	cmp	r3, #32
 8000fbc:	f040 8105 	bne.w	80011ca <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2319      	movs	r3, #25
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	4982      	ldr	r1, [pc, #520]	; (80011d4 <HAL_I2C_IsDeviceReady+0x23c>)
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f000 f906 	bl	80011dc <I2C_WaitOnFlagUntilTimeout>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	e0f8      	b.n	80011cc <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d101      	bne.n	8000fe8 <HAL_I2C_IsDeviceReady+0x50>
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	e0f1      	b.n	80011cc <HAL_I2C_IsDeviceReady+0x234>
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2201      	movs	r2, #1
 8000fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d007      	beq.n	800100e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f042 0201 	orr.w	r2, r2, #1
 800100c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800101c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2224      	movs	r2, #36	; 0x24
 8001022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2200      	movs	r2, #0
 800102a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4a6a      	ldr	r2, [pc, #424]	; (80011d8 <HAL_I2C_IsDeviceReady+0x240>)
 8001030:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001040:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	2200      	movs	r2, #0
 800104a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800104e:	68f8      	ldr	r0, [r7, #12]
 8001050:	f000 f8c4 	bl	80011dc <I2C_WaitOnFlagUntilTimeout>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e0b6      	b.n	80011cc <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800105e:	897b      	ldrh	r3, [r7, #10]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	461a      	mov	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800106c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800106e:	f7ff fba7 	bl	80007c0 <HAL_GetTick>
 8001072:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	2b02      	cmp	r3, #2
 8001080:	bf0c      	ite	eq
 8001082:	2301      	moveq	r3, #1
 8001084:	2300      	movne	r3, #0
 8001086:	b2db      	uxtb	r3, r3
 8001088:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001098:	bf0c      	ite	eq
 800109a:	2301      	moveq	r3, #1
 800109c:	2300      	movne	r3, #0
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80010a2:	e025      	b.n	80010f0 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80010a4:	f7ff fb8c 	bl	80007c0 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d302      	bcc.n	80010ba <HAL_I2C_IsDeviceReady+0x122>
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d103      	bne.n	80010c2 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	22a0      	movs	r2, #160	; 0xa0
 80010be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	695b      	ldr	r3, [r3, #20]
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	bf0c      	ite	eq
 80010d0:	2301      	moveq	r3, #1
 80010d2:	2300      	movne	r3, #0
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010e6:	bf0c      	ite	eq
 80010e8:	2301      	moveq	r3, #1
 80010ea:	2300      	movne	r3, #0
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2ba0      	cmp	r3, #160	; 0xa0
 80010fa:	d005      	beq.n	8001108 <HAL_I2C_IsDeviceReady+0x170>
 80010fc:	7dfb      	ldrb	r3, [r7, #23]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d102      	bne.n	8001108 <HAL_I2C_IsDeviceReady+0x170>
 8001102:	7dbb      	ldrb	r3, [r7, #22]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0cd      	beq.n	80010a4 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2220      	movs	r2, #32
 800110c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	695b      	ldr	r3, [r3, #20]
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b02      	cmp	r3, #2
 800111c:	d129      	bne.n	8001172 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800112c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	2319      	movs	r3, #25
 800114a:	2201      	movs	r2, #1
 800114c:	4921      	ldr	r1, [pc, #132]	; (80011d4 <HAL_I2C_IsDeviceReady+0x23c>)
 800114e:	68f8      	ldr	r0, [r7, #12]
 8001150:	f000 f844 	bl	80011dc <I2C_WaitOnFlagUntilTimeout>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e036      	b.n	80011cc <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	2220      	movs	r2, #32
 8001162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2200      	movs	r2, #0
 800116a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800116e:	2300      	movs	r3, #0
 8001170:	e02c      	b.n	80011cc <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001180:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800118a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	2319      	movs	r3, #25
 8001192:	2201      	movs	r2, #1
 8001194:	490f      	ldr	r1, [pc, #60]	; (80011d4 <HAL_I2C_IsDeviceReady+0x23c>)
 8001196:	68f8      	ldr	r0, [r7, #12]
 8001198:	f000 f820 	bl	80011dc <I2C_WaitOnFlagUntilTimeout>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e012      	b.n	80011cc <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	3301      	adds	r3, #1
 80011aa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	f4ff af3e 	bcc.w	8001032 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2220      	movs	r2, #32
 80011ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e000      	b.n	80011cc <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 80011ca:	2302      	movs	r3, #2
  }
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3720      	adds	r7, #32
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	00100002 	.word	0x00100002
 80011d8:	ffff0000 	.word	0xffff0000

080011dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	4613      	mov	r3, r2
 80011ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80011ec:	e025      	b.n	800123a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f4:	d021      	beq.n	800123a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011f6:	f7ff fae3 	bl	80007c0 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	683a      	ldr	r2, [r7, #0]
 8001202:	429a      	cmp	r2, r3
 8001204:	d302      	bcc.n	800120c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d116      	bne.n	800123a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2200      	movs	r2, #0
 8001210:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2220      	movs	r2, #32
 8001216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	f043 0220 	orr.w	r2, r3, #32
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e023      	b.n	8001282 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	0c1b      	lsrs	r3, r3, #16
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b01      	cmp	r3, #1
 8001242:	d10d      	bne.n	8001260 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	43da      	mvns	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	4013      	ands	r3, r2
 8001250:	b29b      	uxth	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	bf0c      	ite	eq
 8001256:	2301      	moveq	r3, #1
 8001258:	2300      	movne	r3, #0
 800125a:	b2db      	uxtb	r3, r3
 800125c:	461a      	mov	r2, r3
 800125e:	e00c      	b.n	800127a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	43da      	mvns	r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	4013      	ands	r3, r2
 800126c:	b29b      	uxth	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	bf0c      	ite	eq
 8001272:	2301      	moveq	r3, #1
 8001274:	2300      	movne	r3, #0
 8001276:	b2db      	uxtb	r3, r3
 8001278:	461a      	mov	r2, r3
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	429a      	cmp	r2, r3
 800127e:	d0b6      	beq.n	80011ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800128a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800128c:	b08b      	sub	sp, #44	; 0x2c
 800128e:	af06      	add	r7, sp, #24
 8001290:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d101      	bne.n	800129c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e0d3      	b.n	8001444 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d106      	bne.n	80012b6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f004 fa31 	bl	8005718 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2203      	movs	r2, #3
 80012ba:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f001 fba7 	bl	8002a16 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	603b      	str	r3, [r7, #0]
 80012ce:	687e      	ldr	r6, [r7, #4]
 80012d0:	466d      	mov	r5, sp
 80012d2:	f106 0410 	add.w	r4, r6, #16
 80012d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012da:	6823      	ldr	r3, [r4, #0]
 80012dc:	602b      	str	r3, [r5, #0]
 80012de:	1d33      	adds	r3, r6, #4
 80012e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012e2:	6838      	ldr	r0, [r7, #0]
 80012e4:	f001 fb70 	bl	80029c8 <USB_CoreInit>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d005      	beq.n	80012fa <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2202      	movs	r2, #2
 80012f2:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e0a4      	b.n	8001444 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f001 fba4 	bl	8002a4e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001306:	2300      	movs	r3, #0
 8001308:	73fb      	strb	r3, [r7, #15]
 800130a:	e035      	b.n	8001378 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	015b      	lsls	r3, r3, #5
 8001312:	4413      	add	r3, r2
 8001314:	3329      	adds	r3, #41	; 0x29
 8001316:	2201      	movs	r2, #1
 8001318:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	015b      	lsls	r3, r3, #5
 8001320:	4413      	add	r3, r2
 8001322:	3328      	adds	r3, #40	; 0x28
 8001324:	7bfa      	ldrb	r2, [r7, #15]
 8001326:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	7bfa      	ldrb	r2, [r7, #15]
 800132c:	b291      	uxth	r1, r2
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	015b      	lsls	r3, r3, #5
 8001332:	4413      	add	r3, r2
 8001334:	3336      	adds	r3, #54	; 0x36
 8001336:	460a      	mov	r2, r1
 8001338:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	015b      	lsls	r3, r3, #5
 8001340:	4413      	add	r3, r2
 8001342:	332b      	adds	r3, #43	; 0x2b
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	015b      	lsls	r3, r3, #5
 800134e:	4413      	add	r3, r2
 8001350:	3338      	adds	r3, #56	; 0x38
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	015b      	lsls	r3, r3, #5
 800135c:	4413      	add	r3, r2
 800135e:	333c      	adds	r3, #60	; 0x3c
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	3302      	adds	r3, #2
 800136a:	015b      	lsls	r3, r3, #5
 800136c:	4413      	add	r3, r2
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	3301      	adds	r3, #1
 8001376:	73fb      	strb	r3, [r7, #15]
 8001378:	7bfa      	ldrb	r2, [r7, #15]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	429a      	cmp	r2, r3
 8001380:	d3c4      	bcc.n	800130c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001382:	2300      	movs	r3, #0
 8001384:	73fb      	strb	r3, [r7, #15]
 8001386:	e031      	b.n	80013ec <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	015b      	lsls	r3, r3, #5
 800138e:	4413      	add	r3, r2
 8001390:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001394:	2200      	movs	r2, #0
 8001396:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	015b      	lsls	r3, r3, #5
 800139e:	4413      	add	r3, r2
 80013a0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013a4:	7bfa      	ldrb	r2, [r7, #15]
 80013a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	015b      	lsls	r3, r3, #5
 80013ae:	4413      	add	r3, r2
 80013b0:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	015b      	lsls	r3, r3, #5
 80013be:	4413      	add	r3, r2
 80013c0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	015b      	lsls	r3, r3, #5
 80013ce:	4413      	add	r3, r2
 80013d0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	330a      	adds	r3, #10
 80013de:	015b      	lsls	r3, r3, #5
 80013e0:	4413      	add	r3, r2
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	3301      	adds	r3, #1
 80013ea:	73fb      	strb	r3, [r7, #15]
 80013ec:	7bfa      	ldrb	r2, [r7, #15]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d3c8      	bcc.n	8001388 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	687e      	ldr	r6, [r7, #4]
 80013fe:	466d      	mov	r5, sp
 8001400:	f106 0410 	add.w	r4, r6, #16
 8001404:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001406:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001408:	6823      	ldr	r3, [r4, #0]
 800140a:	602b      	str	r3, [r5, #0]
 800140c:	1d33      	adds	r3, r6, #4
 800140e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001410:	6838      	ldr	r0, [r7, #0]
 8001412:	f001 fb28 	bl	8002a66 <USB_DevInit>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d005      	beq.n	8001428 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2202      	movs	r2, #2
 8001420:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e00d      	b.n	8001444 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f002 fb66 	bl	8003b0e <USB_DevDisconnect>

  return HAL_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800144c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800145a:	2b01      	cmp	r3, #1
 800145c:	d101      	bne.n	8001462 <HAL_PCD_Start+0x16>
 800145e:	2302      	movs	r3, #2
 8001460:	e016      	b.n	8001490 <HAL_PCD_Start+0x44>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2201      	movs	r2, #1
 8001466:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800146a:	2101      	movs	r1, #1
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f004 fbba 	bl	8005be6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f002 fb3f 	bl	8003afa <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f001 fab1 	bl	80029e8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f002 fb3c 	bl	8003b22 <USB_ReadInterrupts>
 80014aa:	4603      	mov	r3, r0
 80014ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014b4:	d102      	bne.n	80014bc <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 faf2 	bl	8001aa0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f002 fb2e 	bl	8003b22 <USB_ReadInterrupts>
 80014c6:	4603      	mov	r3, r0
 80014c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014d0:	d112      	bne.n	80014f8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014da:	b29a      	uxth	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014e4:	b292      	uxth	r2, r2
 80014e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f004 f989 	bl	8005802 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80014f0:	2100      	movs	r1, #0
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 f8de 	bl	80016b4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f002 fb10 	bl	8003b22 <USB_ReadInterrupts>
 8001502:	4603      	mov	r3, r0
 8001504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001508:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800150c:	d10b      	bne.n	8001526 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001516:	b29a      	uxth	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001520:	b292      	uxth	r2, r2
 8001522:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f002 faf9 	bl	8003b22 <USB_ReadInterrupts>
 8001530:	4603      	mov	r3, r0
 8001532:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800153a:	d10b      	bne.n	8001554 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001544:	b29a      	uxth	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800154e:	b292      	uxth	r2, r2
 8001550:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f002 fae2 	bl	8003b22 <USB_ReadInterrupts>
 800155e:	4603      	mov	r3, r0
 8001560:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001568:	d126      	bne.n	80015b8 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001572:	b29a      	uxth	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 0204 	bic.w	r2, r2, #4
 800157c:	b292      	uxth	r2, r2
 800157e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800158a:	b29a      	uxth	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 0208 	bic.w	r2, r2, #8
 8001594:	b292      	uxth	r2, r2
 8001596:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f004 f96a 	bl	8005874 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80015b2:	b292      	uxth	r2, r2
 80015b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f002 fab0 	bl	8003b22 <USB_ReadInterrupts>
 80015c2:	4603      	mov	r3, r0
 80015c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015cc:	d13d      	bne.n	800164a <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f042 0208 	orr.w	r2, r2, #8
 80015e0:	b292      	uxth	r2, r2
 80015e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015f8:	b292      	uxth	r2, r2
 80015fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001606:	b29a      	uxth	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f042 0204 	orr.w	r2, r2, #4
 8001610:	b292      	uxth	r2, r2
 8001612:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f002 fa81 	bl	8003b22 <USB_ReadInterrupts>
 8001620:	4603      	mov	r3, r0
 8001622:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800162a:	d10b      	bne.n	8001644 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001634:	b29a      	uxth	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800163e:	b292      	uxth	r2, r2
 8001640:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f004 f8fb 	bl	8005840 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f002 fa67 	bl	8003b22 <USB_ReadInterrupts>
 8001654:	4603      	mov	r3, r0
 8001656:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800165a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800165e:	d10e      	bne.n	800167e <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001668:	b29a      	uxth	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001672:	b292      	uxth	r2, r2
 8001674:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f004 f8b4 	bl	80057e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f002 fa4d 	bl	8003b22 <USB_ReadInterrupts>
 8001688:	4603      	mov	r3, r0
 800168a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001692:	d10b      	bne.n	80016ac <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800169c:	b29a      	uxth	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016a6:	b292      	uxth	r2, r2
 80016a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d101      	bne.n	80016ce <HAL_PCD_SetAddress+0x1a>
 80016ca:	2302      	movs	r3, #2
 80016cc:	e013      	b.n	80016f6 <HAL_PCD_SetAddress+0x42>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2201      	movs	r2, #1
 80016d2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	78fa      	ldrb	r2, [r7, #3]
 80016da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	78fa      	ldrb	r2, [r7, #3]
 80016e4:	4611      	mov	r1, r2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f002 f9f4 	bl	8003ad4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b084      	sub	sp, #16
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
 8001706:	4608      	mov	r0, r1
 8001708:	4611      	mov	r1, r2
 800170a:	461a      	mov	r2, r3
 800170c:	4603      	mov	r3, r0
 800170e:	70fb      	strb	r3, [r7, #3]
 8001710:	460b      	mov	r3, r1
 8001712:	803b      	strh	r3, [r7, #0]
 8001714:	4613      	mov	r3, r2
 8001716:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001718:	2300      	movs	r3, #0
 800171a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800171c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001720:	2b00      	cmp	r3, #0
 8001722:	da0b      	bge.n	800173c <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	015b      	lsls	r3, r3, #5
 800172c:	3328      	adds	r3, #40	; 0x28
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2201      	movs	r2, #1
 8001738:	705a      	strb	r2, [r3, #1]
 800173a:	e00b      	b.n	8001754 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800173c:	78fb      	ldrb	r3, [r7, #3]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	015b      	lsls	r3, r3, #5
 8001744:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	4413      	add	r3, r2
 800174c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2200      	movs	r2, #0
 8001752:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001754:	78fb      	ldrb	r3, [r7, #3]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	b2da      	uxtb	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001760:	883a      	ldrh	r2, [r7, #0]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	78ba      	ldrb	r2, [r7, #2]
 800176a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	785b      	ldrb	r3, [r3, #1]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d004      	beq.n	800177e <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	b29a      	uxth	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800177e:	78bb      	ldrb	r3, [r7, #2]
 8001780:	2b02      	cmp	r3, #2
 8001782:	d102      	bne.n	800178a <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2200      	movs	r2, #0
 8001788:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001790:	2b01      	cmp	r3, #1
 8001792:	d101      	bne.n	8001798 <HAL_PCD_EP_Open+0x9a>
 8001794:	2302      	movs	r3, #2
 8001796:	e00e      	b.n	80017b6 <HAL_PCD_EP_Open+0xb8>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	68f9      	ldr	r1, [r7, #12]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f001 f982 	bl	8002ab0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80017b4:	7afb      	ldrb	r3, [r7, #11]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b084      	sub	sp, #16
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	460b      	mov	r3, r1
 80017c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	da0b      	bge.n	80017ea <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	015b      	lsls	r3, r3, #5
 80017da:	3328      	adds	r3, #40	; 0x28
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	4413      	add	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2201      	movs	r2, #1
 80017e6:	705a      	strb	r2, [r3, #1]
 80017e8:	e00b      	b.n	8001802 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017ea:	78fb      	ldrb	r3, [r7, #3]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	015b      	lsls	r3, r3, #5
 80017f2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2200      	movs	r2, #0
 8001800:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001802:	78fb      	ldrb	r3, [r7, #3]
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	b2da      	uxtb	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001814:	2b01      	cmp	r3, #1
 8001816:	d101      	bne.n	800181c <HAL_PCD_EP_Close+0x5e>
 8001818:	2302      	movs	r3, #2
 800181a:	e00e      	b.n	800183a <HAL_PCD_EP_Close+0x7c>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68f9      	ldr	r1, [r7, #12]
 800182a:	4618      	mov	r0, r3
 800182c:	f001 fc2e 	bl	800308c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b086      	sub	sp, #24
 8001846:	af00      	add	r7, sp, #0
 8001848:	60f8      	str	r0, [r7, #12]
 800184a:	607a      	str	r2, [r7, #4]
 800184c:	603b      	str	r3, [r7, #0]
 800184e:	460b      	mov	r3, r1
 8001850:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001852:	7afb      	ldrb	r3, [r7, #11]
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	015b      	lsls	r3, r3, #5
 800185a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	4413      	add	r3, r2
 8001862:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	2200      	movs	r2, #0
 8001874:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	2200      	movs	r2, #0
 800187a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800187c:	7afb      	ldrb	r3, [r7, #11]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	b2da      	uxtb	r2, r3
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001888:	7afb      	ldrb	r3, [r7, #11]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	2b00      	cmp	r3, #0
 8001890:	d106      	bne.n	80018a0 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6979      	ldr	r1, [r7, #20]
 8001898:	4618      	mov	r0, r3
 800189a:	f001 fd8d 	bl	80033b8 <USB_EPStartXfer>
 800189e:	e005      	b.n	80018ac <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6979      	ldr	r1, [r7, #20]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f001 fd86 	bl	80033b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
 80018be:	460b      	mov	r3, r1
 80018c0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80018c2:	78fb      	ldrb	r3, [r7, #3]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	330a      	adds	r3, #10
 80018cc:	015b      	lsls	r3, r3, #5
 80018ce:	4413      	add	r3, r2
 80018d0:	3304      	adds	r3, #4
 80018d2:	681b      	ldr	r3, [r3, #0]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr

080018de <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	607a      	str	r2, [r7, #4]
 80018e8:	603b      	str	r3, [r7, #0]
 80018ea:	460b      	mov	r3, r1
 80018ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018ee:	7afb      	ldrb	r3, [r7, #11]
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	015b      	lsls	r3, r3, #5
 80018f6:	3328      	adds	r3, #40	; 0x28
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	4413      	add	r3, r2
 80018fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	2200      	movs	r2, #0
 800190e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	2201      	movs	r2, #1
 8001914:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001916:	7afb      	ldrb	r3, [r7, #11]
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	b2da      	uxtb	r2, r3
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001922:	7afb      	ldrb	r3, [r7, #11]
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	2b00      	cmp	r3, #0
 800192a:	d106      	bne.n	800193a <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6979      	ldr	r1, [r7, #20]
 8001932:	4618      	mov	r0, r3
 8001934:	f001 fd40 	bl	80033b8 <USB_EPStartXfer>
 8001938:	e005      	b.n	8001946 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6979      	ldr	r1, [r7, #20]
 8001940:	4618      	mov	r0, r3
 8001942:	f001 fd39 	bl	80033b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800195c:	78fb      	ldrb	r3, [r7, #3]
 800195e:	f003 0207 	and.w	r2, r3, #7
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	429a      	cmp	r2, r3
 8001968:	d901      	bls.n	800196e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e046      	b.n	80019fc <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800196e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001972:	2b00      	cmp	r3, #0
 8001974:	da0b      	bge.n	800198e <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001976:	78fb      	ldrb	r3, [r7, #3]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	015b      	lsls	r3, r3, #5
 800197e:	3328      	adds	r3, #40	; 0x28
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	4413      	add	r3, r2
 8001984:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2201      	movs	r2, #1
 800198a:	705a      	strb	r2, [r3, #1]
 800198c:	e009      	b.n	80019a2 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	015b      	lsls	r3, r3, #5
 8001992:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2201      	movs	r2, #1
 80019a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d101      	bne.n	80019c2 <HAL_PCD_EP_SetStall+0x72>
 80019be:	2302      	movs	r3, #2
 80019c0:	e01c      	b.n	80019fc <HAL_PCD_EP_SetStall+0xac>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68f9      	ldr	r1, [r7, #12]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f001 ffa9 	bl	8003928 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019d6:	78fb      	ldrb	r3, [r7, #3]
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d108      	bne.n	80019f2 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80019ea:	4619      	mov	r1, r3
 80019ec:	4610      	mov	r0, r2
 80019ee:	f002 f8a7 	bl	8003b40 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a10:	78fb      	ldrb	r3, [r7, #3]
 8001a12:	f003 020f 	and.w	r2, r3, #15
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d901      	bls.n	8001a22 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e03a      	b.n	8001a98 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	da0b      	bge.n	8001a42 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a2a:	78fb      	ldrb	r3, [r7, #3]
 8001a2c:	f003 0307 	and.w	r3, r3, #7
 8001a30:	015b      	lsls	r3, r3, #5
 8001a32:	3328      	adds	r3, #40	; 0x28
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	4413      	add	r3, r2
 8001a38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	705a      	strb	r2, [r3, #1]
 8001a40:	e00b      	b.n	8001a5a <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a42:	78fb      	ldrb	r3, [r7, #3]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	015b      	lsls	r3, r3, #5
 8001a4a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a60:	78fb      	ldrb	r3, [r7, #3]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d101      	bne.n	8001a7a <HAL_PCD_EP_ClrStall+0x76>
 8001a76:	2302      	movs	r3, #2
 8001a78:	e00e      	b.n	8001a98 <HAL_PCD_EP_ClrStall+0x94>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68f9      	ldr	r1, [r7, #12]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f001 ff8f 	bl	80039ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	b089      	sub	sp, #36	; 0x24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001aa8:	e282      	b.n	8001fb0 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ab2:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001ab4:	8afb      	ldrh	r3, [r7, #22]
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	f003 030f 	and.w	r3, r3, #15
 8001abc:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8001abe:	7d7b      	ldrb	r3, [r7, #21]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f040 8142 	bne.w	8001d4a <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001ac6:	8afb      	ldrh	r3, [r7, #22]
 8001ac8:	f003 0310 	and.w	r3, r3, #16
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d151      	bne.n	8001b74 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ae0:	b29c      	uxth	r4, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001aea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3328      	adds	r3, #40	; 0x28
 8001af6:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	461a      	mov	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	4413      	add	r3, r2
 8001b16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	695a      	ldr	r2, [r3, #20]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	441a      	add	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001b32:	2100      	movs	r1, #0
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f003 fe3f 	bl	80057b8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 8234 	beq.w	8001fb0 <PCD_EP_ISR_Handler+0x510>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f040 822f 	bne.w	8001fb0 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	b292      	uxth	r2, r2
 8001b66:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001b72:	e21d      	b.n	8001fb0 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b7a:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001b84:	8a7b      	ldrh	r3, [r7, #18]
 8001b86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d033      	beq.n	8001bf6 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	461a      	mov	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3306      	adds	r3, #6
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	6812      	ldr	r2, [r2, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bb0:	881b      	ldrh	r3, [r3, #0]
 8001bb2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6818      	ldr	r0, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	f002 f806 	bl	8003bde <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001bde:	4013      	ands	r3, r2
 8001be0:	b29c      	uxth	r4, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001bea:	b292      	uxth	r2, r2
 8001bec:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f003 fdb8 	bl	8005764 <HAL_PCD_SetupStageCallback>
 8001bf4:	e1dc      	b.n	8001fb0 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001bf6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f280 81d8 	bge.w	8001fb0 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	b29c      	uxth	r4, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001c18:	b292      	uxth	r2, r2
 8001c1a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	461a      	mov	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	4413      	add	r3, r2
 8001c30:	3306      	adds	r3, #6
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6812      	ldr	r2, [r2, #0]
 8001c38:	4413      	add	r3, r2
 8001c3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d019      	beq.n	8001c84 <PCD_EP_ISR_Handler+0x1e4>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d015      	beq.n	8001c84 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6818      	ldr	r0, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6959      	ldr	r1, [r3, #20]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	f001 ffb8 	bl	8003bde <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	695a      	ldr	r2, [r3, #20]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	441a      	add	r2, r3
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f003 fd82 	bl	8005788 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	461c      	mov	r4, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	441c      	add	r4, r3
 8001c96:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8001c9a:	461c      	mov	r4, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10e      	bne.n	8001cc2 <PCD_EP_ISR_Handler+0x222>
 8001ca4:	8823      	ldrh	r3, [r4, #0]
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	8023      	strh	r3, [r4, #0]
 8001cb0:	8823      	ldrh	r3, [r4, #0]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	8023      	strh	r3, [r4, #0]
 8001cc0:	e02d      	b.n	8001d1e <PCD_EP_ISR_Handler+0x27e>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	2b3e      	cmp	r3, #62	; 0x3e
 8001cc8:	d812      	bhi.n	8001cf0 <PCD_EP_ISR_Handler+0x250>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	085b      	lsrs	r3, r3, #1
 8001cd0:	61bb      	str	r3, [r7, #24]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d002      	beq.n	8001ce4 <PCD_EP_ISR_Handler+0x244>
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	61bb      	str	r3, [r7, #24]
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	029b      	lsls	r3, r3, #10
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	8023      	strh	r3, [r4, #0]
 8001cee:	e016      	b.n	8001d1e <PCD_EP_ISR_Handler+0x27e>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	095b      	lsrs	r3, r3, #5
 8001cf6:	61bb      	str	r3, [r7, #24]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	f003 031f 	and.w	r3, r3, #31
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d102      	bne.n	8001d0a <PCD_EP_ISR_Handler+0x26a>
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	61bb      	str	r3, [r7, #24]
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	029b      	lsls	r3, r3, #10
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d2e:	b29c      	uxth	r4, r3
 8001d30:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001d34:	b29c      	uxth	r4, r3
 8001d36:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001d3a:	b29c      	uxth	r4, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4ba2      	ldr	r3, [pc, #648]	; (8001fcc <PCD_EP_ISR_Handler+0x52c>)
 8001d42:	4323      	orrs	r3, r4
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	8013      	strh	r3, [r2, #0]
 8001d48:	e132      	b.n	8001fb0 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	7d7b      	ldrb	r3, [r7, #21]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d5a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f280 80d1 	bge.w	8001f06 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	7d7b      	ldrb	r3, [r7, #21]
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	881b      	ldrh	r3, [r3, #0]
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d78:	4013      	ands	r3, r2
 8001d7a:	b29c      	uxth	r4, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	461a      	mov	r2, r3
 8001d82:	7d7b      	ldrb	r3, [r7, #21]
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001d8c:	b292      	uxth	r2, r2
 8001d8e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001d90:	7d7b      	ldrb	r3, [r7, #21]
 8001d92:	015b      	lsls	r3, r3, #5
 8001d94:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	7b1b      	ldrb	r3, [r3, #12]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d121      	bne.n	8001dea <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	461a      	mov	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	4413      	add	r3, r2
 8001dba:	3306      	adds	r3, #6
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6812      	ldr	r2, [r2, #0]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dce:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8001dd0:	8bfb      	ldrh	r3, [r7, #30]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d072      	beq.n	8001ebc <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6818      	ldr	r0, [r3, #0]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6959      	ldr	r1, [r3, #20]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	88da      	ldrh	r2, [r3, #6]
 8001de2:	8bfb      	ldrh	r3, [r7, #30]
 8001de4:	f001 fefb 	bl	8003bde <USB_ReadPMA>
 8001de8:	e068      	b.n	8001ebc <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d021      	beq.n	8001e48 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	4413      	add	r3, r2
 8001e18:	3302      	adds	r3, #2
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6812      	ldr	r2, [r2, #0]
 8001e20:	4413      	add	r3, r2
 8001e22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e2c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001e2e:	8bfb      	ldrh	r3, [r7, #30]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d02a      	beq.n	8001e8a <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6818      	ldr	r0, [r3, #0]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6959      	ldr	r1, [r3, #20]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	891a      	ldrh	r2, [r3, #8]
 8001e40:	8bfb      	ldrh	r3, [r7, #30]
 8001e42:	f001 fecc 	bl	8003bde <USB_ReadPMA>
 8001e46:	e020      	b.n	8001e8a <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	461a      	mov	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3306      	adds	r3, #6
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	6812      	ldr	r2, [r2, #0]
 8001e64:	4413      	add	r3, r2
 8001e66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e70:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001e72:	8bfb      	ldrh	r3, [r7, #30]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d008      	beq.n	8001e8a <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6959      	ldr	r1, [r3, #20]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	895a      	ldrh	r2, [r3, #10]
 8001e84:	8bfb      	ldrh	r3, [r7, #30]
 8001e86:	f001 feaa 	bl	8003bde <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ea4:	b29c      	uxth	r4, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	441a      	add	r2, r3
 8001eb4:	4b46      	ldr	r3, [pc, #280]	; (8001fd0 <PCD_EP_ISR_Handler+0x530>)
 8001eb6:	4323      	orrs	r3, r4
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	69da      	ldr	r2, [r3, #28]
 8001ec0:	8bfb      	ldrh	r3, [r7, #30]
 8001ec2:	441a      	add	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	695a      	ldr	r2, [r3, #20]
 8001ecc:	8bfb      	ldrh	r3, [r7, #30]
 8001ece:	441a      	add	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d004      	beq.n	8001ee6 <PCD_EP_ISR_Handler+0x446>
 8001edc:	8bfa      	ldrh	r2, [r7, #30]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d206      	bcs.n	8001ef4 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	4619      	mov	r1, r3
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f003 fc4b 	bl	8005788 <HAL_PCD_DataOutStageCallback>
 8001ef2:	e008      	b.n	8001f06 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	7819      	ldrb	r1, [r3, #0]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	695a      	ldr	r2, [r3, #20]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff fc9e 	bl	8001842 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001f06:	8a7b      	ldrh	r3, [r7, #18]
 8001f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d04f      	beq.n	8001fb0 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8001f10:	7d7b      	ldrb	r3, [r7, #21]
 8001f12:	015b      	lsls	r3, r3, #5
 8001f14:	3328      	adds	r3, #40	; 0x28
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	461a      	mov	r2, r3
 8001f22:	7d7b      	ldrb	r3, [r7, #21]
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f34:	b29c      	uxth	r4, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	7d7b      	ldrb	r3, [r7, #21]
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	441a      	add	r2, r3
 8001f42:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001f46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	461a      	mov	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4413      	add	r3, r2
 8001f62:	3302      	adds	r3, #2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6812      	ldr	r2, [r2, #0]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	695a      	ldr	r2, [r3, #20]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	441a      	add	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d106      	bne.n	8001f9e <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	4619      	mov	r1, r3
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f003 fc0e 	bl	80057b8 <HAL_PCD_DataInStageCallback>
 8001f9c:	e008      	b.n	8001fb0 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	7819      	ldrb	r1, [r3, #0]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	695a      	ldr	r2, [r3, #20]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff fc97 	bl	80018de <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	b21b      	sxth	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f6ff ad74 	blt.w	8001aaa <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3724      	adds	r7, #36	; 0x24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd90      	pop	{r4, r7, pc}
 8001fcc:	ffff8080 	.word	0xffff8080
 8001fd0:	ffff80c0 	.word	0xffff80c0

08001fd4 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b087      	sub	sp, #28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	607b      	str	r3, [r7, #4]
 8001fde:	460b      	mov	r3, r1
 8001fe0:	817b      	strh	r3, [r7, #10]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001fe6:	897b      	ldrh	r3, [r7, #10]
 8001fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d008      	beq.n	8002004 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ff2:	897b      	ldrh	r3, [r7, #10]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	015b      	lsls	r3, r3, #5
 8001ffa:	3328      	adds	r3, #40	; 0x28
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	4413      	add	r3, r2
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	e006      	b.n	8002012 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002004:	897b      	ldrh	r3, [r7, #10]
 8002006:	015b      	lsls	r3, r3, #5
 8002008:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	4413      	add	r3, r2
 8002010:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002012:	893b      	ldrh	r3, [r7, #8]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d107      	bne.n	8002028 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	2200      	movs	r2, #0
 800201c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	b29a      	uxth	r2, r3
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	80da      	strh	r2, [r3, #6]
 8002026:	e00b      	b.n	8002040 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	2201      	movs	r2, #1
 800202c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	b29a      	uxth	r2, r3
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	0c1b      	lsrs	r3, r3, #16
 800203a:	b29a      	uxth	r2, r3
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	371c      	adds	r7, #28
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e26c      	b.n	8002538 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 8087 	beq.w	800217a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800206c:	4b92      	ldr	r3, [pc, #584]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 030c 	and.w	r3, r3, #12
 8002074:	2b04      	cmp	r3, #4
 8002076:	d00c      	beq.n	8002092 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002078:	4b8f      	ldr	r3, [pc, #572]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 030c 	and.w	r3, r3, #12
 8002080:	2b08      	cmp	r3, #8
 8002082:	d112      	bne.n	80020aa <HAL_RCC_OscConfig+0x5e>
 8002084:	4b8c      	ldr	r3, [pc, #560]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002090:	d10b      	bne.n	80020aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002092:	4b89      	ldr	r3, [pc, #548]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d06c      	beq.n	8002178 <HAL_RCC_OscConfig+0x12c>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d168      	bne.n	8002178 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e246      	b.n	8002538 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b2:	d106      	bne.n	80020c2 <HAL_RCC_OscConfig+0x76>
 80020b4:	4b80      	ldr	r3, [pc, #512]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a7f      	ldr	r2, [pc, #508]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020be:	6013      	str	r3, [r2, #0]
 80020c0:	e02e      	b.n	8002120 <HAL_RCC_OscConfig+0xd4>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10c      	bne.n	80020e4 <HAL_RCC_OscConfig+0x98>
 80020ca:	4b7b      	ldr	r3, [pc, #492]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a7a      	ldr	r2, [pc, #488]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	4b78      	ldr	r3, [pc, #480]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a77      	ldr	r2, [pc, #476]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	e01d      	b.n	8002120 <HAL_RCC_OscConfig+0xd4>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020ec:	d10c      	bne.n	8002108 <HAL_RCC_OscConfig+0xbc>
 80020ee:	4b72      	ldr	r3, [pc, #456]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a71      	ldr	r2, [pc, #452]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	4b6f      	ldr	r3, [pc, #444]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a6e      	ldr	r2, [pc, #440]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	e00b      	b.n	8002120 <HAL_RCC_OscConfig+0xd4>
 8002108:	4b6b      	ldr	r3, [pc, #428]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a6a      	ldr	r2, [pc, #424]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 800210e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	4b68      	ldr	r3, [pc, #416]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a67      	ldr	r2, [pc, #412]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 800211a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800211e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d013      	beq.n	8002150 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002128:	f7fe fb4a 	bl	80007c0 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002130:	f7fe fb46 	bl	80007c0 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b64      	cmp	r3, #100	; 0x64
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e1fa      	b.n	8002538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002142:	4b5d      	ldr	r3, [pc, #372]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0f0      	beq.n	8002130 <HAL_RCC_OscConfig+0xe4>
 800214e:	e014      	b.n	800217a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002150:	f7fe fb36 	bl	80007c0 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002158:	f7fe fb32 	bl	80007c0 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b64      	cmp	r3, #100	; 0x64
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e1e6      	b.n	8002538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800216a:	4b53      	ldr	r3, [pc, #332]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x10c>
 8002176:	e000      	b.n	800217a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d063      	beq.n	800224e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002186:	4b4c      	ldr	r3, [pc, #304]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 030c 	and.w	r3, r3, #12
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00b      	beq.n	80021aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002192:	4b49      	ldr	r3, [pc, #292]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 030c 	and.w	r3, r3, #12
 800219a:	2b08      	cmp	r3, #8
 800219c:	d11c      	bne.n	80021d8 <HAL_RCC_OscConfig+0x18c>
 800219e:	4b46      	ldr	r3, [pc, #280]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d116      	bne.n	80021d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021aa:	4b43      	ldr	r3, [pc, #268]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d005      	beq.n	80021c2 <HAL_RCC_OscConfig+0x176>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d001      	beq.n	80021c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e1ba      	b.n	8002538 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c2:	4b3d      	ldr	r3, [pc, #244]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	4939      	ldr	r1, [pc, #228]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d6:	e03a      	b.n	800224e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d020      	beq.n	8002222 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021e0:	4b36      	ldr	r3, [pc, #216]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 80021e2:	2201      	movs	r2, #1
 80021e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e6:	f7fe faeb 	bl	80007c0 <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ee:	f7fe fae7 	bl	80007c0 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e19b      	b.n	8002538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002200:	4b2d      	ldr	r3, [pc, #180]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0f0      	beq.n	80021ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220c:	4b2a      	ldr	r3, [pc, #168]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	4927      	ldr	r1, [pc, #156]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 800221c:	4313      	orrs	r3, r2
 800221e:	600b      	str	r3, [r1, #0]
 8002220:	e015      	b.n	800224e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002222:	4b26      	ldr	r3, [pc, #152]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002228:	f7fe faca 	bl	80007c0 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002230:	f7fe fac6 	bl	80007c0 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e17a      	b.n	8002538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002242:	4b1d      	ldr	r3, [pc, #116]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f0      	bne.n	8002230 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b00      	cmp	r3, #0
 8002258:	d03a      	beq.n	80022d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d019      	beq.n	8002296 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002262:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 8002264:	2201      	movs	r2, #1
 8002266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002268:	f7fe faaa 	bl	80007c0 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002270:	f7fe faa6 	bl	80007c0 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e15a      	b.n	8002538 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002282:	4b0d      	ldr	r3, [pc, #52]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f0      	beq.n	8002270 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800228e:	2001      	movs	r0, #1
 8002290:	f000 fac6 	bl	8002820 <RCC_Delay>
 8002294:	e01c      	b.n	80022d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002296:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229c:	f7fe fa90 	bl	80007c0 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a2:	e00f      	b.n	80022c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022a4:	f7fe fa8c 	bl	80007c0 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d908      	bls.n	80022c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e140      	b.n	8002538 <HAL_RCC_OscConfig+0x4ec>
 80022b6:	bf00      	nop
 80022b8:	40021000 	.word	0x40021000
 80022bc:	42420000 	.word	0x42420000
 80022c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c4:	4b9e      	ldr	r3, [pc, #632]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1e9      	bne.n	80022a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 80a6 	beq.w	800242a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022de:	2300      	movs	r3, #0
 80022e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022e2:	4b97      	ldr	r3, [pc, #604]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10d      	bne.n	800230a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ee:	4b94      	ldr	r3, [pc, #592]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	4a93      	ldr	r2, [pc, #588]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 80022f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f8:	61d3      	str	r3, [r2, #28]
 80022fa:	4b91      	ldr	r3, [pc, #580]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002302:	60bb      	str	r3, [r7, #8]
 8002304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002306:	2301      	movs	r3, #1
 8002308:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230a:	4b8e      	ldr	r3, [pc, #568]	; (8002544 <HAL_RCC_OscConfig+0x4f8>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002312:	2b00      	cmp	r3, #0
 8002314:	d118      	bne.n	8002348 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002316:	4b8b      	ldr	r3, [pc, #556]	; (8002544 <HAL_RCC_OscConfig+0x4f8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a8a      	ldr	r2, [pc, #552]	; (8002544 <HAL_RCC_OscConfig+0x4f8>)
 800231c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002322:	f7fe fa4d 	bl	80007c0 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800232a:	f7fe fa49 	bl	80007c0 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b64      	cmp	r3, #100	; 0x64
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e0fd      	b.n	8002538 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233c:	4b81      	ldr	r3, [pc, #516]	; (8002544 <HAL_RCC_OscConfig+0x4f8>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0f0      	beq.n	800232a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d106      	bne.n	800235e <HAL_RCC_OscConfig+0x312>
 8002350:	4b7b      	ldr	r3, [pc, #492]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	4a7a      	ldr	r2, [pc, #488]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	6213      	str	r3, [r2, #32]
 800235c:	e02d      	b.n	80023ba <HAL_RCC_OscConfig+0x36e>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10c      	bne.n	8002380 <HAL_RCC_OscConfig+0x334>
 8002366:	4b76      	ldr	r3, [pc, #472]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	4a75      	ldr	r2, [pc, #468]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 800236c:	f023 0301 	bic.w	r3, r3, #1
 8002370:	6213      	str	r3, [r2, #32]
 8002372:	4b73      	ldr	r3, [pc, #460]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	4a72      	ldr	r2, [pc, #456]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 8002378:	f023 0304 	bic.w	r3, r3, #4
 800237c:	6213      	str	r3, [r2, #32]
 800237e:	e01c      	b.n	80023ba <HAL_RCC_OscConfig+0x36e>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	2b05      	cmp	r3, #5
 8002386:	d10c      	bne.n	80023a2 <HAL_RCC_OscConfig+0x356>
 8002388:	4b6d      	ldr	r3, [pc, #436]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	4a6c      	ldr	r2, [pc, #432]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 800238e:	f043 0304 	orr.w	r3, r3, #4
 8002392:	6213      	str	r3, [r2, #32]
 8002394:	4b6a      	ldr	r3, [pc, #424]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	4a69      	ldr	r2, [pc, #420]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	6213      	str	r3, [r2, #32]
 80023a0:	e00b      	b.n	80023ba <HAL_RCC_OscConfig+0x36e>
 80023a2:	4b67      	ldr	r3, [pc, #412]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	4a66      	ldr	r2, [pc, #408]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 80023a8:	f023 0301 	bic.w	r3, r3, #1
 80023ac:	6213      	str	r3, [r2, #32]
 80023ae:	4b64      	ldr	r3, [pc, #400]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	4a63      	ldr	r2, [pc, #396]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 80023b4:	f023 0304 	bic.w	r3, r3, #4
 80023b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d015      	beq.n	80023ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c2:	f7fe f9fd 	bl	80007c0 <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c8:	e00a      	b.n	80023e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ca:	f7fe f9f9 	bl	80007c0 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d8:	4293      	cmp	r3, r2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e0ab      	b.n	8002538 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e0:	4b57      	ldr	r3, [pc, #348]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0ee      	beq.n	80023ca <HAL_RCC_OscConfig+0x37e>
 80023ec:	e014      	b.n	8002418 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ee:	f7fe f9e7 	bl	80007c0 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f4:	e00a      	b.n	800240c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f6:	f7fe f9e3 	bl	80007c0 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	f241 3288 	movw	r2, #5000	; 0x1388
 8002404:	4293      	cmp	r3, r2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e095      	b.n	8002538 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800240c:	4b4c      	ldr	r3, [pc, #304]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1ee      	bne.n	80023f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002418:	7dfb      	ldrb	r3, [r7, #23]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d105      	bne.n	800242a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800241e:	4b48      	ldr	r3, [pc, #288]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	4a47      	ldr	r2, [pc, #284]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 8002424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002428:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 8081 	beq.w	8002536 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002434:	4b42      	ldr	r3, [pc, #264]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 030c 	and.w	r3, r3, #12
 800243c:	2b08      	cmp	r3, #8
 800243e:	d061      	beq.n	8002504 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	2b02      	cmp	r3, #2
 8002446:	d146      	bne.n	80024d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002448:	4b3f      	ldr	r3, [pc, #252]	; (8002548 <HAL_RCC_OscConfig+0x4fc>)
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244e:	f7fe f9b7 	bl	80007c0 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002456:	f7fe f9b3 	bl	80007c0 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e067      	b.n	8002538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002468:	4b35      	ldr	r3, [pc, #212]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1f0      	bne.n	8002456 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800247c:	d108      	bne.n	8002490 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800247e:	4b30      	ldr	r3, [pc, #192]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	492d      	ldr	r1, [pc, #180]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 800248c:	4313      	orrs	r3, r2
 800248e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002490:	4b2b      	ldr	r3, [pc, #172]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a19      	ldr	r1, [r3, #32]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a0:	430b      	orrs	r3, r1
 80024a2:	4927      	ldr	r1, [pc, #156]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024a8:	4b27      	ldr	r3, [pc, #156]	; (8002548 <HAL_RCC_OscConfig+0x4fc>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ae:	f7fe f987 	bl	80007c0 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b6:	f7fe f983 	bl	80007c0 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e037      	b.n	8002538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024c8:	4b1d      	ldr	r3, [pc, #116]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x46a>
 80024d4:	e02f      	b.n	8002536 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d6:	4b1c      	ldr	r3, [pc, #112]	; (8002548 <HAL_RCC_OscConfig+0x4fc>)
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024dc:	f7fe f970 	bl	80007c0 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e4:	f7fe f96c 	bl	80007c0 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e020      	b.n	8002538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f6:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x498>
 8002502:	e018      	b.n	8002536 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e013      	b.n	8002538 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_RCC_OscConfig+0x4f4>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	429a      	cmp	r2, r3
 8002522:	d106      	bne.n	8002532 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800252e:	429a      	cmp	r2, r3
 8002530:	d001      	beq.n	8002536 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3718      	adds	r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40021000 	.word	0x40021000
 8002544:	40007000 	.word	0x40007000
 8002548:	42420060 	.word	0x42420060

0800254c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e0d0      	b.n	8002702 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002560:	4b6a      	ldr	r3, [pc, #424]	; (800270c <HAL_RCC_ClockConfig+0x1c0>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d910      	bls.n	8002590 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256e:	4b67      	ldr	r3, [pc, #412]	; (800270c <HAL_RCC_ClockConfig+0x1c0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 0207 	bic.w	r2, r3, #7
 8002576:	4965      	ldr	r1, [pc, #404]	; (800270c <HAL_RCC_ClockConfig+0x1c0>)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800257e:	4b63      	ldr	r3, [pc, #396]	; (800270c <HAL_RCC_ClockConfig+0x1c0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	429a      	cmp	r2, r3
 800258a:	d001      	beq.n	8002590 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e0b8      	b.n	8002702 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d020      	beq.n	80025de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d005      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025a8:	4b59      	ldr	r3, [pc, #356]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	4a58      	ldr	r2, [pc, #352]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80025ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0308 	and.w	r3, r3, #8
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d005      	beq.n	80025cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025c0:	4b53      	ldr	r3, [pc, #332]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	4a52      	ldr	r2, [pc, #328]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80025c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025cc:	4b50      	ldr	r3, [pc, #320]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	494d      	ldr	r1, [pc, #308]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d040      	beq.n	800266c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d107      	bne.n	8002602 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f2:	4b47      	ldr	r3, [pc, #284]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d115      	bne.n	800262a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e07f      	b.n	8002702 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d107      	bne.n	800261a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800260a:	4b41      	ldr	r3, [pc, #260]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d109      	bne.n	800262a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e073      	b.n	8002702 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261a:	4b3d      	ldr	r3, [pc, #244]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e06b      	b.n	8002702 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800262a:	4b39      	ldr	r3, [pc, #228]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f023 0203 	bic.w	r2, r3, #3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	4936      	ldr	r1, [pc, #216]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 8002638:	4313      	orrs	r3, r2
 800263a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800263c:	f7fe f8c0 	bl	80007c0 <HAL_GetTick>
 8002640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002642:	e00a      	b.n	800265a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002644:	f7fe f8bc 	bl	80007c0 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002652:	4293      	cmp	r3, r2
 8002654:	d901      	bls.n	800265a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e053      	b.n	8002702 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265a:	4b2d      	ldr	r3, [pc, #180]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f003 020c 	and.w	r2, r3, #12
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	429a      	cmp	r2, r3
 800266a:	d1eb      	bne.n	8002644 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800266c:	4b27      	ldr	r3, [pc, #156]	; (800270c <HAL_RCC_ClockConfig+0x1c0>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d210      	bcs.n	800269c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267a:	4b24      	ldr	r3, [pc, #144]	; (800270c <HAL_RCC_ClockConfig+0x1c0>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f023 0207 	bic.w	r2, r3, #7
 8002682:	4922      	ldr	r1, [pc, #136]	; (800270c <HAL_RCC_ClockConfig+0x1c0>)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	4313      	orrs	r3, r2
 8002688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800268a:	4b20      	ldr	r3, [pc, #128]	; (800270c <HAL_RCC_ClockConfig+0x1c0>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	429a      	cmp	r2, r3
 8002696:	d001      	beq.n	800269c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e032      	b.n	8002702 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d008      	beq.n	80026ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026a8:	4b19      	ldr	r3, [pc, #100]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	4916      	ldr	r1, [pc, #88]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d009      	beq.n	80026da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026c6:	4b12      	ldr	r3, [pc, #72]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	490e      	ldr	r1, [pc, #56]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026da:	f000 f821 	bl	8002720 <HAL_RCC_GetSysClockFreq>
 80026de:	4601      	mov	r1, r0
 80026e0:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	091b      	lsrs	r3, r3, #4
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	4a0a      	ldr	r2, [pc, #40]	; (8002714 <HAL_RCC_ClockConfig+0x1c8>)
 80026ec:	5cd3      	ldrb	r3, [r2, r3]
 80026ee:	fa21 f303 	lsr.w	r3, r1, r3
 80026f2:	4a09      	ldr	r2, [pc, #36]	; (8002718 <HAL_RCC_ClockConfig+0x1cc>)
 80026f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026f6:	4b09      	ldr	r3, [pc, #36]	; (800271c <HAL_RCC_ClockConfig+0x1d0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fe f81e 	bl	800073c <HAL_InitTick>

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40022000 	.word	0x40022000
 8002710:	40021000 	.word	0x40021000
 8002714:	0800656c 	.word	0x0800656c
 8002718:	20000000 	.word	0x20000000
 800271c:	20000004 	.word	0x20000004

08002720 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002720:	b490      	push	{r4, r7}
 8002722:	b08a      	sub	sp, #40	; 0x28
 8002724:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002726:	4b2a      	ldr	r3, [pc, #168]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002728:	1d3c      	adds	r4, r7, #4
 800272a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800272c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002730:	4b28      	ldr	r3, [pc, #160]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
 800273a:	2300      	movs	r3, #0
 800273c:	61bb      	str	r3, [r7, #24]
 800273e:	2300      	movs	r3, #0
 8002740:	627b      	str	r3, [r7, #36]	; 0x24
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002746:	2300      	movs	r3, #0
 8002748:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800274a:	4b23      	ldr	r3, [pc, #140]	; (80027d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f003 030c 	and.w	r3, r3, #12
 8002756:	2b04      	cmp	r3, #4
 8002758:	d002      	beq.n	8002760 <HAL_RCC_GetSysClockFreq+0x40>
 800275a:	2b08      	cmp	r3, #8
 800275c:	d003      	beq.n	8002766 <HAL_RCC_GetSysClockFreq+0x46>
 800275e:	e02d      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002760:	4b1e      	ldr	r3, [pc, #120]	; (80027dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002762:	623b      	str	r3, [r7, #32]
      break;
 8002764:	e02d      	b.n	80027c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	0c9b      	lsrs	r3, r3, #18
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002772:	4413      	add	r3, r2
 8002774:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002778:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d013      	beq.n	80027ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002784:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	0c5b      	lsrs	r3, r3, #17
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002792:	4413      	add	r3, r2
 8002794:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002798:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	4a0f      	ldr	r2, [pc, #60]	; (80027dc <HAL_RCC_GetSysClockFreq+0xbc>)
 800279e:	fb02 f203 	mul.w	r2, r2, r3
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
 80027aa:	e004      	b.n	80027b6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	4a0c      	ldr	r2, [pc, #48]	; (80027e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027b0:	fb02 f303 	mul.w	r3, r2, r3
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	623b      	str	r3, [r7, #32]
      break;
 80027ba:	e002      	b.n	80027c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027bc:	4b07      	ldr	r3, [pc, #28]	; (80027dc <HAL_RCC_GetSysClockFreq+0xbc>)
 80027be:	623b      	str	r3, [r7, #32]
      break;
 80027c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027c2:	6a3b      	ldr	r3, [r7, #32]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3728      	adds	r7, #40	; 0x28
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc90      	pop	{r4, r7}
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	08006510 	.word	0x08006510
 80027d4:	08006520 	.word	0x08006520
 80027d8:	40021000 	.word	0x40021000
 80027dc:	007a1200 	.word	0x007a1200
 80027e0:	003d0900 	.word	0x003d0900

080027e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027e8:	4b02      	ldr	r3, [pc, #8]	; (80027f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80027ea:	681b      	ldr	r3, [r3, #0]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr
 80027f4:	20000000 	.word	0x20000000

080027f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027fc:	f7ff fff2 	bl	80027e4 <HAL_RCC_GetHCLKFreq>
 8002800:	4601      	mov	r1, r0
 8002802:	4b05      	ldr	r3, [pc, #20]	; (8002818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	0a1b      	lsrs	r3, r3, #8
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	4a03      	ldr	r2, [pc, #12]	; (800281c <HAL_RCC_GetPCLK1Freq+0x24>)
 800280e:	5cd3      	ldrb	r3, [r2, r3]
 8002810:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002814:	4618      	mov	r0, r3
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40021000 	.word	0x40021000
 800281c:	0800657c 	.word	0x0800657c

08002820 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002828:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <RCC_Delay+0x34>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <RCC_Delay+0x38>)
 800282e:	fba2 2303 	umull	r2, r3, r2, r3
 8002832:	0a5b      	lsrs	r3, r3, #9
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	fb02 f303 	mul.w	r3, r2, r3
 800283a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800283c:	bf00      	nop
  }
  while (Delay --);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	1e5a      	subs	r2, r3, #1
 8002842:	60fa      	str	r2, [r7, #12]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1f9      	bne.n	800283c <RCC_Delay+0x1c>
}
 8002848:	bf00      	nop
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	20000000 	.word	0x20000000
 8002858:	10624dd3 	.word	0x10624dd3

0800285c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	2300      	movs	r3, #0
 800286a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b00      	cmp	r3, #0
 8002876:	d07d      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002878:	2300      	movs	r3, #0
 800287a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800287c:	4b4f      	ldr	r3, [pc, #316]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800287e:	69db      	ldr	r3, [r3, #28]
 8002880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10d      	bne.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002888:	4b4c      	ldr	r3, [pc, #304]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	4a4b      	ldr	r2, [pc, #300]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800288e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002892:	61d3      	str	r3, [r2, #28]
 8002894:	4b49      	ldr	r3, [pc, #292]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028a0:	2301      	movs	r3, #1
 80028a2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a4:	4b46      	ldr	r3, [pc, #280]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d118      	bne.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028b0:	4b43      	ldr	r3, [pc, #268]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a42      	ldr	r2, [pc, #264]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028bc:	f7fd ff80 	bl	80007c0 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c2:	e008      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c4:	f7fd ff7c 	bl	80007c0 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b64      	cmp	r3, #100	; 0x64
 80028d0:	d901      	bls.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e06d      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d6:	4b3a      	ldr	r3, [pc, #232]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0f0      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028e2:	4b36      	ldr	r3, [pc, #216]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d02e      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d027      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002900:	4b2e      	ldr	r3, [pc, #184]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002908:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800290a:	4b2e      	ldr	r3, [pc, #184]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800290c:	2201      	movs	r2, #1
 800290e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002910:	4b2c      	ldr	r3, [pc, #176]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002916:	4a29      	ldr	r2, [pc, #164]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d014      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002926:	f7fd ff4b 	bl	80007c0 <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292c:	e00a      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292e:	f7fd ff47 	bl	80007c0 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	f241 3288 	movw	r2, #5000	; 0x1388
 800293c:	4293      	cmp	r3, r2
 800293e:	d901      	bls.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e036      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002944:	4b1d      	ldr	r3, [pc, #116]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0ee      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002950:	4b1a      	ldr	r3, [pc, #104]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	4917      	ldr	r1, [pc, #92]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800295e:	4313      	orrs	r3, r2
 8002960:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002962:	7dfb      	ldrb	r3, [r7, #23]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d105      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002968:	4b14      	ldr	r3, [pc, #80]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	4a13      	ldr	r2, [pc, #76]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002972:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d008      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002980:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	490b      	ldr	r1, [pc, #44]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800298e:	4313      	orrs	r3, r2
 8002990:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	2b00      	cmp	r3, #0
 800299c:	d008      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800299e:	4b07      	ldr	r3, [pc, #28]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	4904      	ldr	r1, [pc, #16]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40007000 	.word	0x40007000
 80029c4:	42420440 	.word	0x42420440

080029c8 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80029c8:	b084      	sub	sp, #16
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	f107 0014 	add.w	r0, r7, #20
 80029d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	b004      	add	sp, #16
 80029e6:	4770      	bx	lr

080029e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80029f0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80029f4:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	89fb      	ldrh	r3, [r7, #14]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr

08002a16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b085      	sub	sp, #20
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002a1e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002a22:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	b21a      	sxth	r2, r3
 8002a2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a32:	43db      	mvns	r3, r3
 8002a34:	b21b      	sxth	r3, r3
 8002a36:	4013      	ands	r3, r2
 8002a38:	b21b      	sxth	r3, r3
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr

08002a4e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	460b      	mov	r3, r1
 8002a58:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bc80      	pop	{r7}
 8002a64:	4770      	bx	lr

08002a66 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002a66:	b084      	sub	sp, #16
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	f107 0014 	add.w	r0, r7, #20
 8002a74:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7ff ffa5 	bl	80029e8 <USB_EnableGlobalInt>

  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002aaa:	b004      	add	sp, #16
 8002aac:	4770      	bx	lr
	...

08002ab0 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002ab0:	b490      	push	{r4, r7}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002aba:	2300      	movs	r3, #0
 8002abc:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	881b      	ldrh	r3, [r3, #0]
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad4:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	78db      	ldrb	r3, [r3, #3]
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	d819      	bhi.n	8002b12 <USB_ActivateEndpoint+0x62>
 8002ade:	a201      	add	r2, pc, #4	; (adr r2, 8002ae4 <USB_ActivateEndpoint+0x34>)
 8002ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae4:	08002af5 	.word	0x08002af5
 8002ae8:	08002b09 	.word	0x08002b09
 8002aec:	08002b19 	.word	0x08002b19
 8002af0:	08002aff 	.word	0x08002aff
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002af4:	89bb      	ldrh	r3, [r7, #12]
 8002af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002afa:	81bb      	strh	r3, [r7, #12]
      break;
 8002afc:	e00d      	b.n	8002b1a <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002afe:	89bb      	ldrh	r3, [r7, #12]
 8002b00:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002b04:	81bb      	strh	r3, [r7, #12]
      break;
 8002b06:	e008      	b.n	8002b1a <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002b08:	89bb      	ldrh	r3, [r7, #12]
 8002b0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b0e:	81bb      	strh	r3, [r7, #12]
      break;
 8002b10:	e003      	b.n	8002b1a <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	73fb      	strb	r3, [r7, #15]
      break;
 8002b16:	e000      	b.n	8002b1a <USB_ActivateEndpoint+0x6a>
      break;
 8002b18:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	441a      	add	r2, r3
 8002b24:	89bb      	ldrh	r3, [r7, #12]
 8002b26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	881b      	ldrh	r3, [r3, #0]
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	b29c      	uxth	r4, r3
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	441a      	add	r2, r3
 8002b66:	4b8a      	ldr	r3, [pc, #552]	; (8002d90 <USB_ActivateEndpoint+0x2e0>)
 8002b68:	4323      	orrs	r3, r4
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	7b1b      	ldrb	r3, [r3, #12]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f040 8112 	bne.w	8002d9c <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	785b      	ldrb	r3, [r3, #1]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d067      	beq.n	8002c50 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002b80:	687c      	ldr	r4, [r7, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	441c      	add	r4, r3
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	4423      	add	r3, r4
 8002b94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b98:	461c      	mov	r4, r3
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	88db      	ldrh	r3, [r3, #6]
 8002b9e:	085b      	lsrs	r3, r3, #1
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	b29c      	uxth	r4, r3
 8002bb6:	4623      	mov	r3, r4
 8002bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d014      	beq.n	8002bea <USB_ActivateEndpoint+0x13a>
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	881b      	ldrh	r3, [r3, #0]
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd6:	b29c      	uxth	r4, r3
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	441a      	add	r2, r3
 8002be2:	4b6c      	ldr	r3, [pc, #432]	; (8002d94 <USB_ActivateEndpoint+0x2e4>)
 8002be4:	4323      	orrs	r3, r4
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	78db      	ldrb	r3, [r3, #3]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d018      	beq.n	8002c24 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	881b      	ldrh	r3, [r3, #0]
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c08:	b29c      	uxth	r4, r3
 8002c0a:	f084 0320 	eor.w	r3, r4, #32
 8002c0e:	b29c      	uxth	r4, r3
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	441a      	add	r2, r3
 8002c1a:	4b5d      	ldr	r3, [pc, #372]	; (8002d90 <USB_ActivateEndpoint+0x2e0>)
 8002c1c:	4323      	orrs	r3, r4
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	8013      	strh	r3, [r2, #0]
 8002c22:	e22b      	b.n	800307c <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c3a:	b29c      	uxth	r4, r3
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	441a      	add	r2, r3
 8002c46:	4b52      	ldr	r3, [pc, #328]	; (8002d90 <USB_ActivateEndpoint+0x2e0>)
 8002c48:	4323      	orrs	r3, r4
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	8013      	strh	r3, [r2, #0]
 8002c4e:	e215      	b.n	800307c <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002c50:	687c      	ldr	r4, [r7, #4]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	441c      	add	r4, r3
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	4423      	add	r3, r4
 8002c64:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002c68:	461c      	mov	r4, r3
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	88db      	ldrh	r3, [r3, #6]
 8002c6e:	085b      	lsrs	r3, r3, #1
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002c78:	687c      	ldr	r4, [r7, #4]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	441c      	add	r4, r3
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	4423      	add	r3, r4
 8002c8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c90:	461c      	mov	r4, r3
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10e      	bne.n	8002cb8 <USB_ActivateEndpoint+0x208>
 8002c9a:	8823      	ldrh	r3, [r4, #0]
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	8023      	strh	r3, [r4, #0]
 8002ca6:	8823      	ldrh	r3, [r4, #0]
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	8023      	strh	r3, [r4, #0]
 8002cb6:	e02d      	b.n	8002d14 <USB_ActivateEndpoint+0x264>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	2b3e      	cmp	r3, #62	; 0x3e
 8002cbe:	d812      	bhi.n	8002ce6 <USB_ActivateEndpoint+0x236>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	085b      	lsrs	r3, r3, #1
 8002cc6:	60bb      	str	r3, [r7, #8]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d002      	beq.n	8002cda <USB_ActivateEndpoint+0x22a>
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	60bb      	str	r3, [r7, #8]
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	029b      	lsls	r3, r3, #10
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	8023      	strh	r3, [r4, #0]
 8002ce4:	e016      	b.n	8002d14 <USB_ActivateEndpoint+0x264>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	095b      	lsrs	r3, r3, #5
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	f003 031f 	and.w	r3, r3, #31
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d102      	bne.n	8002d00 <USB_ActivateEndpoint+0x250>
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	60bb      	str	r3, [r7, #8]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	029b      	lsls	r3, r3, #10
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	881b      	ldrh	r3, [r3, #0]
 8002d20:	b29c      	uxth	r4, r3
 8002d22:	4623      	mov	r3, r4
 8002d24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d014      	beq.n	8002d56 <USB_ActivateEndpoint+0x2a6>
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	881b      	ldrh	r3, [r3, #0]
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d42:	b29c      	uxth	r4, r3
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	441a      	add	r2, r3
 8002d4e:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <USB_ActivateEndpoint+0x2e8>)
 8002d50:	4323      	orrs	r3, r4
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d6c:	b29c      	uxth	r4, r3
 8002d6e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002d72:	b29c      	uxth	r4, r3
 8002d74:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002d78:	b29c      	uxth	r4, r3
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	441a      	add	r2, r3
 8002d84:	4b02      	ldr	r3, [pc, #8]	; (8002d90 <USB_ActivateEndpoint+0x2e0>)
 8002d86:	4323      	orrs	r3, r4
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	8013      	strh	r3, [r2, #0]
 8002d8c:	e176      	b.n	800307c <USB_ActivateEndpoint+0x5cc>
 8002d8e:	bf00      	nop
 8002d90:	ffff8080 	.word	0xffff8080
 8002d94:	ffff80c0 	.word	0xffff80c0
 8002d98:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db2:	b29c      	uxth	r4, r3
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	441a      	add	r2, r3
 8002dbe:	4b96      	ldr	r3, [pc, #600]	; (8003018 <USB_ActivateEndpoint+0x568>)
 8002dc0:	4323      	orrs	r3, r4
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002dc6:	687c      	ldr	r4, [r7, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	441c      	add	r4, r3
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	011b      	lsls	r3, r3, #4
 8002dd8:	4423      	add	r3, r4
 8002dda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dde:	461c      	mov	r4, r3
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	891b      	ldrh	r3, [r3, #8]
 8002de4:	085b      	lsrs	r3, r3, #1
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	8023      	strh	r3, [r4, #0]
 8002dee:	687c      	ldr	r4, [r7, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	441c      	add	r4, r3
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	4423      	add	r3, r4
 8002e02:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002e06:	461c      	mov	r4, r3
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	895b      	ldrh	r3, [r3, #10]
 8002e0c:	085b      	lsrs	r3, r3, #1
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	785b      	ldrb	r3, [r3, #1]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f040 8088 	bne.w	8002f30 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	b29c      	uxth	r4, r3
 8002e2e:	4623      	mov	r3, r4
 8002e30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d014      	beq.n	8002e62 <USB_ActivateEndpoint+0x3b2>
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e4e:	b29c      	uxth	r4, r3
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	441a      	add	r2, r3
 8002e5a:	4b70      	ldr	r3, [pc, #448]	; (800301c <USB_ActivateEndpoint+0x56c>)
 8002e5c:	4323      	orrs	r3, r4
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	881b      	ldrh	r3, [r3, #0]
 8002e6e:	b29c      	uxth	r4, r3
 8002e70:	4623      	mov	r3, r4
 8002e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d014      	beq.n	8002ea4 <USB_ActivateEndpoint+0x3f4>
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e90:	b29c      	uxth	r4, r3
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	441a      	add	r2, r3
 8002e9c:	4b60      	ldr	r3, [pc, #384]	; (8003020 <USB_ActivateEndpoint+0x570>)
 8002e9e:	4323      	orrs	r3, r4
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eba:	b29c      	uxth	r4, r3
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	441a      	add	r2, r3
 8002ec6:	4b56      	ldr	r3, [pc, #344]	; (8003020 <USB_ActivateEndpoint+0x570>)
 8002ec8:	4323      	orrs	r3, r4
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee4:	b29c      	uxth	r4, r3
 8002ee6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002eea:	b29c      	uxth	r4, r3
 8002eec:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002ef0:	b29c      	uxth	r4, r3
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	441a      	add	r2, r3
 8002efc:	4b49      	ldr	r3, [pc, #292]	; (8003024 <USB_ActivateEndpoint+0x574>)
 8002efe:	4323      	orrs	r3, r4
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f1a:	b29c      	uxth	r4, r3
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	441a      	add	r2, r3
 8002f26:	4b3f      	ldr	r3, [pc, #252]	; (8003024 <USB_ActivateEndpoint+0x574>)
 8002f28:	4323      	orrs	r3, r4
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	8013      	strh	r3, [r2, #0]
 8002f2e:	e0a5      	b.n	800307c <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	b29c      	uxth	r4, r3
 8002f3e:	4623      	mov	r3, r4
 8002f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d014      	beq.n	8002f72 <USB_ActivateEndpoint+0x4c2>
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f5e:	b29c      	uxth	r4, r3
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	441a      	add	r2, r3
 8002f6a:	4b2c      	ldr	r3, [pc, #176]	; (800301c <USB_ActivateEndpoint+0x56c>)
 8002f6c:	4323      	orrs	r3, r4
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	b29c      	uxth	r4, r3
 8002f80:	4623      	mov	r3, r4
 8002f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d014      	beq.n	8002fb4 <USB_ActivateEndpoint+0x504>
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa0:	b29c      	uxth	r4, r3
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	441a      	add	r2, r3
 8002fac:	4b1c      	ldr	r3, [pc, #112]	; (8003020 <USB_ActivateEndpoint+0x570>)
 8002fae:	4323      	orrs	r3, r4
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	881b      	ldrh	r3, [r3, #0]
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fca:	b29c      	uxth	r4, r3
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	441a      	add	r2, r3
 8002fd6:	4b11      	ldr	r3, [pc, #68]	; (800301c <USB_ActivateEndpoint+0x56c>)
 8002fd8:	4323      	orrs	r3, r4
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	78db      	ldrb	r3, [r3, #3]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d020      	beq.n	8003028 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ffc:	b29c      	uxth	r4, r3
 8002ffe:	f084 0320 	eor.w	r3, r4, #32
 8003002:	b29c      	uxth	r4, r3
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	441a      	add	r2, r3
 800300e:	4b05      	ldr	r3, [pc, #20]	; (8003024 <USB_ActivateEndpoint+0x574>)
 8003010:	4323      	orrs	r3, r4
 8003012:	b29b      	uxth	r3, r3
 8003014:	8013      	strh	r3, [r2, #0]
 8003016:	e01c      	b.n	8003052 <USB_ActivateEndpoint+0x5a2>
 8003018:	ffff8180 	.word	0xffff8180
 800301c:	ffffc080 	.word	0xffffc080
 8003020:	ffff80c0 	.word	0xffff80c0
 8003024:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	b29b      	uxth	r3, r3
 8003036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800303a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800303e:	b29c      	uxth	r4, r3
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	441a      	add	r2, r3
 800304a:	4b0f      	ldr	r3, [pc, #60]	; (8003088 <USB_ActivateEndpoint+0x5d8>)
 800304c:	4323      	orrs	r3, r4
 800304e:	b29b      	uxth	r3, r3
 8003050:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	881b      	ldrh	r3, [r3, #0]
 800305e:	b29b      	uxth	r3, r3
 8003060:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003068:	b29c      	uxth	r4, r3
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	441a      	add	r2, r3
 8003074:	4b04      	ldr	r3, [pc, #16]	; (8003088 <USB_ActivateEndpoint+0x5d8>)
 8003076:	4323      	orrs	r3, r4
 8003078:	b29b      	uxth	r3, r3
 800307a:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800307c:	7bfb      	ldrb	r3, [r7, #15]
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bc90      	pop	{r4, r7}
 8003086:	4770      	bx	lr
 8003088:	ffff8080 	.word	0xffff8080

0800308c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800308c:	b490      	push	{r4, r7}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	7b1b      	ldrb	r3, [r3, #12]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d171      	bne.n	8003182 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	785b      	ldrb	r3, [r3, #1]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d036      	beq.n	8003114 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	b29c      	uxth	r4, r3
 80030b4:	4623      	mov	r3, r4
 80030b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d014      	beq.n	80030e8 <USB_DeactivateEndpoint+0x5c>
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	881b      	ldrh	r3, [r3, #0]
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d4:	b29c      	uxth	r4, r3
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	441a      	add	r2, r3
 80030e0:	4b6b      	ldr	r3, [pc, #428]	; (8003290 <USB_DeactivateEndpoint+0x204>)
 80030e2:	4323      	orrs	r3, r4
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030fe:	b29c      	uxth	r4, r3
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	441a      	add	r2, r3
 800310a:	4b62      	ldr	r3, [pc, #392]	; (8003294 <USB_DeactivateEndpoint+0x208>)
 800310c:	4323      	orrs	r3, r4
 800310e:	b29b      	uxth	r3, r3
 8003110:	8013      	strh	r3, [r2, #0]
 8003112:	e144      	b.n	800339e <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	881b      	ldrh	r3, [r3, #0]
 8003120:	b29c      	uxth	r4, r3
 8003122:	4623      	mov	r3, r4
 8003124:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d014      	beq.n	8003156 <USB_DeactivateEndpoint+0xca>
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	b29b      	uxth	r3, r3
 800313a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800313e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003142:	b29c      	uxth	r4, r3
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	441a      	add	r2, r3
 800314e:	4b52      	ldr	r3, [pc, #328]	; (8003298 <USB_DeactivateEndpoint+0x20c>)
 8003150:	4323      	orrs	r3, r4
 8003152:	b29b      	uxth	r3, r3
 8003154:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	b29b      	uxth	r3, r3
 8003164:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800316c:	b29c      	uxth	r4, r3
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	441a      	add	r2, r3
 8003178:	4b46      	ldr	r3, [pc, #280]	; (8003294 <USB_DeactivateEndpoint+0x208>)
 800317a:	4323      	orrs	r3, r4
 800317c:	b29b      	uxth	r3, r3
 800317e:	8013      	strh	r3, [r2, #0]
 8003180:	e10d      	b.n	800339e <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	785b      	ldrb	r3, [r3, #1]
 8003186:	2b00      	cmp	r3, #0
 8003188:	f040 8088 	bne.w	800329c <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	881b      	ldrh	r3, [r3, #0]
 8003198:	b29c      	uxth	r4, r3
 800319a:	4623      	mov	r3, r4
 800319c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d014      	beq.n	80031ce <USB_DeactivateEndpoint+0x142>
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	881b      	ldrh	r3, [r3, #0]
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ba:	b29c      	uxth	r4, r3
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	441a      	add	r2, r3
 80031c6:	4b34      	ldr	r3, [pc, #208]	; (8003298 <USB_DeactivateEndpoint+0x20c>)
 80031c8:	4323      	orrs	r3, r4
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	881b      	ldrh	r3, [r3, #0]
 80031da:	b29c      	uxth	r4, r3
 80031dc:	4623      	mov	r3, r4
 80031de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d014      	beq.n	8003210 <USB_DeactivateEndpoint+0x184>
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031fc:	b29c      	uxth	r4, r3
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	441a      	add	r2, r3
 8003208:	4b21      	ldr	r3, [pc, #132]	; (8003290 <USB_DeactivateEndpoint+0x204>)
 800320a:	4323      	orrs	r3, r4
 800320c:	b29b      	uxth	r3, r3
 800320e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	b29b      	uxth	r3, r3
 800321e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003226:	b29c      	uxth	r4, r3
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	441a      	add	r2, r3
 8003232:	4b17      	ldr	r3, [pc, #92]	; (8003290 <USB_DeactivateEndpoint+0x204>)
 8003234:	4323      	orrs	r3, r4
 8003236:	b29b      	uxth	r3, r3
 8003238:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	b29b      	uxth	r3, r3
 8003248:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800324c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003250:	b29c      	uxth	r4, r3
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	441a      	add	r2, r3
 800325c:	4b0d      	ldr	r3, [pc, #52]	; (8003294 <USB_DeactivateEndpoint+0x208>)
 800325e:	4323      	orrs	r3, r4
 8003260:	b29b      	uxth	r3, r3
 8003262:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	881b      	ldrh	r3, [r3, #0]
 8003270:	b29b      	uxth	r3, r3
 8003272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003276:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800327a:	b29c      	uxth	r4, r3
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	441a      	add	r2, r3
 8003286:	4b03      	ldr	r3, [pc, #12]	; (8003294 <USB_DeactivateEndpoint+0x208>)
 8003288:	4323      	orrs	r3, r4
 800328a:	b29b      	uxth	r3, r3
 800328c:	8013      	strh	r3, [r2, #0]
 800328e:	e086      	b.n	800339e <USB_DeactivateEndpoint+0x312>
 8003290:	ffff80c0 	.word	0xffff80c0
 8003294:	ffff8080 	.word	0xffff8080
 8003298:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	881b      	ldrh	r3, [r3, #0]
 80032a8:	b29c      	uxth	r4, r3
 80032aa:	4623      	mov	r3, r4
 80032ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d014      	beq.n	80032de <USB_DeactivateEndpoint+0x252>
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ca:	b29c      	uxth	r4, r3
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	441a      	add	r2, r3
 80032d6:	4b35      	ldr	r3, [pc, #212]	; (80033ac <USB_DeactivateEndpoint+0x320>)
 80032d8:	4323      	orrs	r3, r4
 80032da:	b29b      	uxth	r3, r3
 80032dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	b29c      	uxth	r4, r3
 80032ec:	4623      	mov	r3, r4
 80032ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d014      	beq.n	8003320 <USB_DeactivateEndpoint+0x294>
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	b29b      	uxth	r3, r3
 8003304:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800330c:	b29c      	uxth	r4, r3
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	441a      	add	r2, r3
 8003318:	4b25      	ldr	r3, [pc, #148]	; (80033b0 <USB_DeactivateEndpoint+0x324>)
 800331a:	4323      	orrs	r3, r4
 800331c:	b29b      	uxth	r3, r3
 800331e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	881b      	ldrh	r3, [r3, #0]
 800332c:	b29b      	uxth	r3, r3
 800332e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003336:	b29c      	uxth	r4, r3
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	441a      	add	r2, r3
 8003342:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <USB_DeactivateEndpoint+0x320>)
 8003344:	4323      	orrs	r3, r4
 8003346:	b29b      	uxth	r3, r3
 8003348:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	b29b      	uxth	r3, r3
 8003358:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800335c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003360:	b29c      	uxth	r4, r3
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	441a      	add	r2, r3
 800336c:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <USB_DeactivateEndpoint+0x328>)
 800336e:	4323      	orrs	r3, r4
 8003370:	b29b      	uxth	r3, r3
 8003372:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	b29b      	uxth	r3, r3
 8003382:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338a:	b29c      	uxth	r4, r3
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	441a      	add	r2, r3
 8003396:	4b07      	ldr	r3, [pc, #28]	; (80033b4 <USB_DeactivateEndpoint+0x328>)
 8003398:	4323      	orrs	r3, r4
 800339a:	b29b      	uxth	r3, r3
 800339c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc90      	pop	{r4, r7}
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	ffffc080 	.word	0xffffc080
 80033b0:	ffff80c0 	.word	0xffff80c0
 80033b4:	ffff8080 	.word	0xffff8080

080033b8 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80033b8:	b590      	push	{r4, r7, lr}
 80033ba:	b08d      	sub	sp, #52	; 0x34
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	785b      	ldrb	r3, [r3, #1]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	f040 8160 	bne.w	800368c <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	699a      	ldr	r2, [r3, #24]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d909      	bls.n	80033ec <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	699a      	ldr	r2, [r3, #24]
 80033e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e4:	1ad2      	subs	r2, r2, r3
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	619a      	str	r2, [r3, #24]
 80033ea:	e005      	b.n	80033f8 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2200      	movs	r2, #0
 80033f6:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	7b1b      	ldrb	r3, [r3, #12]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d119      	bne.n	8003434 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	6959      	ldr	r1, [r3, #20]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	88da      	ldrh	r2, [r3, #6]
 8003408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340a:	b29b      	uxth	r3, r3
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 fba2 	bl	8003b56 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003412:	687c      	ldr	r4, [r7, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800341a:	b29b      	uxth	r3, r3
 800341c:	441c      	add	r4, r3
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	4423      	add	r3, r4
 8003426:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800342a:	461c      	mov	r4, r3
 800342c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342e:	b29b      	uxth	r3, r3
 8003430:	8023      	strh	r3, [r4, #0]
 8003432:	e10f      	b.n	8003654 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	b29b      	uxth	r3, r3
 8003442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003446:	2b00      	cmp	r3, #0
 8003448:	d065      	beq.n	8003516 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800344a:	687c      	ldr	r4, [r7, #4]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	785b      	ldrb	r3, [r3, #1]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d148      	bne.n	80034e6 <USB_EPStartXfer+0x12e>
 8003454:	687c      	ldr	r4, [r7, #4]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800345c:	b29b      	uxth	r3, r3
 800345e:	441c      	add	r4, r3
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	4423      	add	r3, r4
 8003468:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800346c:	461c      	mov	r4, r3
 800346e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10e      	bne.n	8003492 <USB_EPStartXfer+0xda>
 8003474:	8823      	ldrh	r3, [r4, #0]
 8003476:	b29b      	uxth	r3, r3
 8003478:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800347c:	b29b      	uxth	r3, r3
 800347e:	8023      	strh	r3, [r4, #0]
 8003480:	8823      	ldrh	r3, [r4, #0]
 8003482:	b29b      	uxth	r3, r3
 8003484:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003488:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800348c:	b29b      	uxth	r3, r3
 800348e:	8023      	strh	r3, [r4, #0]
 8003490:	e03d      	b.n	800350e <USB_EPStartXfer+0x156>
 8003492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003494:	2b3e      	cmp	r3, #62	; 0x3e
 8003496:	d810      	bhi.n	80034ba <USB_EPStartXfer+0x102>
 8003498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349a:	085b      	lsrs	r3, r3, #1
 800349c:	627b      	str	r3, [r7, #36]	; 0x24
 800349e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d002      	beq.n	80034ae <USB_EPStartXfer+0xf6>
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	3301      	adds	r3, #1
 80034ac:	627b      	str	r3, [r7, #36]	; 0x24
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	029b      	lsls	r3, r3, #10
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	8023      	strh	r3, [r4, #0]
 80034b8:	e029      	b.n	800350e <USB_EPStartXfer+0x156>
 80034ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034bc:	095b      	lsrs	r3, r3, #5
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
 80034c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c2:	f003 031f 	and.w	r3, r3, #31
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d102      	bne.n	80034d0 <USB_EPStartXfer+0x118>
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	3b01      	subs	r3, #1
 80034ce:	627b      	str	r3, [r7, #36]	; 0x24
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	029b      	lsls	r3, r3, #10
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	8023      	strh	r3, [r4, #0]
 80034e4:	e013      	b.n	800350e <USB_EPStartXfer+0x156>
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	785b      	ldrb	r3, [r3, #1]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d10f      	bne.n	800350e <USB_EPStartXfer+0x156>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	441c      	add	r4, r3
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	011b      	lsls	r3, r3, #4
 80034fe:	4423      	add	r3, r4
 8003500:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003504:	60fb      	str	r3, [r7, #12]
 8003506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003508:	b29a      	uxth	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	895b      	ldrh	r3, [r3, #10]
 8003512:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003514:	e063      	b.n	80035de <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	785b      	ldrb	r3, [r3, #1]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d148      	bne.n	80035b0 <USB_EPStartXfer+0x1f8>
 800351e:	687c      	ldr	r4, [r7, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003526:	b29b      	uxth	r3, r3
 8003528:	441c      	add	r4, r3
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	4423      	add	r3, r4
 8003532:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003536:	461c      	mov	r4, r3
 8003538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10e      	bne.n	800355c <USB_EPStartXfer+0x1a4>
 800353e:	8823      	ldrh	r3, [r4, #0]
 8003540:	b29b      	uxth	r3, r3
 8003542:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003546:	b29b      	uxth	r3, r3
 8003548:	8023      	strh	r3, [r4, #0]
 800354a:	8823      	ldrh	r3, [r4, #0]
 800354c:	b29b      	uxth	r3, r3
 800354e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003556:	b29b      	uxth	r3, r3
 8003558:	8023      	strh	r3, [r4, #0]
 800355a:	e03d      	b.n	80035d8 <USB_EPStartXfer+0x220>
 800355c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355e:	2b3e      	cmp	r3, #62	; 0x3e
 8003560:	d810      	bhi.n	8003584 <USB_EPStartXfer+0x1cc>
 8003562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003564:	085b      	lsrs	r3, r3, #1
 8003566:	623b      	str	r3, [r7, #32]
 8003568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d002      	beq.n	8003578 <USB_EPStartXfer+0x1c0>
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	3301      	adds	r3, #1
 8003576:	623b      	str	r3, [r7, #32]
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	b29b      	uxth	r3, r3
 800357c:	029b      	lsls	r3, r3, #10
 800357e:	b29b      	uxth	r3, r3
 8003580:	8023      	strh	r3, [r4, #0]
 8003582:	e029      	b.n	80035d8 <USB_EPStartXfer+0x220>
 8003584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003586:	095b      	lsrs	r3, r3, #5
 8003588:	623b      	str	r3, [r7, #32]
 800358a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358c:	f003 031f 	and.w	r3, r3, #31
 8003590:	2b00      	cmp	r3, #0
 8003592:	d102      	bne.n	800359a <USB_EPStartXfer+0x1e2>
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	3b01      	subs	r3, #1
 8003598:	623b      	str	r3, [r7, #32]
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	b29b      	uxth	r3, r3
 800359e:	029b      	lsls	r3, r3, #10
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	8023      	strh	r3, [r4, #0]
 80035ae:	e013      	b.n	80035d8 <USB_EPStartXfer+0x220>
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	785b      	ldrb	r3, [r3, #1]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d10f      	bne.n	80035d8 <USB_EPStartXfer+0x220>
 80035b8:	687c      	ldr	r4, [r7, #4]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	441c      	add	r4, r3
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	4423      	add	r3, r4
 80035cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80035d0:	461c      	mov	r4, r3
 80035d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	891b      	ldrh	r3, [r3, #8]
 80035dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	6959      	ldr	r1, [r3, #20]
 80035e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 fab4 	bl	8003b56 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	785b      	ldrb	r3, [r3, #1]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d115      	bne.n	8003622 <USB_EPStartXfer+0x26a>
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	b29b      	uxth	r3, r3
 8003604:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360c:	b29c      	uxth	r4, r3
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	441a      	add	r2, r3
 8003618:	4b9a      	ldr	r3, [pc, #616]	; (8003884 <USB_EPStartXfer+0x4cc>)
 800361a:	4323      	orrs	r3, r4
 800361c:	b29b      	uxth	r3, r3
 800361e:	8013      	strh	r3, [r2, #0]
 8003620:	e018      	b.n	8003654 <USB_EPStartXfer+0x29c>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	785b      	ldrb	r3, [r3, #1]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d114      	bne.n	8003654 <USB_EPStartXfer+0x29c>
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	b29b      	uxth	r3, r3
 8003638:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800363c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003640:	b29c      	uxth	r4, r3
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	441a      	add	r2, r3
 800364c:	4b8e      	ldr	r3, [pc, #568]	; (8003888 <USB_EPStartXfer+0x4d0>)
 800364e:	4323      	orrs	r3, r4
 8003650:	b29b      	uxth	r3, r3
 8003652:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	b29b      	uxth	r3, r3
 8003662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003666:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800366a:	b29c      	uxth	r4, r3
 800366c:	f084 0310 	eor.w	r3, r4, #16
 8003670:	b29c      	uxth	r4, r3
 8003672:	f084 0320 	eor.w	r3, r4, #32
 8003676:	b29c      	uxth	r4, r3
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	441a      	add	r2, r3
 8003682:	4b82      	ldr	r3, [pc, #520]	; (800388c <USB_EPStartXfer+0x4d4>)
 8003684:	4323      	orrs	r3, r4
 8003686:	b29b      	uxth	r3, r3
 8003688:	8013      	strh	r3, [r2, #0]
 800368a:	e146      	b.n	800391a <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	699a      	ldr	r2, [r3, #24]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	429a      	cmp	r2, r3
 8003696:	d909      	bls.n	80036ac <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	699a      	ldr	r2, [r3, #24]
 80036a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a4:	1ad2      	subs	r2, r2, r3
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	619a      	str	r2, [r3, #24]
 80036aa:	e005      	b.n	80036b8 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2200      	movs	r2, #0
 80036b6:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	7b1b      	ldrb	r3, [r3, #12]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d148      	bne.n	8003752 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80036c0:	687c      	ldr	r4, [r7, #4]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	441c      	add	r4, r3
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	4423      	add	r3, r4
 80036d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80036d8:	461c      	mov	r4, r3
 80036da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10e      	bne.n	80036fe <USB_EPStartXfer+0x346>
 80036e0:	8823      	ldrh	r3, [r4, #0]
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	8023      	strh	r3, [r4, #0]
 80036ec:	8823      	ldrh	r3, [r4, #0]
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	8023      	strh	r3, [r4, #0]
 80036fc:	e0f2      	b.n	80038e4 <USB_EPStartXfer+0x52c>
 80036fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003700:	2b3e      	cmp	r3, #62	; 0x3e
 8003702:	d810      	bhi.n	8003726 <USB_EPStartXfer+0x36e>
 8003704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003706:	085b      	lsrs	r3, r3, #1
 8003708:	61fb      	str	r3, [r7, #28]
 800370a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <USB_EPStartXfer+0x362>
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	3301      	adds	r3, #1
 8003718:	61fb      	str	r3, [r7, #28]
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	b29b      	uxth	r3, r3
 800371e:	029b      	lsls	r3, r3, #10
 8003720:	b29b      	uxth	r3, r3
 8003722:	8023      	strh	r3, [r4, #0]
 8003724:	e0de      	b.n	80038e4 <USB_EPStartXfer+0x52c>
 8003726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003728:	095b      	lsrs	r3, r3, #5
 800372a:	61fb      	str	r3, [r7, #28]
 800372c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372e:	f003 031f 	and.w	r3, r3, #31
 8003732:	2b00      	cmp	r3, #0
 8003734:	d102      	bne.n	800373c <USB_EPStartXfer+0x384>
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	3b01      	subs	r3, #1
 800373a:	61fb      	str	r3, [r7, #28]
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	b29b      	uxth	r3, r3
 8003740:	029b      	lsls	r3, r3, #10
 8003742:	b29b      	uxth	r3, r3
 8003744:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003748:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800374c:	b29b      	uxth	r3, r3
 800374e:	8023      	strh	r3, [r4, #0]
 8003750:	e0c8      	b.n	80038e4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	785b      	ldrb	r3, [r3, #1]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d148      	bne.n	80037ec <USB_EPStartXfer+0x434>
 800375a:	687c      	ldr	r4, [r7, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003762:	b29b      	uxth	r3, r3
 8003764:	441c      	add	r4, r3
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	4423      	add	r3, r4
 800376e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003772:	461c      	mov	r4, r3
 8003774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10e      	bne.n	8003798 <USB_EPStartXfer+0x3e0>
 800377a:	8823      	ldrh	r3, [r4, #0]
 800377c:	b29b      	uxth	r3, r3
 800377e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003782:	b29b      	uxth	r3, r3
 8003784:	8023      	strh	r3, [r4, #0]
 8003786:	8823      	ldrh	r3, [r4, #0]
 8003788:	b29b      	uxth	r3, r3
 800378a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800378e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003792:	b29b      	uxth	r3, r3
 8003794:	8023      	strh	r3, [r4, #0]
 8003796:	e03d      	b.n	8003814 <USB_EPStartXfer+0x45c>
 8003798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379a:	2b3e      	cmp	r3, #62	; 0x3e
 800379c:	d810      	bhi.n	80037c0 <USB_EPStartXfer+0x408>
 800379e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a0:	085b      	lsrs	r3, r3, #1
 80037a2:	61bb      	str	r3, [r7, #24]
 80037a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d002      	beq.n	80037b4 <USB_EPStartXfer+0x3fc>
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	3301      	adds	r3, #1
 80037b2:	61bb      	str	r3, [r7, #24]
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	029b      	lsls	r3, r3, #10
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	8023      	strh	r3, [r4, #0]
 80037be:	e029      	b.n	8003814 <USB_EPStartXfer+0x45c>
 80037c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c2:	095b      	lsrs	r3, r3, #5
 80037c4:	61bb      	str	r3, [r7, #24]
 80037c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c8:	f003 031f 	and.w	r3, r3, #31
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d102      	bne.n	80037d6 <USB_EPStartXfer+0x41e>
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	61bb      	str	r3, [r7, #24]
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	b29b      	uxth	r3, r3
 80037da:	029b      	lsls	r3, r3, #10
 80037dc:	b29b      	uxth	r3, r3
 80037de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	8023      	strh	r3, [r4, #0]
 80037ea:	e013      	b.n	8003814 <USB_EPStartXfer+0x45c>
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	785b      	ldrb	r3, [r3, #1]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d10f      	bne.n	8003814 <USB_EPStartXfer+0x45c>
 80037f4:	687c      	ldr	r4, [r7, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	441c      	add	r4, r3
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	4423      	add	r3, r4
 8003808:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800380c:	461c      	mov	r4, r3
 800380e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003810:	b29b      	uxth	r3, r3
 8003812:	8023      	strh	r3, [r4, #0]
 8003814:	687c      	ldr	r4, [r7, #4]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	785b      	ldrb	r3, [r3, #1]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d14e      	bne.n	80038bc <USB_EPStartXfer+0x504>
 800381e:	687c      	ldr	r4, [r7, #4]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003826:	b29b      	uxth	r3, r3
 8003828:	441c      	add	r4, r3
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	4423      	add	r3, r4
 8003832:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003836:	461c      	mov	r4, r3
 8003838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10e      	bne.n	800385c <USB_EPStartXfer+0x4a4>
 800383e:	8823      	ldrh	r3, [r4, #0]
 8003840:	b29b      	uxth	r3, r3
 8003842:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003846:	b29b      	uxth	r3, r3
 8003848:	8023      	strh	r3, [r4, #0]
 800384a:	8823      	ldrh	r3, [r4, #0]
 800384c:	b29b      	uxth	r3, r3
 800384e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003852:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003856:	b29b      	uxth	r3, r3
 8003858:	8023      	strh	r3, [r4, #0]
 800385a:	e043      	b.n	80038e4 <USB_EPStartXfer+0x52c>
 800385c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385e:	2b3e      	cmp	r3, #62	; 0x3e
 8003860:	d816      	bhi.n	8003890 <USB_EPStartXfer+0x4d8>
 8003862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003864:	085b      	lsrs	r3, r3, #1
 8003866:	617b      	str	r3, [r7, #20]
 8003868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d002      	beq.n	8003878 <USB_EPStartXfer+0x4c0>
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	3301      	adds	r3, #1
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	b29b      	uxth	r3, r3
 800387c:	029b      	lsls	r3, r3, #10
 800387e:	b29b      	uxth	r3, r3
 8003880:	8023      	strh	r3, [r4, #0]
 8003882:	e02f      	b.n	80038e4 <USB_EPStartXfer+0x52c>
 8003884:	ffff80c0 	.word	0xffff80c0
 8003888:	ffffc080 	.word	0xffffc080
 800388c:	ffff8080 	.word	0xffff8080
 8003890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003892:	095b      	lsrs	r3, r3, #5
 8003894:	617b      	str	r3, [r7, #20]
 8003896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003898:	f003 031f 	and.w	r3, r3, #31
 800389c:	2b00      	cmp	r3, #0
 800389e:	d102      	bne.n	80038a6 <USB_EPStartXfer+0x4ee>
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	029b      	lsls	r3, r3, #10
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	8023      	strh	r3, [r4, #0]
 80038ba:	e013      	b.n	80038e4 <USB_EPStartXfer+0x52c>
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	785b      	ldrb	r3, [r3, #1]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d10f      	bne.n	80038e4 <USB_EPStartXfer+0x52c>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	441c      	add	r4, r3
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	4423      	add	r3, r4
 80038d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80038da:	613b      	str	r3, [r7, #16]
 80038dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038de:	b29a      	uxth	r2, r3
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	881b      	ldrh	r3, [r3, #0]
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fa:	b29c      	uxth	r4, r3
 80038fc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003900:	b29c      	uxth	r4, r3
 8003902:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003906:	b29c      	uxth	r4, r3
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	441a      	add	r2, r3
 8003912:	4b04      	ldr	r3, [pc, #16]	; (8003924 <USB_EPStartXfer+0x56c>)
 8003914:	4323      	orrs	r3, r4
 8003916:	b29b      	uxth	r3, r3
 8003918:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3734      	adds	r7, #52	; 0x34
 8003920:	46bd      	mov	sp, r7
 8003922:	bd90      	pop	{r4, r7, pc}
 8003924:	ffff8080 	.word	0xffff8080

08003928 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003928:	b490      	push	{r4, r7}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	785b      	ldrb	r3, [r3, #1]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d018      	beq.n	800396c <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4413      	add	r3, r2
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	b29b      	uxth	r3, r3
 8003948:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800394c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003950:	b29c      	uxth	r4, r3
 8003952:	f084 0310 	eor.w	r3, r4, #16
 8003956:	b29c      	uxth	r4, r3
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	441a      	add	r2, r3
 8003962:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <USB_EPSetStall+0x80>)
 8003964:	4323      	orrs	r3, r4
 8003966:	b29b      	uxth	r3, r3
 8003968:	8013      	strh	r3, [r2, #0]
 800396a:	e017      	b.n	800399c <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	881b      	ldrh	r3, [r3, #0]
 8003978:	b29b      	uxth	r3, r3
 800397a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800397e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003982:	b29c      	uxth	r4, r3
 8003984:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003988:	b29c      	uxth	r4, r3
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	441a      	add	r2, r3
 8003994:	4b04      	ldr	r3, [pc, #16]	; (80039a8 <USB_EPSetStall+0x80>)
 8003996:	4323      	orrs	r3, r4
 8003998:	b29b      	uxth	r3, r3
 800399a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bc90      	pop	{r4, r7}
 80039a6:	4770      	bx	lr
 80039a8:	ffff8080 	.word	0xffff8080

080039ac <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80039ac:	b490      	push	{r4, r7}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	7b1b      	ldrb	r3, [r3, #12]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d17d      	bne.n	8003aba <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	785b      	ldrb	r3, [r3, #1]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d03d      	beq.n	8003a42 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	b29c      	uxth	r4, r3
 80039d4:	4623      	mov	r3, r4
 80039d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d014      	beq.n	8003a08 <USB_EPClearStall+0x5c>
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f4:	b29c      	uxth	r4, r3
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	441a      	add	r2, r3
 8003a00:	4b31      	ldr	r3, [pc, #196]	; (8003ac8 <USB_EPClearStall+0x11c>)
 8003a02:	4323      	orrs	r3, r4
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	78db      	ldrb	r3, [r3, #3]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d054      	beq.n	8003aba <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	881b      	ldrh	r3, [r3, #0]
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a26:	b29c      	uxth	r4, r3
 8003a28:	f084 0320 	eor.w	r3, r4, #32
 8003a2c:	b29c      	uxth	r4, r3
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	441a      	add	r2, r3
 8003a38:	4b24      	ldr	r3, [pc, #144]	; (8003acc <USB_EPClearStall+0x120>)
 8003a3a:	4323      	orrs	r3, r4
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	8013      	strh	r3, [r2, #0]
 8003a40:	e03b      	b.n	8003aba <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4413      	add	r3, r2
 8003a4c:	881b      	ldrh	r3, [r3, #0]
 8003a4e:	b29c      	uxth	r4, r3
 8003a50:	4623      	mov	r3, r4
 8003a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d014      	beq.n	8003a84 <USB_EPClearStall+0xd8>
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4413      	add	r3, r2
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a70:	b29c      	uxth	r4, r3
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	441a      	add	r2, r3
 8003a7c:	4b14      	ldr	r3, [pc, #80]	; (8003ad0 <USB_EPClearStall+0x124>)
 8003a7e:	4323      	orrs	r3, r4
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	881b      	ldrh	r3, [r3, #0]
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a9a:	b29c      	uxth	r4, r3
 8003a9c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003aa0:	b29c      	uxth	r4, r3
 8003aa2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003aa6:	b29c      	uxth	r4, r3
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	441a      	add	r2, r3
 8003ab2:	4b06      	ldr	r3, [pc, #24]	; (8003acc <USB_EPClearStall+0x120>)
 8003ab4:	4323      	orrs	r3, r4
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc90      	pop	{r4, r7}
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	ffff80c0 	.word	0xffff80c0
 8003acc:	ffff8080 	.word	0xffff8080
 8003ad0:	ffffc080 	.word	0xffffc080

08003ad4 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	460b      	mov	r3, r1
 8003ade:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8003ae0:	78fb      	ldrb	r3, [r7, #3]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d103      	bne.n	8003aee <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2280      	movs	r2, #128	; 0x80
 8003aea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc80      	pop	{r7}
 8003af8:	4770      	bx	lr

08003afa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bc80      	pop	{r7}
 8003b0c:	4770      	bx	lr

08003b0e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bc80      	pop	{r7}
 8003b20:	4770      	bx	lr

08003b22 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b085      	sub	sp, #20
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8003b34:	68fb      	ldr	r3, [r7, #12]
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr

08003b40 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bc80      	pop	{r7}
 8003b54:	4770      	bx	lr

08003b56 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b08d      	sub	sp, #52	; 0x34
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	60f8      	str	r0, [r7, #12]
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	4611      	mov	r1, r2
 8003b62:	461a      	mov	r2, r3
 8003b64:	460b      	mov	r3, r1
 8003b66:	80fb      	strh	r3, [r7, #6]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003b6c:	88bb      	ldrh	r3, [r7, #4]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	085b      	lsrs	r3, r3, #1
 8003b72:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003b7c:	88fb      	ldrh	r3, [r7, #6]
 8003b7e:	005a      	lsls	r2, r3, #1
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b88:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b8e:	e01e      	b.n	8003bce <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	3301      	adds	r3, #1
 8003b9a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	021b      	lsls	r3, r3, #8
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8003bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb8:	3302      	adds	r3, #2
 8003bba:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8003bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbe:	3302      	adds	r3, #2
 8003bc0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8003bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1dd      	bne.n	8003b90 <USB_WritePMA+0x3a>
  }
}
 8003bd4:	bf00      	nop
 8003bd6:	3734      	adds	r7, #52	; 0x34
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bc80      	pop	{r7}
 8003bdc:	4770      	bx	lr

08003bde <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b08b      	sub	sp, #44	; 0x2c
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	60f8      	str	r0, [r7, #12]
 8003be6:	60b9      	str	r1, [r7, #8]
 8003be8:	4611      	mov	r1, r2
 8003bea:	461a      	mov	r2, r3
 8003bec:	460b      	mov	r3, r1
 8003bee:	80fb      	strh	r3, [r7, #6]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003bf4:	88bb      	ldrh	r3, [r7, #4]
 8003bf6:	085b      	lsrs	r3, r3, #1
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003c04:	88fb      	ldrh	r3, [r7, #6]
 8003c06:	005a      	lsls	r2, r3, #1
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c10:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
 8003c16:	e01b      	b.n	8003c50 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	881b      	ldrh	r3, [r3, #0]
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	3302      	adds	r3, #2
 8003c24:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	3301      	adds	r3, #1
 8003c32:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	0a1b      	lsrs	r3, r3, #8
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	3301      	adds	r3, #1
 8003c42:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	3302      	adds	r3, #2
 8003c48:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1e0      	bne.n	8003c18 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003c56:	88bb      	ldrh	r3, [r7, #4]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d007      	beq.n	8003c72 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	881b      	ldrh	r3, [r3, #0]
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	701a      	strb	r2, [r3, #0]
  }
}
 8003c72:	bf00      	nop
 8003c74:	372c      	adds	r7, #44	; 0x2c
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr

08003c7c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	460b      	mov	r3, r1
 8003c86:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	7c1b      	ldrb	r3, [r3, #16]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d115      	bne.n	8003cc0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003c94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c98:	2202      	movs	r2, #2
 8003c9a:	2181      	movs	r1, #129	; 0x81
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f001 fe6c 	bl	800597a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003ca8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cac:	2202      	movs	r2, #2
 8003cae:	2101      	movs	r1, #1
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f001 fe62 	bl	800597a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8003cbe:	e012      	b.n	8003ce6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003cc0:	2340      	movs	r3, #64	; 0x40
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	2181      	movs	r1, #129	; 0x81
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f001 fe57 	bl	800597a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003cd2:	2340      	movs	r3, #64	; 0x40
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f001 fe4e 	bl	800597a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003ce6:	2308      	movs	r3, #8
 8003ce8:	2203      	movs	r2, #3
 8003cea:	2182      	movs	r1, #130	; 0x82
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f001 fe44 	bl	800597a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003cf8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003cfc:	f001 ff5e 	bl	8005bbc <USBD_static_malloc>
 8003d00:	4602      	mov	r2, r0
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d102      	bne.n	8003d18 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8003d12:	2301      	movs	r3, #1
 8003d14:	73fb      	strb	r3, [r7, #15]
 8003d16:	e026      	b.n	8003d66 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003d1e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	7c1b      	ldrb	r3, [r3, #16]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d109      	bne.n	8003d56 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003d48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f001 fefd 	bl	8005b4e <USBD_LL_PrepareReceive>
 8003d54:	e007      	b.n	8003d66 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003d5c:	2340      	movs	r3, #64	; 0x40
 8003d5e:	2101      	movs	r1, #1
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f001 fef4 	bl	8005b4e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8003d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003d80:	2181      	movs	r1, #129	; 0x81
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f001 fe1f 	bl	80059c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003d8e:	2101      	movs	r1, #1
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f001 fe18 	bl	80059c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003d9e:	2182      	movs	r1, #130	; 0x82
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f001 fe10 	bl	80059c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00e      	beq.n	8003dd4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f001 ff04 	bl	8005bd4 <USBD_static_free>
    pdev->pClassData = NULL;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b086      	sub	sp, #24
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
 8003de6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003dee:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d039      	beq.n	8003e7c <USBD_CDC_Setup+0x9e>
 8003e08:	2b20      	cmp	r3, #32
 8003e0a:	d17c      	bne.n	8003f06 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	88db      	ldrh	r3, [r3, #6]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d029      	beq.n	8003e68 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	b25b      	sxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	da11      	bge.n	8003e42 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8003e2a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	88d2      	ldrh	r2, [r2, #6]
 8003e30:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003e32:	6939      	ldr	r1, [r7, #16]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	88db      	ldrh	r3, [r3, #6]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f001 f9f6 	bl	800522c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8003e40:	e068      	b.n	8003f14 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	785a      	ldrb	r2, [r3, #1]
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	88db      	ldrh	r3, [r3, #6]
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003e58:	6939      	ldr	r1, [r7, #16]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	88db      	ldrh	r3, [r3, #6]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f001 fa11 	bl	8005288 <USBD_CtlPrepareRx>
      break;
 8003e66:	e055      	b.n	8003f14 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	7850      	ldrb	r0, [r2, #1]
 8003e74:	2200      	movs	r2, #0
 8003e76:	6839      	ldr	r1, [r7, #0]
 8003e78:	4798      	blx	r3
      break;
 8003e7a:	e04b      	b.n	8003f14 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	785b      	ldrb	r3, [r3, #1]
 8003e80:	2b0a      	cmp	r3, #10
 8003e82:	d017      	beq.n	8003eb4 <USBD_CDC_Setup+0xd6>
 8003e84:	2b0b      	cmp	r3, #11
 8003e86:	d029      	beq.n	8003edc <USBD_CDC_Setup+0xfe>
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d133      	bne.n	8003ef4 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	d107      	bne.n	8003ea6 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003e96:	f107 030c 	add.w	r3, r7, #12
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f001 f9c4 	bl	800522c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003ea4:	e02e      	b.n	8003f04 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8003ea6:	6839      	ldr	r1, [r7, #0]
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f001 f955 	bl	8005158 <USBD_CtlError>
            ret = USBD_FAIL;
 8003eae:	2302      	movs	r3, #2
 8003eb0:	75fb      	strb	r3, [r7, #23]
          break;
 8003eb2:	e027      	b.n	8003f04 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003eba:	2b03      	cmp	r3, #3
 8003ebc:	d107      	bne.n	8003ece <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8003ebe:	f107 030f 	add.w	r3, r7, #15
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f001 f9b0 	bl	800522c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003ecc:	e01a      	b.n	8003f04 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8003ece:	6839      	ldr	r1, [r7, #0]
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f001 f941 	bl	8005158 <USBD_CtlError>
            ret = USBD_FAIL;
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	75fb      	strb	r3, [r7, #23]
          break;
 8003eda:	e013      	b.n	8003f04 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003ee2:	2b03      	cmp	r3, #3
 8003ee4:	d00d      	beq.n	8003f02 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8003ee6:	6839      	ldr	r1, [r7, #0]
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f001 f935 	bl	8005158 <USBD_CtlError>
            ret = USBD_FAIL;
 8003eee:	2302      	movs	r3, #2
 8003ef0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8003ef2:	e006      	b.n	8003f02 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8003ef4:	6839      	ldr	r1, [r7, #0]
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f001 f92e 	bl	8005158 <USBD_CtlError>
          ret = USBD_FAIL;
 8003efc:	2302      	movs	r3, #2
 8003efe:	75fb      	strb	r3, [r7, #23]
          break;
 8003f00:	e000      	b.n	8003f04 <USBD_CDC_Setup+0x126>
          break;
 8003f02:	bf00      	nop
      }
      break;
 8003f04:	e006      	b.n	8003f14 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8003f06:	6839      	ldr	r1, [r7, #0]
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f001 f925 	bl	8005158 <USBD_CtlError>
      ret = USBD_FAIL;
 8003f0e:	2302      	movs	r3, #2
 8003f10:	75fb      	strb	r3, [r7, #23]
      break;
 8003f12:	bf00      	nop
  }

  return ret;
 8003f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b084      	sub	sp, #16
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
 8003f26:	460b      	mov	r3, r1
 8003f28:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003f30:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003f38:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d037      	beq.n	8003fb4 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003f44:	78fa      	ldrb	r2, [r7, #3]
 8003f46:	6879      	ldr	r1, [r7, #4]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	331c      	adds	r3, #28
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d026      	beq.n	8003fa8 <USBD_CDC_DataIn+0x8a>
 8003f5a:	78fa      	ldrb	r2, [r7, #3]
 8003f5c:	6879      	ldr	r1, [r7, #4]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4413      	add	r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	440b      	add	r3, r1
 8003f68:	331c      	adds	r3, #28
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	78fa      	ldrb	r2, [r7, #3]
 8003f6e:	68b9      	ldr	r1, [r7, #8]
 8003f70:	0152      	lsls	r2, r2, #5
 8003f72:	440a      	add	r2, r1
 8003f74:	3238      	adds	r2, #56	; 0x38
 8003f76:	6812      	ldr	r2, [r2, #0]
 8003f78:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f7c:	fb02 f201 	mul.w	r2, r2, r1
 8003f80:	1a9b      	subs	r3, r3, r2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d110      	bne.n	8003fa8 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8003f86:	78fa      	ldrb	r2, [r7, #3]
 8003f88:	6879      	ldr	r1, [r7, #4]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	440b      	add	r3, r1
 8003f94:	331c      	adds	r3, #28
 8003f96:	2200      	movs	r2, #0
 8003f98:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003f9a:	78f9      	ldrb	r1, [r7, #3]
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f001 fdb1 	bl	8005b08 <USBD_LL_Transmit>
 8003fa6:	e003      	b.n	8003fb0 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	e000      	b.n	8003fb6 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8003fb4:	2302      	movs	r3, #2
  }
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b084      	sub	sp, #16
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003fd0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003fd2:	78fb      	ldrb	r3, [r7, #3]
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f001 fddc 	bl	8005b94 <USBD_LL_GetRxDataSize>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00d      	beq.n	800400a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004002:	4611      	mov	r1, r2
 8004004:	4798      	blx	r3

    return USBD_OK;
 8004006:	2300      	movs	r3, #0
 8004008:	e000      	b.n	800400c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800400a:	2302      	movs	r3, #2
  }
}
 800400c:	4618      	mov	r0, r3
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004022:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800402a:	2b00      	cmp	r3, #0
 800402c:	d015      	beq.n	800405a <USBD_CDC_EP0_RxReady+0x46>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004034:	2bff      	cmp	r3, #255	; 0xff
 8004036:	d010      	beq.n	800405a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8004046:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800404e:	b292      	uxth	r2, r2
 8004050:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	22ff      	movs	r2, #255	; 0xff
 8004056:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2243      	movs	r2, #67	; 0x43
 8004070:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004072:	4b03      	ldr	r3, [pc, #12]	; (8004080 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004074:	4618      	mov	r0, r3
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	bc80      	pop	{r7}
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	20000094 	.word	0x20000094

08004084 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2243      	movs	r2, #67	; 0x43
 8004090:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8004092:	4b03      	ldr	r3, [pc, #12]	; (80040a0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004094:	4618      	mov	r0, r3
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	bc80      	pop	{r7}
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	20000050 	.word	0x20000050

080040a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2243      	movs	r2, #67	; 0x43
 80040b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80040b2:	4b03      	ldr	r3, [pc, #12]	; (80040c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bc80      	pop	{r7}
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	200000d8 	.word	0x200000d8

080040c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	220a      	movs	r2, #10
 80040d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80040d2:	4b03      	ldr	r3, [pc, #12]	; (80040e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	bc80      	pop	{r7}
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	2000000c 	.word	0x2000000c

080040e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80040ee:	2302      	movs	r3, #2
 80040f0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d005      	beq.n	8004104 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8004100:	2300      	movs	r3, #0
 8004102:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004104:	7bfb      	ldrb	r3, [r7, #15]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	bc80      	pop	{r7}
 800410e:	4770      	bx	lr

08004110 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	4613      	mov	r3, r2
 800411c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004124:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800412e:	88fa      	ldrh	r2, [r7, #6]
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	371c      	adds	r7, #28
 800413c:	46bd      	mov	sp, r7
 800413e:	bc80      	pop	{r7}
 8004140:	4770      	bx	lr

08004142 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8004142:	b480      	push	{r7}
 8004144:	b085      	sub	sp, #20
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004152:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	bc80      	pop	{r7}
 8004166:	4770      	bx	lr

08004168 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004176:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800417e:	2b00      	cmp	r3, #0
 8004180:	d01c      	beq.n	80041bc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004188:	2b00      	cmp	r3, #0
 800418a:	d115      	bne.n	80041b8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2201      	movs	r2, #1
 8004190:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	2181      	movs	r1, #129	; 0x81
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f001 fcaa 	bl	8005b08 <USBD_LL_Transmit>

      return USBD_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	e002      	b.n	80041be <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e000      	b.n	80041be <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80041bc:	2302      	movs	r3, #2
  }
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b084      	sub	sp, #16
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80041d4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d017      	beq.n	8004210 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	7c1b      	ldrb	r3, [r3, #16]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d109      	bne.n	80041fc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80041ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041f2:	2101      	movs	r1, #1
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f001 fcaa 	bl	8005b4e <USBD_LL_PrepareReceive>
 80041fa:	e007      	b.n	800420c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004202:	2340      	movs	r3, #64	; 0x40
 8004204:	2101      	movs	r1, #1
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f001 fca1 	bl	8005b4e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800420c:	2300      	movs	r3, #0
 800420e:	e000      	b.n	8004212 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8004210:	2302      	movs	r3, #2
  }
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b084      	sub	sp, #16
 800421e:	af00      	add	r7, sp, #0
 8004220:	60f8      	str	r0, [r7, #12]
 8004222:	60b9      	str	r1, [r7, #8]
 8004224:	4613      	mov	r3, r2
 8004226:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800422e:	2302      	movs	r3, #2
 8004230:	e01a      	b.n	8004268 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	79fa      	ldrb	r2, [r7, #7]
 800425e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f001 fb15 	bl	8005890 <USBD_LL_Init>

  return USBD_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800427a:	2300      	movs	r3, #0
 800427c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d006      	beq.n	8004292 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800428c:	2300      	movs	r3, #0
 800428e:	73fb      	strb	r3, [r7, #15]
 8004290:	e001      	b.n	8004296 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004292:	2302      	movs	r3, #2
 8004294:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004296:	7bfb      	ldrb	r3, [r7, #15]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	bc80      	pop	{r7}
 80042a0:	4770      	bx	lr

080042a2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b082      	sub	sp, #8
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f001 fb4a 	bl	8005944 <USBD_LL_Start>

  return USBD_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bc80      	pop	{r7}
 80042cc:	4770      	bx	lr

080042ce <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b084      	sub	sp, #16
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
 80042d6:	460b      	mov	r3, r1
 80042d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80042da:	2302      	movs	r3, #2
 80042dc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00c      	beq.n	8004302 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	78fa      	ldrb	r2, [r7, #3]
 80042f2:	4611      	mov	r1, r2
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	4798      	blx	r3
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8004302:	7bfb      	ldrb	r3, [r7, #15]
}
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	460b      	mov	r3, r1
 8004316:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	78fa      	ldrb	r2, [r7, #3]
 8004322:	4611      	mov	r1, r2
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	4798      	blx	r3

  return USBD_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b082      	sub	sp, #8
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004342:	6839      	ldr	r1, [r7, #0]
 8004344:	4618      	mov	r0, r3
 8004346:	f000 fecb 	bl	80050e0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004358:	461a      	mov	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004366:	f003 031f 	and.w	r3, r3, #31
 800436a:	2b01      	cmp	r3, #1
 800436c:	d00c      	beq.n	8004388 <USBD_LL_SetupStage+0x56>
 800436e:	2b01      	cmp	r3, #1
 8004370:	d302      	bcc.n	8004378 <USBD_LL_SetupStage+0x46>
 8004372:	2b02      	cmp	r3, #2
 8004374:	d010      	beq.n	8004398 <USBD_LL_SetupStage+0x66>
 8004376:	e017      	b.n	80043a8 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800437e:	4619      	mov	r1, r3
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f9cb 	bl	800471c <USBD_StdDevReq>
      break;
 8004386:	e01a      	b.n	80043be <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800438e:	4619      	mov	r1, r3
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 fa2d 	bl	80047f0 <USBD_StdItfReq>
      break;
 8004396:	e012      	b.n	80043be <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800439e:	4619      	mov	r1, r3
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 fa6b 	bl	800487c <USBD_StdEPReq>
      break;
 80043a6:	e00a      	b.n	80043be <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80043ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	4619      	mov	r1, r3
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f001 fb24 	bl	8005a04 <USBD_LL_StallEP>
      break;
 80043bc:	bf00      	nop
  }

  return USBD_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3708      	adds	r7, #8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	460b      	mov	r3, r1
 80043d2:	607a      	str	r2, [r7, #4]
 80043d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80043d6:	7afb      	ldrb	r3, [r7, #11]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d14b      	bne.n	8004474 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80043e2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80043ea:	2b03      	cmp	r3, #3
 80043ec:	d134      	bne.n	8004458 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d919      	bls.n	800442e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	68da      	ldr	r2, [r3, #12]
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	1ad2      	subs	r2, r2, r3
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	68da      	ldr	r2, [r3, #12]
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004410:	429a      	cmp	r2, r3
 8004412:	d203      	bcs.n	800441c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8004418:	b29b      	uxth	r3, r3
 800441a:	e002      	b.n	8004422 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004420:	b29b      	uxth	r3, r3
 8004422:	461a      	mov	r2, r3
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f000 ff4c 	bl	80052c4 <USBD_CtlContinueRx>
 800442c:	e038      	b.n	80044a0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00a      	beq.n	8004450 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004440:	2b03      	cmp	r3, #3
 8004442:	d105      	bne.n	8004450 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 ff49 	bl	80052e8 <USBD_CtlSendStatus>
 8004456:	e023      	b.n	80044a0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800445e:	2b05      	cmp	r3, #5
 8004460:	d11e      	bne.n	80044a0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800446a:	2100      	movs	r1, #0
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f001 fac9 	bl	8005a04 <USBD_LL_StallEP>
 8004472:	e015      	b.n	80044a0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00d      	beq.n	800449c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004486:	2b03      	cmp	r3, #3
 8004488:	d108      	bne.n	800449c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	7afa      	ldrb	r2, [r7, #11]
 8004494:	4611      	mov	r1, r2
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	4798      	blx	r3
 800449a:	e001      	b.n	80044a0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800449c:	2302      	movs	r3, #2
 800449e:	e000      	b.n	80044a2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b086      	sub	sp, #24
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	60f8      	str	r0, [r7, #12]
 80044b2:	460b      	mov	r3, r1
 80044b4:	607a      	str	r2, [r7, #4]
 80044b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80044b8:	7afb      	ldrb	r3, [r7, #11]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d17f      	bne.n	80045be <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	3314      	adds	r3, #20
 80044c2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d15c      	bne.n	8004588 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	68da      	ldr	r2, [r3, #12]
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d915      	bls.n	8004506 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	68da      	ldr	r2, [r3, #12]
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	1ad2      	subs	r2, r2, r3
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	461a      	mov	r2, r3
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 feb6 	bl	8005264 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80044f8:	2300      	movs	r3, #0
 80044fa:	2200      	movs	r2, #0
 80044fc:	2100      	movs	r1, #0
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f001 fb25 	bl	8005b4e <USBD_LL_PrepareReceive>
 8004504:	e04e      	b.n	80045a4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	6912      	ldr	r2, [r2, #16]
 800450e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004512:	fb02 f201 	mul.w	r2, r2, r1
 8004516:	1a9b      	subs	r3, r3, r2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d11c      	bne.n	8004556 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004524:	429a      	cmp	r2, r3
 8004526:	d316      	bcc.n	8004556 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004532:	429a      	cmp	r2, r3
 8004534:	d20f      	bcs.n	8004556 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004536:	2200      	movs	r2, #0
 8004538:	2100      	movs	r1, #0
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 fe92 	bl	8005264 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004548:	2300      	movs	r3, #0
 800454a:	2200      	movs	r2, #0
 800454c:	2100      	movs	r1, #0
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f001 fafd 	bl	8005b4e <USBD_LL_PrepareReceive>
 8004554:	e026      	b.n	80045a4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004568:	2b03      	cmp	r3, #3
 800456a:	d105      	bne.n	8004578 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004578:	2180      	movs	r1, #128	; 0x80
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f001 fa42 	bl	8005a04 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f000 fec4 	bl	800530e <USBD_CtlReceiveStatus>
 8004586:	e00d      	b.n	80045a4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800458e:	2b04      	cmp	r3, #4
 8004590:	d004      	beq.n	800459c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004598:	2b00      	cmp	r3, #0
 800459a:	d103      	bne.n	80045a4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800459c:	2180      	movs	r1, #128	; 0x80
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f001 fa30 	bl	8005a04 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d11d      	bne.n	80045ea <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f7ff fe83 	bl	80042ba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80045bc:	e015      	b.n	80045ea <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00d      	beq.n	80045e6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80045d0:	2b03      	cmp	r3, #3
 80045d2:	d108      	bne.n	80045e6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	7afa      	ldrb	r2, [r7, #11]
 80045de:	4611      	mov	r1, r2
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	4798      	blx	r3
 80045e4:	e001      	b.n	80045ea <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80045e6:	2302      	movs	r3, #2
 80045e8:	e000      	b.n	80045ec <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3718      	adds	r7, #24
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80045fc:	2340      	movs	r3, #64	; 0x40
 80045fe:	2200      	movs	r2, #0
 8004600:	2100      	movs	r1, #0
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f001 f9b9 	bl	800597a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2240      	movs	r2, #64	; 0x40
 8004614:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004618:	2340      	movs	r3, #64	; 0x40
 800461a:	2200      	movs	r2, #0
 800461c:	2180      	movs	r1, #128	; 0x80
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f001 f9ab 	bl	800597a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2240      	movs	r2, #64	; 0x40
 800462e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004654:	2b00      	cmp	r3, #0
 8004656:	d009      	beq.n	800466c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6852      	ldr	r2, [r2, #4]
 8004664:	b2d2      	uxtb	r2, r2
 8004666:	4611      	mov	r1, r2
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	4798      	blx	r3
  }

  return USBD_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004676:	b480      	push	{r7}
 8004678:	b083      	sub	sp, #12
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	460b      	mov	r3, r1
 8004680:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	78fa      	ldrb	r2, [r7, #3]
 8004686:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	bc80      	pop	{r7}
 8004692:	4770      	bx	lr

08004694 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2204      	movs	r2, #4
 80046ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bc80      	pop	{r7}
 80046ba:	4770      	bx	lr

080046bc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d105      	bne.n	80046da <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc80      	pop	{r7}
 80046e4:	4770      	bx	lr

080046e6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b082      	sub	sp, #8
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80046f4:	2b03      	cmp	r3, #3
 80046f6:	d10b      	bne.n	8004710 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80046fe:	69db      	ldr	r3, [r3, #28]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d005      	beq.n	8004710 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
	...

0800471c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004726:	2300      	movs	r3, #0
 8004728:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004732:	2b20      	cmp	r3, #32
 8004734:	d004      	beq.n	8004740 <USBD_StdDevReq+0x24>
 8004736:	2b40      	cmp	r3, #64	; 0x40
 8004738:	d002      	beq.n	8004740 <USBD_StdDevReq+0x24>
 800473a:	2b00      	cmp	r3, #0
 800473c:	d008      	beq.n	8004750 <USBD_StdDevReq+0x34>
 800473e:	e04c      	b.n	80047da <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	6839      	ldr	r1, [r7, #0]
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	4798      	blx	r3
      break;
 800474e:	e049      	b.n	80047e4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	785b      	ldrb	r3, [r3, #1]
 8004754:	2b09      	cmp	r3, #9
 8004756:	d83a      	bhi.n	80047ce <USBD_StdDevReq+0xb2>
 8004758:	a201      	add	r2, pc, #4	; (adr r2, 8004760 <USBD_StdDevReq+0x44>)
 800475a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475e:	bf00      	nop
 8004760:	080047b1 	.word	0x080047b1
 8004764:	080047c5 	.word	0x080047c5
 8004768:	080047cf 	.word	0x080047cf
 800476c:	080047bb 	.word	0x080047bb
 8004770:	080047cf 	.word	0x080047cf
 8004774:	08004793 	.word	0x08004793
 8004778:	08004789 	.word	0x08004789
 800477c:	080047cf 	.word	0x080047cf
 8004780:	080047a7 	.word	0x080047a7
 8004784:	0800479d 	.word	0x0800479d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004788:	6839      	ldr	r1, [r7, #0]
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f9d4 	bl	8004b38 <USBD_GetDescriptor>
          break;
 8004790:	e022      	b.n	80047d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004792:	6839      	ldr	r1, [r7, #0]
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 fb37 	bl	8004e08 <USBD_SetAddress>
          break;
 800479a:	e01d      	b.n	80047d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800479c:	6839      	ldr	r1, [r7, #0]
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 fb74 	bl	8004e8c <USBD_SetConfig>
          break;
 80047a4:	e018      	b.n	80047d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80047a6:	6839      	ldr	r1, [r7, #0]
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 fbfd 	bl	8004fa8 <USBD_GetConfig>
          break;
 80047ae:	e013      	b.n	80047d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80047b0:	6839      	ldr	r1, [r7, #0]
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fc2c 	bl	8005010 <USBD_GetStatus>
          break;
 80047b8:	e00e      	b.n	80047d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80047ba:	6839      	ldr	r1, [r7, #0]
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 fc5a 	bl	8005076 <USBD_SetFeature>
          break;
 80047c2:	e009      	b.n	80047d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80047c4:	6839      	ldr	r1, [r7, #0]
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 fc69 	bl	800509e <USBD_ClrFeature>
          break;
 80047cc:	e004      	b.n	80047d8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80047ce:	6839      	ldr	r1, [r7, #0]
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 fcc1 	bl	8005158 <USBD_CtlError>
          break;
 80047d6:	bf00      	nop
      }
      break;
 80047d8:	e004      	b.n	80047e4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80047da:	6839      	ldr	r1, [r7, #0]
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 fcbb 	bl	8005158 <USBD_CtlError>
      break;
 80047e2:	bf00      	nop
  }

  return ret;
 80047e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop

080047f0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80047fa:	2300      	movs	r3, #0
 80047fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004806:	2b20      	cmp	r3, #32
 8004808:	d003      	beq.n	8004812 <USBD_StdItfReq+0x22>
 800480a:	2b40      	cmp	r3, #64	; 0x40
 800480c:	d001      	beq.n	8004812 <USBD_StdItfReq+0x22>
 800480e:	2b00      	cmp	r3, #0
 8004810:	d12a      	bne.n	8004868 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004818:	3b01      	subs	r3, #1
 800481a:	2b02      	cmp	r3, #2
 800481c:	d81d      	bhi.n	800485a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	889b      	ldrh	r3, [r3, #4]
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b01      	cmp	r3, #1
 8004826:	d813      	bhi.n	8004850 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	6839      	ldr	r1, [r7, #0]
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	4798      	blx	r3
 8004836:	4603      	mov	r3, r0
 8004838:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	88db      	ldrh	r3, [r3, #6]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d110      	bne.n	8004864 <USBD_StdItfReq+0x74>
 8004842:	7bfb      	ldrb	r3, [r7, #15]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10d      	bne.n	8004864 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 fd4d 	bl	80052e8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800484e:	e009      	b.n	8004864 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8004850:	6839      	ldr	r1, [r7, #0]
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 fc80 	bl	8005158 <USBD_CtlError>
          break;
 8004858:	e004      	b.n	8004864 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800485a:	6839      	ldr	r1, [r7, #0]
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 fc7b 	bl	8005158 <USBD_CtlError>
          break;
 8004862:	e000      	b.n	8004866 <USBD_StdItfReq+0x76>
          break;
 8004864:	bf00      	nop
      }
      break;
 8004866:	e004      	b.n	8004872 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8004868:	6839      	ldr	r1, [r7, #0]
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fc74 	bl	8005158 <USBD_CtlError>
      break;
 8004870:	bf00      	nop
  }

  return USBD_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004886:	2300      	movs	r3, #0
 8004888:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	889b      	ldrh	r3, [r3, #4]
 800488e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004898:	2b20      	cmp	r3, #32
 800489a:	d004      	beq.n	80048a6 <USBD_StdEPReq+0x2a>
 800489c:	2b40      	cmp	r3, #64	; 0x40
 800489e:	d002      	beq.n	80048a6 <USBD_StdEPReq+0x2a>
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d008      	beq.n	80048b6 <USBD_StdEPReq+0x3a>
 80048a4:	e13d      	b.n	8004b22 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	6839      	ldr	r1, [r7, #0]
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	4798      	blx	r3
      break;
 80048b4:	e13a      	b.n	8004b2c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80048be:	2b20      	cmp	r3, #32
 80048c0:	d10a      	bne.n	80048d8 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	6839      	ldr	r1, [r7, #0]
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	4798      	blx	r3
 80048d0:	4603      	mov	r3, r0
 80048d2:	73fb      	strb	r3, [r7, #15]

        return ret;
 80048d4:	7bfb      	ldrb	r3, [r7, #15]
 80048d6:	e12a      	b.n	8004b2e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	785b      	ldrb	r3, [r3, #1]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d03e      	beq.n	800495e <USBD_StdEPReq+0xe2>
 80048e0:	2b03      	cmp	r3, #3
 80048e2:	d002      	beq.n	80048ea <USBD_StdEPReq+0x6e>
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d070      	beq.n	80049ca <USBD_StdEPReq+0x14e>
 80048e8:	e115      	b.n	8004b16 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d002      	beq.n	80048fa <USBD_StdEPReq+0x7e>
 80048f4:	2b03      	cmp	r3, #3
 80048f6:	d015      	beq.n	8004924 <USBD_StdEPReq+0xa8>
 80048f8:	e02b      	b.n	8004952 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80048fa:	7bbb      	ldrb	r3, [r7, #14]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00c      	beq.n	800491a <USBD_StdEPReq+0x9e>
 8004900:	7bbb      	ldrb	r3, [r7, #14]
 8004902:	2b80      	cmp	r3, #128	; 0x80
 8004904:	d009      	beq.n	800491a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004906:	7bbb      	ldrb	r3, [r7, #14]
 8004908:	4619      	mov	r1, r3
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f001 f87a 	bl	8005a04 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004910:	2180      	movs	r1, #128	; 0x80
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f001 f876 	bl	8005a04 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004918:	e020      	b.n	800495c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800491a:	6839      	ldr	r1, [r7, #0]
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 fc1b 	bl	8005158 <USBD_CtlError>
              break;
 8004922:	e01b      	b.n	800495c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	885b      	ldrh	r3, [r3, #2]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10e      	bne.n	800494a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800492c:	7bbb      	ldrb	r3, [r7, #14]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00b      	beq.n	800494a <USBD_StdEPReq+0xce>
 8004932:	7bbb      	ldrb	r3, [r7, #14]
 8004934:	2b80      	cmp	r3, #128	; 0x80
 8004936:	d008      	beq.n	800494a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	88db      	ldrh	r3, [r3, #6]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d104      	bne.n	800494a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8004940:	7bbb      	ldrb	r3, [r7, #14]
 8004942:	4619      	mov	r1, r3
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f001 f85d 	bl	8005a04 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fccc 	bl	80052e8 <USBD_CtlSendStatus>

              break;
 8004950:	e004      	b.n	800495c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8004952:	6839      	ldr	r1, [r7, #0]
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 fbff 	bl	8005158 <USBD_CtlError>
              break;
 800495a:	bf00      	nop
          }
          break;
 800495c:	e0e0      	b.n	8004b20 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004964:	2b02      	cmp	r3, #2
 8004966:	d002      	beq.n	800496e <USBD_StdEPReq+0xf2>
 8004968:	2b03      	cmp	r3, #3
 800496a:	d015      	beq.n	8004998 <USBD_StdEPReq+0x11c>
 800496c:	e026      	b.n	80049bc <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800496e:	7bbb      	ldrb	r3, [r7, #14]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00c      	beq.n	800498e <USBD_StdEPReq+0x112>
 8004974:	7bbb      	ldrb	r3, [r7, #14]
 8004976:	2b80      	cmp	r3, #128	; 0x80
 8004978:	d009      	beq.n	800498e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800497a:	7bbb      	ldrb	r3, [r7, #14]
 800497c:	4619      	mov	r1, r3
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f001 f840 	bl	8005a04 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004984:	2180      	movs	r1, #128	; 0x80
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f001 f83c 	bl	8005a04 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800498c:	e01c      	b.n	80049c8 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800498e:	6839      	ldr	r1, [r7, #0]
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 fbe1 	bl	8005158 <USBD_CtlError>
              break;
 8004996:	e017      	b.n	80049c8 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	885b      	ldrh	r3, [r3, #2]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d112      	bne.n	80049c6 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80049a0:	7bbb      	ldrb	r3, [r7, #14]
 80049a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d004      	beq.n	80049b4 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80049aa:	7bbb      	ldrb	r3, [r7, #14]
 80049ac:	4619      	mov	r1, r3
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f001 f847 	bl	8005a42 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 fc97 	bl	80052e8 <USBD_CtlSendStatus>
              }
              break;
 80049ba:	e004      	b.n	80049c6 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80049bc:	6839      	ldr	r1, [r7, #0]
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 fbca 	bl	8005158 <USBD_CtlError>
              break;
 80049c4:	e000      	b.n	80049c8 <USBD_StdEPReq+0x14c>
              break;
 80049c6:	bf00      	nop
          }
          break;
 80049c8:	e0aa      	b.n	8004b20 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d002      	beq.n	80049da <USBD_StdEPReq+0x15e>
 80049d4:	2b03      	cmp	r3, #3
 80049d6:	d032      	beq.n	8004a3e <USBD_StdEPReq+0x1c2>
 80049d8:	e097      	b.n	8004b0a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80049da:	7bbb      	ldrb	r3, [r7, #14]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d007      	beq.n	80049f0 <USBD_StdEPReq+0x174>
 80049e0:	7bbb      	ldrb	r3, [r7, #14]
 80049e2:	2b80      	cmp	r3, #128	; 0x80
 80049e4:	d004      	beq.n	80049f0 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80049e6:	6839      	ldr	r1, [r7, #0]
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 fbb5 	bl	8005158 <USBD_CtlError>
                break;
 80049ee:	e091      	b.n	8004b14 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80049f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	da0b      	bge.n	8004a10 <USBD_StdEPReq+0x194>
 80049f8:	7bbb      	ldrb	r3, [r7, #14]
 80049fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049fe:	4613      	mov	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4413      	add	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	3310      	adds	r3, #16
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	e00b      	b.n	8004a28 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004a10:	7bbb      	ldrb	r3, [r7, #14]
 8004a12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004a16:	4613      	mov	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	4413      	add	r3, r2
 8004a26:	3304      	adds	r3, #4
 8004a28:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2202      	movs	r2, #2
 8004a34:	4619      	mov	r1, r3
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 fbf8 	bl	800522c <USBD_CtlSendData>
              break;
 8004a3c:	e06a      	b.n	8004b14 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8004a3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	da11      	bge.n	8004a6a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004a46:	7bbb      	ldrb	r3, [r7, #14]
 8004a48:	f003 020f 	and.w	r2, r3, #15
 8004a4c:	6879      	ldr	r1, [r7, #4]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4413      	add	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	440b      	add	r3, r1
 8004a58:	3318      	adds	r3, #24
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d117      	bne.n	8004a90 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8004a60:	6839      	ldr	r1, [r7, #0]
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 fb78 	bl	8005158 <USBD_CtlError>
                  break;
 8004a68:	e054      	b.n	8004b14 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004a6a:	7bbb      	ldrb	r3, [r7, #14]
 8004a6c:	f003 020f 	and.w	r2, r3, #15
 8004a70:	6879      	ldr	r1, [r7, #4]
 8004a72:	4613      	mov	r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	440b      	add	r3, r1
 8004a7c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d104      	bne.n	8004a90 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8004a86:	6839      	ldr	r1, [r7, #0]
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 fb65 	bl	8005158 <USBD_CtlError>
                  break;
 8004a8e:	e041      	b.n	8004b14 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004a90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	da0b      	bge.n	8004ab0 <USBD_StdEPReq+0x234>
 8004a98:	7bbb      	ldrb	r3, [r7, #14]
 8004a9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	3310      	adds	r3, #16
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	4413      	add	r3, r2
 8004aac:	3304      	adds	r3, #4
 8004aae:	e00b      	b.n	8004ac8 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004ab0:	7bbb      	ldrb	r3, [r7, #14]
 8004ab2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	3304      	adds	r3, #4
 8004ac8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004aca:	7bbb      	ldrb	r3, [r7, #14]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d002      	beq.n	8004ad6 <USBD_StdEPReq+0x25a>
 8004ad0:	7bbb      	ldrb	r3, [r7, #14]
 8004ad2:	2b80      	cmp	r3, #128	; 0x80
 8004ad4:	d103      	bne.n	8004ade <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	e00e      	b.n	8004afc <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8004ade:	7bbb      	ldrb	r3, [r7, #14]
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 ffcc 	bl	8005a80 <USBD_LL_IsStallEP>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	2201      	movs	r2, #1
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	e002      	b.n	8004afc <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	2202      	movs	r2, #2
 8004b00:	4619      	mov	r1, r3
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 fb92 	bl	800522c <USBD_CtlSendData>
              break;
 8004b08:	e004      	b.n	8004b14 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8004b0a:	6839      	ldr	r1, [r7, #0]
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 fb23 	bl	8005158 <USBD_CtlError>
              break;
 8004b12:	bf00      	nop
          }
          break;
 8004b14:	e004      	b.n	8004b20 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8004b16:	6839      	ldr	r1, [r7, #0]
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 fb1d 	bl	8005158 <USBD_CtlError>
          break;
 8004b1e:	bf00      	nop
      }
      break;
 8004b20:	e004      	b.n	8004b2c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8004b22:	6839      	ldr	r1, [r7, #0]
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 fb17 	bl	8005158 <USBD_CtlError>
      break;
 8004b2a:	bf00      	nop
  }

  return ret;
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
	...

08004b38 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004b42:	2300      	movs	r3, #0
 8004b44:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8004b46:	2300      	movs	r3, #0
 8004b48:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	885b      	ldrh	r3, [r3, #2]
 8004b52:	0a1b      	lsrs	r3, r3, #8
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	3b01      	subs	r3, #1
 8004b58:	2b06      	cmp	r3, #6
 8004b5a:	f200 8128 	bhi.w	8004dae <USBD_GetDescriptor+0x276>
 8004b5e:	a201      	add	r2, pc, #4	; (adr r2, 8004b64 <USBD_GetDescriptor+0x2c>)
 8004b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b64:	08004b81 	.word	0x08004b81
 8004b68:	08004b99 	.word	0x08004b99
 8004b6c:	08004bd9 	.word	0x08004bd9
 8004b70:	08004daf 	.word	0x08004daf
 8004b74:	08004daf 	.word	0x08004daf
 8004b78:	08004d4f 	.word	0x08004d4f
 8004b7c:	08004d7b 	.word	0x08004d7b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	7c12      	ldrb	r2, [r2, #16]
 8004b8c:	f107 0108 	add.w	r1, r7, #8
 8004b90:	4610      	mov	r0, r2
 8004b92:	4798      	blx	r3
 8004b94:	60f8      	str	r0, [r7, #12]
      break;
 8004b96:	e112      	b.n	8004dbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	7c1b      	ldrb	r3, [r3, #16]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10d      	bne.n	8004bbc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba8:	f107 0208 	add.w	r2, r7, #8
 8004bac:	4610      	mov	r0, r2
 8004bae:	4798      	blx	r3
 8004bb0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8004bba:	e100      	b.n	8004dbe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc4:	f107 0208 	add.w	r2, r7, #8
 8004bc8:	4610      	mov	r0, r2
 8004bca:	4798      	blx	r3
 8004bcc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	701a      	strb	r2, [r3, #0]
      break;
 8004bd6:	e0f2      	b.n	8004dbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	885b      	ldrh	r3, [r3, #2]
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b05      	cmp	r3, #5
 8004be0:	f200 80ac 	bhi.w	8004d3c <USBD_GetDescriptor+0x204>
 8004be4:	a201      	add	r2, pc, #4	; (adr r2, 8004bec <USBD_GetDescriptor+0xb4>)
 8004be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bea:	bf00      	nop
 8004bec:	08004c05 	.word	0x08004c05
 8004bf0:	08004c39 	.word	0x08004c39
 8004bf4:	08004c6d 	.word	0x08004c6d
 8004bf8:	08004ca1 	.word	0x08004ca1
 8004bfc:	08004cd5 	.word	0x08004cd5
 8004c00:	08004d09 	.word	0x08004d09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00b      	beq.n	8004c28 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	7c12      	ldrb	r2, [r2, #16]
 8004c1c:	f107 0108 	add.w	r1, r7, #8
 8004c20:	4610      	mov	r0, r2
 8004c22:	4798      	blx	r3
 8004c24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004c26:	e091      	b.n	8004d4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004c28:	6839      	ldr	r1, [r7, #0]
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 fa94 	bl	8005158 <USBD_CtlError>
            err++;
 8004c30:	7afb      	ldrb	r3, [r7, #11]
 8004c32:	3301      	adds	r3, #1
 8004c34:	72fb      	strb	r3, [r7, #11]
          break;
 8004c36:	e089      	b.n	8004d4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00b      	beq.n	8004c5c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	7c12      	ldrb	r2, [r2, #16]
 8004c50:	f107 0108 	add.w	r1, r7, #8
 8004c54:	4610      	mov	r0, r2
 8004c56:	4798      	blx	r3
 8004c58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004c5a:	e077      	b.n	8004d4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004c5c:	6839      	ldr	r1, [r7, #0]
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 fa7a 	bl	8005158 <USBD_CtlError>
            err++;
 8004c64:	7afb      	ldrb	r3, [r7, #11]
 8004c66:	3301      	adds	r3, #1
 8004c68:	72fb      	strb	r3, [r7, #11]
          break;
 8004c6a:	e06f      	b.n	8004d4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00b      	beq.n	8004c90 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	7c12      	ldrb	r2, [r2, #16]
 8004c84:	f107 0108 	add.w	r1, r7, #8
 8004c88:	4610      	mov	r0, r2
 8004c8a:	4798      	blx	r3
 8004c8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004c8e:	e05d      	b.n	8004d4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004c90:	6839      	ldr	r1, [r7, #0]
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 fa60 	bl	8005158 <USBD_CtlError>
            err++;
 8004c98:	7afb      	ldrb	r3, [r7, #11]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	72fb      	strb	r3, [r7, #11]
          break;
 8004c9e:	e055      	b.n	8004d4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00b      	beq.n	8004cc4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	7c12      	ldrb	r2, [r2, #16]
 8004cb8:	f107 0108 	add.w	r1, r7, #8
 8004cbc:	4610      	mov	r0, r2
 8004cbe:	4798      	blx	r3
 8004cc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004cc2:	e043      	b.n	8004d4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004cc4:	6839      	ldr	r1, [r7, #0]
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 fa46 	bl	8005158 <USBD_CtlError>
            err++;
 8004ccc:	7afb      	ldrb	r3, [r7, #11]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	72fb      	strb	r3, [r7, #11]
          break;
 8004cd2:	e03b      	b.n	8004d4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00b      	beq.n	8004cf8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	7c12      	ldrb	r2, [r2, #16]
 8004cec:	f107 0108 	add.w	r1, r7, #8
 8004cf0:	4610      	mov	r0, r2
 8004cf2:	4798      	blx	r3
 8004cf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004cf6:	e029      	b.n	8004d4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004cf8:	6839      	ldr	r1, [r7, #0]
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fa2c 	bl	8005158 <USBD_CtlError>
            err++;
 8004d00:	7afb      	ldrb	r3, [r7, #11]
 8004d02:	3301      	adds	r3, #1
 8004d04:	72fb      	strb	r3, [r7, #11]
          break;
 8004d06:	e021      	b.n	8004d4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00b      	beq.n	8004d2c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	7c12      	ldrb	r2, [r2, #16]
 8004d20:	f107 0108 	add.w	r1, r7, #8
 8004d24:	4610      	mov	r0, r2
 8004d26:	4798      	blx	r3
 8004d28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004d2a:	e00f      	b.n	8004d4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004d2c:	6839      	ldr	r1, [r7, #0]
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 fa12 	bl	8005158 <USBD_CtlError>
            err++;
 8004d34:	7afb      	ldrb	r3, [r7, #11]
 8004d36:	3301      	adds	r3, #1
 8004d38:	72fb      	strb	r3, [r7, #11]
          break;
 8004d3a:	e007      	b.n	8004d4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8004d3c:	6839      	ldr	r1, [r7, #0]
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 fa0a 	bl	8005158 <USBD_CtlError>
          err++;
 8004d44:	7afb      	ldrb	r3, [r7, #11]
 8004d46:	3301      	adds	r3, #1
 8004d48:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8004d4a:	e038      	b.n	8004dbe <USBD_GetDescriptor+0x286>
 8004d4c:	e037      	b.n	8004dbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	7c1b      	ldrb	r3, [r3, #16]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d109      	bne.n	8004d6a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d5e:	f107 0208 	add.w	r2, r7, #8
 8004d62:	4610      	mov	r0, r2
 8004d64:	4798      	blx	r3
 8004d66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004d68:	e029      	b.n	8004dbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8004d6a:	6839      	ldr	r1, [r7, #0]
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f9f3 	bl	8005158 <USBD_CtlError>
        err++;
 8004d72:	7afb      	ldrb	r3, [r7, #11]
 8004d74:	3301      	adds	r3, #1
 8004d76:	72fb      	strb	r3, [r7, #11]
      break;
 8004d78:	e021      	b.n	8004dbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	7c1b      	ldrb	r3, [r3, #16]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10d      	bne.n	8004d9e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8a:	f107 0208 	add.w	r2, r7, #8
 8004d8e:	4610      	mov	r0, r2
 8004d90:	4798      	blx	r3
 8004d92:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	3301      	adds	r3, #1
 8004d98:	2207      	movs	r2, #7
 8004d9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004d9c:	e00f      	b.n	8004dbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8004d9e:	6839      	ldr	r1, [r7, #0]
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f9d9 	bl	8005158 <USBD_CtlError>
        err++;
 8004da6:	7afb      	ldrb	r3, [r7, #11]
 8004da8:	3301      	adds	r3, #1
 8004daa:	72fb      	strb	r3, [r7, #11]
      break;
 8004dac:	e007      	b.n	8004dbe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8004dae:	6839      	ldr	r1, [r7, #0]
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 f9d1 	bl	8005158 <USBD_CtlError>
      err++;
 8004db6:	7afb      	ldrb	r3, [r7, #11]
 8004db8:	3301      	adds	r3, #1
 8004dba:	72fb      	strb	r3, [r7, #11]
      break;
 8004dbc:	bf00      	nop
  }

  if (err != 0U)
 8004dbe:	7afb      	ldrb	r3, [r7, #11]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d11c      	bne.n	8004dfe <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8004dc4:	893b      	ldrh	r3, [r7, #8]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d011      	beq.n	8004dee <USBD_GetDescriptor+0x2b6>
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	88db      	ldrh	r3, [r3, #6]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00d      	beq.n	8004dee <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	88da      	ldrh	r2, [r3, #6]
 8004dd6:	893b      	ldrh	r3, [r7, #8]
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	bf28      	it	cs
 8004ddc:	4613      	movcs	r3, r2
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004de2:	893b      	ldrh	r3, [r7, #8]
 8004de4:	461a      	mov	r2, r3
 8004de6:	68f9      	ldr	r1, [r7, #12]
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 fa1f 	bl	800522c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	88db      	ldrh	r3, [r3, #6]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d104      	bne.n	8004e00 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 fa76 	bl	80052e8 <USBD_CtlSendStatus>
 8004dfc:	e000      	b.n	8004e00 <USBD_GetDescriptor+0x2c8>
    return;
 8004dfe:	bf00      	nop
    }
  }
}
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop

08004e08 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	889b      	ldrh	r3, [r3, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d130      	bne.n	8004e7c <USBD_SetAddress+0x74>
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	88db      	ldrh	r3, [r3, #6]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d12c      	bne.n	8004e7c <USBD_SetAddress+0x74>
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	885b      	ldrh	r3, [r3, #2]
 8004e26:	2b7f      	cmp	r3, #127	; 0x7f
 8004e28:	d828      	bhi.n	8004e7c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	885b      	ldrh	r3, [r3, #2]
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e3c:	2b03      	cmp	r3, #3
 8004e3e:	d104      	bne.n	8004e4a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8004e40:	6839      	ldr	r1, [r7, #0]
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f988 	bl	8005158 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e48:	e01c      	b.n	8004e84 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	7bfa      	ldrb	r2, [r7, #15]
 8004e4e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004e52:	7bfb      	ldrb	r3, [r7, #15]
 8004e54:	4619      	mov	r1, r3
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 fe37 	bl	8005aca <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 fa43 	bl	80052e8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8004e62:	7bfb      	ldrb	r3, [r7, #15]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d004      	beq.n	8004e72 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e70:	e008      	b.n	8004e84 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e7a:	e003      	b.n	8004e84 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8004e7c:	6839      	ldr	r1, [r7, #0]
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f96a 	bl	8005158 <USBD_CtlError>
  }
}
 8004e84:	bf00      	nop
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	885b      	ldrh	r3, [r3, #2]
 8004e9a:	b2da      	uxtb	r2, r3
 8004e9c:	4b41      	ldr	r3, [pc, #260]	; (8004fa4 <USBD_SetConfig+0x118>)
 8004e9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004ea0:	4b40      	ldr	r3, [pc, #256]	; (8004fa4 <USBD_SetConfig+0x118>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d904      	bls.n	8004eb2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8004ea8:	6839      	ldr	r1, [r7, #0]
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f954 	bl	8005158 <USBD_CtlError>
 8004eb0:	e075      	b.n	8004f9e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d002      	beq.n	8004ec2 <USBD_SetConfig+0x36>
 8004ebc:	2b03      	cmp	r3, #3
 8004ebe:	d023      	beq.n	8004f08 <USBD_SetConfig+0x7c>
 8004ec0:	e062      	b.n	8004f88 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8004ec2:	4b38      	ldr	r3, [pc, #224]	; (8004fa4 <USBD_SetConfig+0x118>)
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d01a      	beq.n	8004f00 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8004eca:	4b36      	ldr	r3, [pc, #216]	; (8004fa4 <USBD_SetConfig+0x118>)
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2203      	movs	r2, #3
 8004ed8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004edc:	4b31      	ldr	r3, [pc, #196]	; (8004fa4 <USBD_SetConfig+0x118>)
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7ff f9f3 	bl	80042ce <USBD_SetClassConfig>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d104      	bne.n	8004ef8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8004eee:	6839      	ldr	r1, [r7, #0]
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 f931 	bl	8005158 <USBD_CtlError>
            return;
 8004ef6:	e052      	b.n	8004f9e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 f9f5 	bl	80052e8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8004efe:	e04e      	b.n	8004f9e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f9f1 	bl	80052e8 <USBD_CtlSendStatus>
        break;
 8004f06:	e04a      	b.n	8004f9e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8004f08:	4b26      	ldr	r3, [pc, #152]	; (8004fa4 <USBD_SetConfig+0x118>)
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d112      	bne.n	8004f36 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8004f18:	4b22      	ldr	r3, [pc, #136]	; (8004fa4 <USBD_SetConfig+0x118>)
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8004f22:	4b20      	ldr	r3, [pc, #128]	; (8004fa4 <USBD_SetConfig+0x118>)
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	4619      	mov	r1, r3
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f7ff f9ef 	bl	800430c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f9da 	bl	80052e8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8004f34:	e033      	b.n	8004f9e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8004f36:	4b1b      	ldr	r3, [pc, #108]	; (8004fa4 <USBD_SetConfig+0x118>)
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d01d      	beq.n	8004f80 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7ff f9dd 	bl	800430c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8004f52:	4b14      	ldr	r3, [pc, #80]	; (8004fa4 <USBD_SetConfig+0x118>)
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	461a      	mov	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004f5c:	4b11      	ldr	r3, [pc, #68]	; (8004fa4 <USBD_SetConfig+0x118>)
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	4619      	mov	r1, r3
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7ff f9b3 	bl	80042ce <USBD_SetClassConfig>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d104      	bne.n	8004f78 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8004f6e:	6839      	ldr	r1, [r7, #0]
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f8f1 	bl	8005158 <USBD_CtlError>
            return;
 8004f76:	e012      	b.n	8004f9e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f9b5 	bl	80052e8 <USBD_CtlSendStatus>
        break;
 8004f7e:	e00e      	b.n	8004f9e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 f9b1 	bl	80052e8 <USBD_CtlSendStatus>
        break;
 8004f86:	e00a      	b.n	8004f9e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8004f88:	6839      	ldr	r1, [r7, #0]
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f8e4 	bl	8005158 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8004f90:	4b04      	ldr	r3, [pc, #16]	; (8004fa4 <USBD_SetConfig+0x118>)
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	4619      	mov	r1, r3
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7ff f9b8 	bl	800430c <USBD_ClrClassConfig>
        break;
 8004f9c:	bf00      	nop
    }
  }
}
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	20000200 	.word	0x20000200

08004fa8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	88db      	ldrh	r3, [r3, #6]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d004      	beq.n	8004fc4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8004fba:	6839      	ldr	r1, [r7, #0]
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f8cb 	bl	8005158 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8004fc2:	e021      	b.n	8005008 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	db17      	blt.n	8004ffe <USBD_GetConfig+0x56>
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	dd02      	ble.n	8004fd8 <USBD_GetConfig+0x30>
 8004fd2:	2b03      	cmp	r3, #3
 8004fd4:	d00b      	beq.n	8004fee <USBD_GetConfig+0x46>
 8004fd6:	e012      	b.n	8004ffe <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	3308      	adds	r3, #8
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f920 	bl	800522c <USBD_CtlSendData>
        break;
 8004fec:	e00c      	b.n	8005008 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	3304      	adds	r3, #4
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f918 	bl	800522c <USBD_CtlSendData>
        break;
 8004ffc:	e004      	b.n	8005008 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8004ffe:	6839      	ldr	r1, [r7, #0]
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f8a9 	bl	8005158 <USBD_CtlError>
        break;
 8005006:	bf00      	nop
}
 8005008:	bf00      	nop
 800500a:	3708      	adds	r7, #8
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005020:	3b01      	subs	r3, #1
 8005022:	2b02      	cmp	r3, #2
 8005024:	d81e      	bhi.n	8005064 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	88db      	ldrh	r3, [r3, #6]
 800502a:	2b02      	cmp	r3, #2
 800502c:	d004      	beq.n	8005038 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800502e:	6839      	ldr	r1, [r7, #0]
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 f891 	bl	8005158 <USBD_CtlError>
        break;
 8005036:	e01a      	b.n	800506e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005044:	2b00      	cmp	r3, #0
 8005046:	d005      	beq.n	8005054 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	f043 0202 	orr.w	r2, r3, #2
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	330c      	adds	r3, #12
 8005058:	2202      	movs	r2, #2
 800505a:	4619      	mov	r1, r3
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f8e5 	bl	800522c <USBD_CtlSendData>
      break;
 8005062:	e004      	b.n	800506e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005064:	6839      	ldr	r1, [r7, #0]
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f876 	bl	8005158 <USBD_CtlError>
      break;
 800506c:	bf00      	nop
  }
}
 800506e:	bf00      	nop
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b082      	sub	sp, #8
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
 800507e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	885b      	ldrh	r3, [r3, #2]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d106      	bne.n	8005096 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f929 	bl	80052e8 <USBD_CtlSendStatus>
  }
}
 8005096:	bf00      	nop
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b082      	sub	sp, #8
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
 80050a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050ae:	3b01      	subs	r3, #1
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d80b      	bhi.n	80050cc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	885b      	ldrh	r3, [r3, #2]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d10c      	bne.n	80050d6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f90f 	bl	80052e8 <USBD_CtlSendStatus>
      }
      break;
 80050ca:	e004      	b.n	80050d6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80050cc:	6839      	ldr	r1, [r7, #0]
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f842 	bl	8005158 <USBD_CtlError>
      break;
 80050d4:	e000      	b.n	80050d8 <USBD_ClrFeature+0x3a>
      break;
 80050d6:	bf00      	nop
  }
}
 80050d8:	bf00      	nop
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	781a      	ldrb	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	785a      	ldrb	r2, [r3, #1]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	3302      	adds	r3, #2
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	b29a      	uxth	r2, r3
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	3303      	adds	r3, #3
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	b29b      	uxth	r3, r3
 800510a:	021b      	lsls	r3, r3, #8
 800510c:	b29b      	uxth	r3, r3
 800510e:	4413      	add	r3, r2
 8005110:	b29a      	uxth	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	3304      	adds	r3, #4
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	b29a      	uxth	r2, r3
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	3305      	adds	r3, #5
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	b29b      	uxth	r3, r3
 8005126:	021b      	lsls	r3, r3, #8
 8005128:	b29b      	uxth	r3, r3
 800512a:	4413      	add	r3, r2
 800512c:	b29a      	uxth	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	3306      	adds	r3, #6
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	b29a      	uxth	r2, r3
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	3307      	adds	r3, #7
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	b29b      	uxth	r3, r3
 8005142:	021b      	lsls	r3, r3, #8
 8005144:	b29b      	uxth	r3, r3
 8005146:	4413      	add	r3, r2
 8005148:	b29a      	uxth	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	80da      	strh	r2, [r3, #6]

}
 800514e:	bf00      	nop
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	bc80      	pop	{r7}
 8005156:	4770      	bx	lr

08005158 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8005162:	2180      	movs	r1, #128	; 0x80
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 fc4d 	bl	8005a04 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800516a:	2100      	movs	r1, #0
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 fc49 	bl	8005a04 <USBD_LL_StallEP>
}
 8005172:	bf00      	nop
 8005174:	3708      	adds	r7, #8
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b086      	sub	sp, #24
 800517e:	af00      	add	r7, sp, #0
 8005180:	60f8      	str	r0, [r7, #12]
 8005182:	60b9      	str	r1, [r7, #8]
 8005184:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005186:	2300      	movs	r3, #0
 8005188:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d032      	beq.n	80051f6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f000 f834 	bl	80051fe <USBD_GetLen>
 8005196:	4603      	mov	r3, r0
 8005198:	3301      	adds	r3, #1
 800519a:	b29b      	uxth	r3, r3
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	b29a      	uxth	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80051a4:	7dfb      	ldrb	r3, [r7, #23]
 80051a6:	1c5a      	adds	r2, r3, #1
 80051a8:	75fa      	strb	r2, [r7, #23]
 80051aa:	461a      	mov	r2, r3
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	4413      	add	r3, r2
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	7812      	ldrb	r2, [r2, #0]
 80051b4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80051b6:	7dfb      	ldrb	r3, [r7, #23]
 80051b8:	1c5a      	adds	r2, r3, #1
 80051ba:	75fa      	strb	r2, [r7, #23]
 80051bc:	461a      	mov	r2, r3
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	4413      	add	r3, r2
 80051c2:	2203      	movs	r2, #3
 80051c4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80051c6:	e012      	b.n	80051ee <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	1c5a      	adds	r2, r3, #1
 80051cc:	60fa      	str	r2, [r7, #12]
 80051ce:	7dfa      	ldrb	r2, [r7, #23]
 80051d0:	1c51      	adds	r1, r2, #1
 80051d2:	75f9      	strb	r1, [r7, #23]
 80051d4:	4611      	mov	r1, r2
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	440a      	add	r2, r1
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80051de:	7dfb      	ldrb	r3, [r7, #23]
 80051e0:	1c5a      	adds	r2, r3, #1
 80051e2:	75fa      	strb	r2, [r7, #23]
 80051e4:	461a      	mov	r2, r3
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	4413      	add	r3, r2
 80051ea:	2200      	movs	r2, #0
 80051ec:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1e8      	bne.n	80051c8 <USBD_GetString+0x4e>
    }
  }
}
 80051f6:	bf00      	nop
 80051f8:	3718      	adds	r7, #24
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80051fe:	b480      	push	{r7}
 8005200:	b085      	sub	sp, #20
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005206:	2300      	movs	r3, #0
 8005208:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800520a:	e005      	b.n	8005218 <USBD_GetLen+0x1a>
  {
    len++;
 800520c:	7bfb      	ldrb	r3, [r7, #15]
 800520e:	3301      	adds	r3, #1
 8005210:	73fb      	strb	r3, [r7, #15]
    buf++;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	3301      	adds	r3, #1
 8005216:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1f5      	bne.n	800520c <USBD_GetLen+0xe>
  }

  return len;
 8005220:	7bfb      	ldrb	r3, [r7, #15]
}
 8005222:	4618      	mov	r0, r3
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	bc80      	pop	{r7}
 800522a:	4770      	bx	lr

0800522c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	4613      	mov	r3, r2
 8005238:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2202      	movs	r2, #2
 800523e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005242:	88fa      	ldrh	r2, [r7, #6]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005248:	88fa      	ldrh	r2, [r7, #6]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800524e:	88fb      	ldrh	r3, [r7, #6]
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	2100      	movs	r1, #0
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 fc57 	bl	8005b08 <USBD_LL_Transmit>

  return USBD_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	4613      	mov	r3, r2
 8005270:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005272:	88fb      	ldrh	r3, [r7, #6]
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	2100      	movs	r1, #0
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f000 fc45 	bl	8005b08 <USBD_LL_Transmit>

  return USBD_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	4613      	mov	r3, r2
 8005294:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2203      	movs	r2, #3
 800529a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800529e:	88fa      	ldrh	r2, [r7, #6]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80052a6:	88fa      	ldrh	r2, [r7, #6]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80052ae:	88fb      	ldrh	r3, [r7, #6]
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	2100      	movs	r1, #0
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f000 fc4a 	bl	8005b4e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	4613      	mov	r3, r2
 80052d0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80052d2:	88fb      	ldrh	r3, [r7, #6]
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	2100      	movs	r1, #0
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f000 fc38 	bl	8005b4e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2204      	movs	r2, #4
 80052f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80052f8:	2300      	movs	r3, #0
 80052fa:	2200      	movs	r2, #0
 80052fc:	2100      	movs	r1, #0
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 fc02 	bl	8005b08 <USBD_LL_Transmit>

  return USBD_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b082      	sub	sp, #8
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2205      	movs	r2, #5
 800531a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800531e:	2300      	movs	r3, #0
 8005320:	2200      	movs	r2, #0
 8005322:	2100      	movs	r1, #0
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 fc12 	bl	8005b4e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3708      	adds	r7, #8
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005338:	2200      	movs	r2, #0
 800533a:	4912      	ldr	r1, [pc, #72]	; (8005384 <MX_USB_DEVICE_Init+0x50>)
 800533c:	4812      	ldr	r0, [pc, #72]	; (8005388 <MX_USB_DEVICE_Init+0x54>)
 800533e:	f7fe ff6c 	bl	800421a <USBD_Init>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d001      	beq.n	800534c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005348:	f7fb f874 	bl	8000434 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800534c:	490f      	ldr	r1, [pc, #60]	; (800538c <MX_USB_DEVICE_Init+0x58>)
 800534e:	480e      	ldr	r0, [pc, #56]	; (8005388 <MX_USB_DEVICE_Init+0x54>)
 8005350:	f7fe ff8e 	bl	8004270 <USBD_RegisterClass>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800535a:	f7fb f86b 	bl	8000434 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800535e:	490c      	ldr	r1, [pc, #48]	; (8005390 <MX_USB_DEVICE_Init+0x5c>)
 8005360:	4809      	ldr	r0, [pc, #36]	; (8005388 <MX_USB_DEVICE_Init+0x54>)
 8005362:	f7fe febf 	bl	80040e4 <USBD_CDC_RegisterInterface>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800536c:	f7fb f862 	bl	8000434 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005370:	4805      	ldr	r0, [pc, #20]	; (8005388 <MX_USB_DEVICE_Init+0x54>)
 8005372:	f7fe ff96 	bl	80042a2 <USBD_Start>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800537c:	f7fb f85a 	bl	8000434 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005380:	bf00      	nop
 8005382:	bd80      	pop	{r7, pc}
 8005384:	2000012c 	.word	0x2000012c
 8005388:	2000051c 	.word	0x2000051c
 800538c:	20000018 	.word	0x20000018
 8005390:	2000011c 	.word	0x2000011c

08005394 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005398:	2200      	movs	r2, #0
 800539a:	4905      	ldr	r1, [pc, #20]	; (80053b0 <CDC_Init_FS+0x1c>)
 800539c:	4805      	ldr	r0, [pc, #20]	; (80053b4 <CDC_Init_FS+0x20>)
 800539e:	f7fe feb7 	bl	8004110 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80053a2:	4905      	ldr	r1, [pc, #20]	; (80053b8 <CDC_Init_FS+0x24>)
 80053a4:	4803      	ldr	r0, [pc, #12]	; (80053b4 <CDC_Init_FS+0x20>)
 80053a6:	f7fe fecc 	bl	8004142 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80053aa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	20000bc8 	.word	0x20000bc8
 80053b4:	2000051c 	.word	0x2000051c
 80053b8:	200007e0 	.word	0x200007e0

080053bc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80053c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bc80      	pop	{r7}
 80053c8:	4770      	bx	lr
	...

080053cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	4603      	mov	r3, r0
 80053d4:	6039      	str	r1, [r7, #0]
 80053d6:	71fb      	strb	r3, [r7, #7]
 80053d8:	4613      	mov	r3, r2
 80053da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80053dc:	79fb      	ldrb	r3, [r7, #7]
 80053de:	2b23      	cmp	r3, #35	; 0x23
 80053e0:	d84a      	bhi.n	8005478 <CDC_Control_FS+0xac>
 80053e2:	a201      	add	r2, pc, #4	; (adr r2, 80053e8 <CDC_Control_FS+0x1c>)
 80053e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e8:	08005479 	.word	0x08005479
 80053ec:	08005479 	.word	0x08005479
 80053f0:	08005479 	.word	0x08005479
 80053f4:	08005479 	.word	0x08005479
 80053f8:	08005479 	.word	0x08005479
 80053fc:	08005479 	.word	0x08005479
 8005400:	08005479 	.word	0x08005479
 8005404:	08005479 	.word	0x08005479
 8005408:	08005479 	.word	0x08005479
 800540c:	08005479 	.word	0x08005479
 8005410:	08005479 	.word	0x08005479
 8005414:	08005479 	.word	0x08005479
 8005418:	08005479 	.word	0x08005479
 800541c:	08005479 	.word	0x08005479
 8005420:	08005479 	.word	0x08005479
 8005424:	08005479 	.word	0x08005479
 8005428:	08005479 	.word	0x08005479
 800542c:	08005479 	.word	0x08005479
 8005430:	08005479 	.word	0x08005479
 8005434:	08005479 	.word	0x08005479
 8005438:	08005479 	.word	0x08005479
 800543c:	08005479 	.word	0x08005479
 8005440:	08005479 	.word	0x08005479
 8005444:	08005479 	.word	0x08005479
 8005448:	08005479 	.word	0x08005479
 800544c:	08005479 	.word	0x08005479
 8005450:	08005479 	.word	0x08005479
 8005454:	08005479 	.word	0x08005479
 8005458:	08005479 	.word	0x08005479
 800545c:	08005479 	.word	0x08005479
 8005460:	08005479 	.word	0x08005479
 8005464:	08005479 	.word	0x08005479
 8005468:	08005479 	.word	0x08005479
 800546c:	08005479 	.word	0x08005479
 8005470:	08005479 	.word	0x08005479
 8005474:	08005479 	.word	0x08005479
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005478:	bf00      	nop
  }

  return (USBD_OK);
 800547a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800547c:	4618      	mov	r0, r3
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	bc80      	pop	{r7}
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop

08005488 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005492:	6879      	ldr	r1, [r7, #4]
 8005494:	4805      	ldr	r0, [pc, #20]	; (80054ac <CDC_Receive_FS+0x24>)
 8005496:	f7fe fe54 	bl	8004142 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800549a:	4804      	ldr	r0, [pc, #16]	; (80054ac <CDC_Receive_FS+0x24>)
 800549c:	f7fe fe93 	bl	80041c6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80054a0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	2000051c 	.word	0x2000051c

080054b0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	460b      	mov	r3, r1
 80054ba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80054bc:	2300      	movs	r3, #0
 80054be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80054c0:	4b0d      	ldr	r3, [pc, #52]	; (80054f8 <CDC_Transmit_FS+0x48>)
 80054c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054c6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e00b      	b.n	80054ee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80054d6:	887b      	ldrh	r3, [r7, #2]
 80054d8:	461a      	mov	r2, r3
 80054da:	6879      	ldr	r1, [r7, #4]
 80054dc:	4806      	ldr	r0, [pc, #24]	; (80054f8 <CDC_Transmit_FS+0x48>)
 80054de:	f7fe fe17 	bl	8004110 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80054e2:	4805      	ldr	r0, [pc, #20]	; (80054f8 <CDC_Transmit_FS+0x48>)
 80054e4:	f7fe fe40 	bl	8004168 <USBD_CDC_TransmitPacket>
 80054e8:	4603      	mov	r3, r0
 80054ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80054ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	2000051c 	.word	0x2000051c

080054fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	4603      	mov	r3, r0
 8005504:	6039      	str	r1, [r7, #0]
 8005506:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	2212      	movs	r2, #18
 800550c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800550e:	4b03      	ldr	r3, [pc, #12]	; (800551c <USBD_FS_DeviceDescriptor+0x20>)
}
 8005510:	4618      	mov	r0, r3
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	bc80      	pop	{r7}
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	20000148 	.word	0x20000148

08005520 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	4603      	mov	r3, r0
 8005528:	6039      	str	r1, [r7, #0]
 800552a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	2204      	movs	r2, #4
 8005530:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005532:	4b03      	ldr	r3, [pc, #12]	; (8005540 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005534:	4618      	mov	r0, r3
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	bc80      	pop	{r7}
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	2000015c 	.word	0x2000015c

08005544 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	4603      	mov	r3, r0
 800554c:	6039      	str	r1, [r7, #0]
 800554e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005550:	79fb      	ldrb	r3, [r7, #7]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d105      	bne.n	8005562 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005556:	683a      	ldr	r2, [r7, #0]
 8005558:	4907      	ldr	r1, [pc, #28]	; (8005578 <USBD_FS_ProductStrDescriptor+0x34>)
 800555a:	4808      	ldr	r0, [pc, #32]	; (800557c <USBD_FS_ProductStrDescriptor+0x38>)
 800555c:	f7ff fe0d 	bl	800517a <USBD_GetString>
 8005560:	e004      	b.n	800556c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	4904      	ldr	r1, [pc, #16]	; (8005578 <USBD_FS_ProductStrDescriptor+0x34>)
 8005566:	4805      	ldr	r0, [pc, #20]	; (800557c <USBD_FS_ProductStrDescriptor+0x38>)
 8005568:	f7ff fe07 	bl	800517a <USBD_GetString>
  }
  return USBD_StrDesc;
 800556c:	4b02      	ldr	r3, [pc, #8]	; (8005578 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800556e:	4618      	mov	r0, r3
 8005570:	3708      	adds	r7, #8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	20000fb0 	.word	0x20000fb0
 800557c:	08006524 	.word	0x08006524

08005580 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	4603      	mov	r3, r0
 8005588:	6039      	str	r1, [r7, #0]
 800558a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800558c:	683a      	ldr	r2, [r7, #0]
 800558e:	4904      	ldr	r1, [pc, #16]	; (80055a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005590:	4804      	ldr	r0, [pc, #16]	; (80055a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005592:	f7ff fdf2 	bl	800517a <USBD_GetString>
  return USBD_StrDesc;
 8005596:	4b02      	ldr	r3, [pc, #8]	; (80055a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005598:	4618      	mov	r0, r3
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	20000fb0 	.word	0x20000fb0
 80055a4:	0800653c 	.word	0x0800653c

080055a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	4603      	mov	r3, r0
 80055b0:	6039      	str	r1, [r7, #0]
 80055b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	221a      	movs	r2, #26
 80055b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80055ba:	f000 f843 	bl	8005644 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80055be:	4b02      	ldr	r3, [pc, #8]	; (80055c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	20000160 	.word	0x20000160

080055cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	4603      	mov	r3, r0
 80055d4:	6039      	str	r1, [r7, #0]
 80055d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80055d8:	79fb      	ldrb	r3, [r7, #7]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d105      	bne.n	80055ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	4907      	ldr	r1, [pc, #28]	; (8005600 <USBD_FS_ConfigStrDescriptor+0x34>)
 80055e2:	4808      	ldr	r0, [pc, #32]	; (8005604 <USBD_FS_ConfigStrDescriptor+0x38>)
 80055e4:	f7ff fdc9 	bl	800517a <USBD_GetString>
 80055e8:	e004      	b.n	80055f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	4904      	ldr	r1, [pc, #16]	; (8005600 <USBD_FS_ConfigStrDescriptor+0x34>)
 80055ee:	4805      	ldr	r0, [pc, #20]	; (8005604 <USBD_FS_ConfigStrDescriptor+0x38>)
 80055f0:	f7ff fdc3 	bl	800517a <USBD_GetString>
  }
  return USBD_StrDesc;
 80055f4:	4b02      	ldr	r3, [pc, #8]	; (8005600 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3708      	adds	r7, #8
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	20000fb0 	.word	0x20000fb0
 8005604:	08006550 	.word	0x08006550

08005608 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	4603      	mov	r3, r0
 8005610:	6039      	str	r1, [r7, #0]
 8005612:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005614:	79fb      	ldrb	r3, [r7, #7]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d105      	bne.n	8005626 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	4907      	ldr	r1, [pc, #28]	; (800563c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800561e:	4808      	ldr	r0, [pc, #32]	; (8005640 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005620:	f7ff fdab 	bl	800517a <USBD_GetString>
 8005624:	e004      	b.n	8005630 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005626:	683a      	ldr	r2, [r7, #0]
 8005628:	4904      	ldr	r1, [pc, #16]	; (800563c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800562a:	4805      	ldr	r0, [pc, #20]	; (8005640 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800562c:	f7ff fda5 	bl	800517a <USBD_GetString>
  }
  return USBD_StrDesc;
 8005630:	4b02      	ldr	r3, [pc, #8]	; (800563c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005632:	4618      	mov	r0, r3
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	20000fb0 	.word	0x20000fb0
 8005640:	0800655c 	.word	0x0800655c

08005644 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800564a:	4b0f      	ldr	r3, [pc, #60]	; (8005688 <Get_SerialNum+0x44>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005650:	4b0e      	ldr	r3, [pc, #56]	; (800568c <Get_SerialNum+0x48>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005656:	4b0e      	ldr	r3, [pc, #56]	; (8005690 <Get_SerialNum+0x4c>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4413      	add	r3, r2
 8005662:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d009      	beq.n	800567e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800566a:	2208      	movs	r2, #8
 800566c:	4909      	ldr	r1, [pc, #36]	; (8005694 <Get_SerialNum+0x50>)
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f000 f814 	bl	800569c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005674:	2204      	movs	r2, #4
 8005676:	4908      	ldr	r1, [pc, #32]	; (8005698 <Get_SerialNum+0x54>)
 8005678:	68b8      	ldr	r0, [r7, #8]
 800567a:	f000 f80f 	bl	800569c <IntToUnicode>
  }
}
 800567e:	bf00      	nop
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	1ffff7e8 	.word	0x1ffff7e8
 800568c:	1ffff7ec 	.word	0x1ffff7ec
 8005690:	1ffff7f0 	.word	0x1ffff7f0
 8005694:	20000162 	.word	0x20000162
 8005698:	20000172 	.word	0x20000172

0800569c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800569c:	b480      	push	{r7}
 800569e:	b087      	sub	sp, #28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	4613      	mov	r3, r2
 80056a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80056aa:	2300      	movs	r3, #0
 80056ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80056ae:	2300      	movs	r3, #0
 80056b0:	75fb      	strb	r3, [r7, #23]
 80056b2:	e027      	b.n	8005704 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	0f1b      	lsrs	r3, r3, #28
 80056b8:	2b09      	cmp	r3, #9
 80056ba:	d80b      	bhi.n	80056d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	0f1b      	lsrs	r3, r3, #28
 80056c0:	b2da      	uxtb	r2, r3
 80056c2:	7dfb      	ldrb	r3, [r7, #23]
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	4619      	mov	r1, r3
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	440b      	add	r3, r1
 80056cc:	3230      	adds	r2, #48	; 0x30
 80056ce:	b2d2      	uxtb	r2, r2
 80056d0:	701a      	strb	r2, [r3, #0]
 80056d2:	e00a      	b.n	80056ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	0f1b      	lsrs	r3, r3, #28
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	7dfb      	ldrb	r3, [r7, #23]
 80056dc:	005b      	lsls	r3, r3, #1
 80056de:	4619      	mov	r1, r3
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	440b      	add	r3, r1
 80056e4:	3237      	adds	r2, #55	; 0x37
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	011b      	lsls	r3, r3, #4
 80056ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80056f0:	7dfb      	ldrb	r3, [r7, #23]
 80056f2:	005b      	lsls	r3, r3, #1
 80056f4:	3301      	adds	r3, #1
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	4413      	add	r3, r2
 80056fa:	2200      	movs	r2, #0
 80056fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80056fe:	7dfb      	ldrb	r3, [r7, #23]
 8005700:	3301      	adds	r3, #1
 8005702:	75fb      	strb	r3, [r7, #23]
 8005704:	7dfa      	ldrb	r2, [r7, #23]
 8005706:	79fb      	ldrb	r3, [r7, #7]
 8005708:	429a      	cmp	r2, r3
 800570a:	d3d3      	bcc.n	80056b4 <IntToUnicode+0x18>
  }
}
 800570c:	bf00      	nop
 800570e:	371c      	adds	r7, #28
 8005710:	46bd      	mov	sp, r7
 8005712:	bc80      	pop	{r7}
 8005714:	4770      	bx	lr
	...

08005718 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a0d      	ldr	r2, [pc, #52]	; (800575c <HAL_PCD_MspInit+0x44>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d113      	bne.n	8005752 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800572a:	4b0d      	ldr	r3, [pc, #52]	; (8005760 <HAL_PCD_MspInit+0x48>)
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	4a0c      	ldr	r2, [pc, #48]	; (8005760 <HAL_PCD_MspInit+0x48>)
 8005730:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005734:	61d3      	str	r3, [r2, #28]
 8005736:	4b0a      	ldr	r3, [pc, #40]	; (8005760 <HAL_PCD_MspInit+0x48>)
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005742:	2200      	movs	r2, #0
 8005744:	2100      	movs	r1, #0
 8005746:	2014      	movs	r0, #20
 8005748:	f7fb f93d 	bl	80009c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800574c:	2014      	movs	r0, #20
 800574e:	f7fb f956 	bl	80009fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8005752:	bf00      	nop
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	40005c00 	.word	0x40005c00
 8005760:	40021000 	.word	0x40021000

08005764 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8005778:	4619      	mov	r1, r3
 800577a:	4610      	mov	r0, r2
 800577c:	f7fe fdd9 	bl	8004332 <USBD_LL_SetupStage>
}
 8005780:	bf00      	nop
 8005782:	3708      	adds	r7, #8
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	460b      	mov	r3, r1
 8005792:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800579a:	78fb      	ldrb	r3, [r7, #3]
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	015b      	lsls	r3, r3, #5
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	78fb      	ldrb	r3, [r7, #3]
 80057aa:	4619      	mov	r1, r3
 80057ac:	f7fe fe0c 	bl	80043c8 <USBD_LL_DataOutStage>
}
 80057b0:	bf00      	nop
 80057b2:	3708      	adds	r7, #8
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	460b      	mov	r3, r1
 80057c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80057ca:	78fb      	ldrb	r3, [r7, #3]
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	015b      	lsls	r3, r3, #5
 80057d0:	4413      	add	r3, r2
 80057d2:	333c      	adds	r3, #60	; 0x3c
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	78fb      	ldrb	r3, [r7, #3]
 80057d8:	4619      	mov	r1, r3
 80057da:	f7fe fe66 	bl	80044aa <USBD_LL_DataInStage>
}
 80057de:	bf00      	nop
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b082      	sub	sp, #8
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7fe ff76 	bl	80046e6 <USBD_LL_SOF>
}
 80057fa:	bf00      	nop
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8005802:	b580      	push	{r7, lr}
 8005804:	b084      	sub	sp, #16
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800580a:	2301      	movs	r3, #1
 800580c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	2b02      	cmp	r3, #2
 8005814:	d001      	beq.n	800581a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8005816:	f7fa fe0d 	bl	8000434 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005820:	7bfa      	ldrb	r2, [r7, #15]
 8005822:	4611      	mov	r1, r2
 8005824:	4618      	mov	r0, r3
 8005826:	f7fe ff26 	bl	8004676 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005830:	4618      	mov	r0, r3
 8005832:	f7fe fedf 	bl	80045f4 <USBD_LL_Reset>
}
 8005836:	bf00      	nop
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
	...

08005840 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800584e:	4618      	mov	r0, r3
 8005850:	f7fe ff20 	bl	8004694 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d005      	beq.n	8005868 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800585c:	4b04      	ldr	r3, [pc, #16]	; (8005870 <HAL_PCD_SuspendCallback+0x30>)
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	4a03      	ldr	r2, [pc, #12]	; (8005870 <HAL_PCD_SuspendCallback+0x30>)
 8005862:	f043 0306 	orr.w	r3, r3, #6
 8005866:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005868:	bf00      	nop
 800586a:	3708      	adds	r7, #8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	e000ed00 	.word	0xe000ed00

08005874 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005882:	4618      	mov	r0, r3
 8005884:	f7fe ff1a 	bl	80046bc <USBD_LL_Resume>
}
 8005888:	bf00      	nop
 800588a:	3708      	adds	r7, #8
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8005898:	4a28      	ldr	r2, [pc, #160]	; (800593c <USBD_LL_Init+0xac>)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a26      	ldr	r2, [pc, #152]	; (800593c <USBD_LL_Init+0xac>)
 80058a4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80058a8:	4b24      	ldr	r3, [pc, #144]	; (800593c <USBD_LL_Init+0xac>)
 80058aa:	4a25      	ldr	r2, [pc, #148]	; (8005940 <USBD_LL_Init+0xb0>)
 80058ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80058ae:	4b23      	ldr	r3, [pc, #140]	; (800593c <USBD_LL_Init+0xac>)
 80058b0:	2208      	movs	r2, #8
 80058b2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80058b4:	4b21      	ldr	r3, [pc, #132]	; (800593c <USBD_LL_Init+0xac>)
 80058b6:	2202      	movs	r2, #2
 80058b8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80058ba:	4b20      	ldr	r3, [pc, #128]	; (800593c <USBD_LL_Init+0xac>)
 80058bc:	2200      	movs	r2, #0
 80058be:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80058c0:	4b1e      	ldr	r3, [pc, #120]	; (800593c <USBD_LL_Init+0xac>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80058c6:	4b1d      	ldr	r3, [pc, #116]	; (800593c <USBD_LL_Init+0xac>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80058cc:	481b      	ldr	r0, [pc, #108]	; (800593c <USBD_LL_Init+0xac>)
 80058ce:	f7fb fcdc 	bl	800128a <HAL_PCD_Init>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d001      	beq.n	80058dc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80058d8:	f7fa fdac 	bl	8000434 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80058e2:	2318      	movs	r3, #24
 80058e4:	2200      	movs	r2, #0
 80058e6:	2100      	movs	r1, #0
 80058e8:	f7fc fb74 	bl	8001fd4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80058f2:	2358      	movs	r3, #88	; 0x58
 80058f4:	2200      	movs	r2, #0
 80058f6:	2180      	movs	r1, #128	; 0x80
 80058f8:	f7fc fb6c 	bl	8001fd4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005902:	23c0      	movs	r3, #192	; 0xc0
 8005904:	2200      	movs	r2, #0
 8005906:	2181      	movs	r1, #129	; 0x81
 8005908:	f7fc fb64 	bl	8001fd4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005912:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005916:	2200      	movs	r2, #0
 8005918:	2101      	movs	r1, #1
 800591a:	f7fc fb5b 	bl	8001fd4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005924:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005928:	2200      	movs	r2, #0
 800592a:	2182      	movs	r1, #130	; 0x82
 800592c:	f7fc fb52 	bl	8001fd4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	200011b0 	.word	0x200011b0
 8005940:	40005c00 	.word	0x40005c00

08005944 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800594c:	2300      	movs	r3, #0
 800594e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005950:	2300      	movs	r3, #0
 8005952:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800595a:	4618      	mov	r0, r3
 800595c:	f7fb fd76 	bl	800144c <HAL_PCD_Start>
 8005960:	4603      	mov	r3, r0
 8005962:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005964:	7bfb      	ldrb	r3, [r7, #15]
 8005966:	4618      	mov	r0, r3
 8005968:	f000 f948 	bl	8005bfc <USBD_Get_USB_Status>
 800596c:	4603      	mov	r3, r0
 800596e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005970:	7bbb      	ldrb	r3, [r7, #14]
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b084      	sub	sp, #16
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
 8005982:	4608      	mov	r0, r1
 8005984:	4611      	mov	r1, r2
 8005986:	461a      	mov	r2, r3
 8005988:	4603      	mov	r3, r0
 800598a:	70fb      	strb	r3, [r7, #3]
 800598c:	460b      	mov	r3, r1
 800598e:	70bb      	strb	r3, [r7, #2]
 8005990:	4613      	mov	r3, r2
 8005992:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005994:	2300      	movs	r3, #0
 8005996:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005998:	2300      	movs	r3, #0
 800599a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80059a2:	78bb      	ldrb	r3, [r7, #2]
 80059a4:	883a      	ldrh	r2, [r7, #0]
 80059a6:	78f9      	ldrb	r1, [r7, #3]
 80059a8:	f7fb fea9 	bl	80016fe <HAL_PCD_EP_Open>
 80059ac:	4603      	mov	r3, r0
 80059ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 f922 	bl	8005bfc <USBD_Get_USB_Status>
 80059b8:	4603      	mov	r3, r0
 80059ba:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80059bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b084      	sub	sp, #16
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
 80059ce:	460b      	mov	r3, r1
 80059d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80059d6:	2300      	movs	r3, #0
 80059d8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059e0:	78fa      	ldrb	r2, [r7, #3]
 80059e2:	4611      	mov	r1, r2
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7fb feea 	bl	80017be <HAL_PCD_EP_Close>
 80059ea:	4603      	mov	r3, r0
 80059ec:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 80059ee:	7bfb      	ldrb	r3, [r7, #15]
 80059f0:	4618      	mov	r0, r3
 80059f2:	f000 f903 	bl	8005bfc <USBD_Get_USB_Status>
 80059f6:	4603      	mov	r3, r0
 80059f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 80059fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005a10:	2300      	movs	r3, #0
 8005a12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005a14:	2300      	movs	r3, #0
 8005a16:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a1e:	78fa      	ldrb	r2, [r7, #3]
 8005a20:	4611      	mov	r1, r2
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fb ff94 	bl	8001950 <HAL_PCD_EP_SetStall>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005a2c:	7bfb      	ldrb	r3, [r7, #15]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 f8e4 	bl	8005bfc <USBD_Get_USB_Status>
 8005a34:	4603      	mov	r3, r0
 8005a36:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005a38:	7bbb      	ldrb	r3, [r7, #14]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b084      	sub	sp, #16
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005a52:	2300      	movs	r3, #0
 8005a54:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a5c:	78fa      	ldrb	r2, [r7, #3]
 8005a5e:	4611      	mov	r1, r2
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7fb ffcf 	bl	8001a04 <HAL_PCD_EP_ClrStall>
 8005a66:	4603      	mov	r3, r0
 8005a68:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005a6a:	7bfb      	ldrb	r3, [r7, #15]
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f000 f8c5 	bl	8005bfc <USBD_Get_USB_Status>
 8005a72:	4603      	mov	r3, r0
 8005a74:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8005a76:	7bbb      	ldrb	r3, [r7, #14]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a92:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8005a94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	da08      	bge.n	8005aae <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005a9c:	78fb      	ldrb	r3, [r7, #3]
 8005a9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	015b      	lsls	r3, r3, #5
 8005aa6:	4413      	add	r3, r2
 8005aa8:	332a      	adds	r3, #42	; 0x2a
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	e008      	b.n	8005ac0 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005aae:	78fb      	ldrb	r3, [r7, #3]
 8005ab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	015b      	lsls	r3, r3, #5
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8005abe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bc80      	pop	{r7}
 8005ac8:	4770      	bx	lr

08005aca <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b084      	sub	sp, #16
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ae4:	78fa      	ldrb	r2, [r7, #3]
 8005ae6:	4611      	mov	r1, r2
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7fb fde3 	bl	80016b4 <HAL_PCD_SetAddress>
 8005aee:	4603      	mov	r3, r0
 8005af0:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005af2:	7bfb      	ldrb	r3, [r7, #15]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f000 f881 	bl	8005bfc <USBD_Get_USB_Status>
 8005afa:	4603      	mov	r3, r0
 8005afc:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005afe:	7bbb      	ldrb	r3, [r7, #14]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	607a      	str	r2, [r7, #4]
 8005b12:	461a      	mov	r2, r3
 8005b14:	460b      	mov	r3, r1
 8005b16:	72fb      	strb	r3, [r7, #11]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005b20:	2300      	movs	r3, #0
 8005b22:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005b2a:	893b      	ldrh	r3, [r7, #8]
 8005b2c:	7af9      	ldrb	r1, [r7, #11]
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	f7fb fed5 	bl	80018de <HAL_PCD_EP_Transmit>
 8005b34:	4603      	mov	r3, r0
 8005b36:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005b38:	7dfb      	ldrb	r3, [r7, #23]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 f85e 	bl	8005bfc <USBD_Get_USB_Status>
 8005b40:	4603      	mov	r3, r0
 8005b42:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8005b44:	7dbb      	ldrb	r3, [r7, #22]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3718      	adds	r7, #24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b086      	sub	sp, #24
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	60f8      	str	r0, [r7, #12]
 8005b56:	607a      	str	r2, [r7, #4]
 8005b58:	461a      	mov	r2, r3
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	72fb      	strb	r3, [r7, #11]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005b62:	2300      	movs	r3, #0
 8005b64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005b66:	2300      	movs	r3, #0
 8005b68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005b70:	893b      	ldrh	r3, [r7, #8]
 8005b72:	7af9      	ldrb	r1, [r7, #11]
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	f7fb fe64 	bl	8001842 <HAL_PCD_EP_Receive>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005b7e:	7dfb      	ldrb	r3, [r7, #23]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f000 f83b 	bl	8005bfc <USBD_Get_USB_Status>
 8005b86:	4603      	mov	r3, r0
 8005b88:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8005b8a:	7dbb      	ldrb	r3, [r7, #22]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3718      	adds	r7, #24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ba6:	78fa      	ldrb	r2, [r7, #3]
 8005ba8:	4611      	mov	r1, r2
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7fb fe83 	bl	80018b6 <HAL_PCD_EP_GetRxCount>
 8005bb0:	4603      	mov	r3, r0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
	...

08005bbc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8005bc4:	4b02      	ldr	r3, [pc, #8]	; (8005bd0 <USBD_static_malloc+0x14>)
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bc80      	pop	{r7}
 8005bce:	4770      	bx	lr
 8005bd0:	20000204 	.word	0x20000204

08005bd4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]

}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bc80      	pop	{r7}
 8005be4:	4770      	bx	lr

08005be6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005be6:	b480      	push	{r7}
 8005be8:	b083      	sub	sp, #12
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	460b      	mov	r3, r1
 8005bf0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8005bf2:	bf00      	nop
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bc80      	pop	{r7}
 8005bfa:	4770      	bx	lr

08005bfc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	4603      	mov	r3, r0
 8005c04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005c0a:	79fb      	ldrb	r3, [r7, #7]
 8005c0c:	2b03      	cmp	r3, #3
 8005c0e:	d817      	bhi.n	8005c40 <USBD_Get_USB_Status+0x44>
 8005c10:	a201      	add	r2, pc, #4	; (adr r2, 8005c18 <USBD_Get_USB_Status+0x1c>)
 8005c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c16:	bf00      	nop
 8005c18:	08005c29 	.word	0x08005c29
 8005c1c:	08005c2f 	.word	0x08005c2f
 8005c20:	08005c35 	.word	0x08005c35
 8005c24:	08005c3b 	.word	0x08005c3b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	73fb      	strb	r3, [r7, #15]
    break;
 8005c2c:	e00b      	b.n	8005c46 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005c2e:	2302      	movs	r3, #2
 8005c30:	73fb      	strb	r3, [r7, #15]
    break;
 8005c32:	e008      	b.n	8005c46 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005c34:	2301      	movs	r3, #1
 8005c36:	73fb      	strb	r3, [r7, #15]
    break;
 8005c38:	e005      	b.n	8005c46 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005c3a:	2302      	movs	r3, #2
 8005c3c:	73fb      	strb	r3, [r7, #15]
    break;
 8005c3e:	e002      	b.n	8005c46 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8005c40:	2302      	movs	r3, #2
 8005c42:	73fb      	strb	r3, [r7, #15]
    break;
 8005c44:	bf00      	nop
  }
  return usb_status;
 8005c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3714      	adds	r7, #20
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bc80      	pop	{r7}
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop

08005c54 <__errno>:
 8005c54:	4b01      	ldr	r3, [pc, #4]	; (8005c5c <__errno+0x8>)
 8005c56:	6818      	ldr	r0, [r3, #0]
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	2000017c 	.word	0x2000017c

08005c60 <__libc_init_array>:
 8005c60:	b570      	push	{r4, r5, r6, lr}
 8005c62:	2500      	movs	r5, #0
 8005c64:	4e0c      	ldr	r6, [pc, #48]	; (8005c98 <__libc_init_array+0x38>)
 8005c66:	4c0d      	ldr	r4, [pc, #52]	; (8005c9c <__libc_init_array+0x3c>)
 8005c68:	1ba4      	subs	r4, r4, r6
 8005c6a:	10a4      	asrs	r4, r4, #2
 8005c6c:	42a5      	cmp	r5, r4
 8005c6e:	d109      	bne.n	8005c84 <__libc_init_array+0x24>
 8005c70:	f000 fc34 	bl	80064dc <_init>
 8005c74:	2500      	movs	r5, #0
 8005c76:	4e0a      	ldr	r6, [pc, #40]	; (8005ca0 <__libc_init_array+0x40>)
 8005c78:	4c0a      	ldr	r4, [pc, #40]	; (8005ca4 <__libc_init_array+0x44>)
 8005c7a:	1ba4      	subs	r4, r4, r6
 8005c7c:	10a4      	asrs	r4, r4, #2
 8005c7e:	42a5      	cmp	r5, r4
 8005c80:	d105      	bne.n	8005c8e <__libc_init_array+0x2e>
 8005c82:	bd70      	pop	{r4, r5, r6, pc}
 8005c84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c88:	4798      	blx	r3
 8005c8a:	3501      	adds	r5, #1
 8005c8c:	e7ee      	b.n	8005c6c <__libc_init_array+0xc>
 8005c8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c92:	4798      	blx	r3
 8005c94:	3501      	adds	r5, #1
 8005c96:	e7f2      	b.n	8005c7e <__libc_init_array+0x1e>
 8005c98:	080065b8 	.word	0x080065b8
 8005c9c:	080065b8 	.word	0x080065b8
 8005ca0:	080065b8 	.word	0x080065b8
 8005ca4:	080065bc 	.word	0x080065bc

08005ca8 <memset>:
 8005ca8:	4603      	mov	r3, r0
 8005caa:	4402      	add	r2, r0
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d100      	bne.n	8005cb2 <memset+0xa>
 8005cb0:	4770      	bx	lr
 8005cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8005cb6:	e7f9      	b.n	8005cac <memset+0x4>

08005cb8 <siprintf>:
 8005cb8:	b40e      	push	{r1, r2, r3}
 8005cba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005cbe:	b500      	push	{lr}
 8005cc0:	b09c      	sub	sp, #112	; 0x70
 8005cc2:	ab1d      	add	r3, sp, #116	; 0x74
 8005cc4:	9002      	str	r0, [sp, #8]
 8005cc6:	9006      	str	r0, [sp, #24]
 8005cc8:	9107      	str	r1, [sp, #28]
 8005cca:	9104      	str	r1, [sp, #16]
 8005ccc:	4808      	ldr	r0, [pc, #32]	; (8005cf0 <siprintf+0x38>)
 8005cce:	4909      	ldr	r1, [pc, #36]	; (8005cf4 <siprintf+0x3c>)
 8005cd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cd4:	9105      	str	r1, [sp, #20]
 8005cd6:	6800      	ldr	r0, [r0, #0]
 8005cd8:	a902      	add	r1, sp, #8
 8005cda:	9301      	str	r3, [sp, #4]
 8005cdc:	f000 f866 	bl	8005dac <_svfiprintf_r>
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	9b02      	ldr	r3, [sp, #8]
 8005ce4:	701a      	strb	r2, [r3, #0]
 8005ce6:	b01c      	add	sp, #112	; 0x70
 8005ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cec:	b003      	add	sp, #12
 8005cee:	4770      	bx	lr
 8005cf0:	2000017c 	.word	0x2000017c
 8005cf4:	ffff0208 	.word	0xffff0208

08005cf8 <__ssputs_r>:
 8005cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cfc:	688e      	ldr	r6, [r1, #8]
 8005cfe:	4682      	mov	sl, r0
 8005d00:	429e      	cmp	r6, r3
 8005d02:	460c      	mov	r4, r1
 8005d04:	4690      	mov	r8, r2
 8005d06:	4699      	mov	r9, r3
 8005d08:	d837      	bhi.n	8005d7a <__ssputs_r+0x82>
 8005d0a:	898a      	ldrh	r2, [r1, #12]
 8005d0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d10:	d031      	beq.n	8005d76 <__ssputs_r+0x7e>
 8005d12:	2302      	movs	r3, #2
 8005d14:	6825      	ldr	r5, [r4, #0]
 8005d16:	6909      	ldr	r1, [r1, #16]
 8005d18:	1a6f      	subs	r7, r5, r1
 8005d1a:	6965      	ldr	r5, [r4, #20]
 8005d1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d20:	fb95 f5f3 	sdiv	r5, r5, r3
 8005d24:	f109 0301 	add.w	r3, r9, #1
 8005d28:	443b      	add	r3, r7
 8005d2a:	429d      	cmp	r5, r3
 8005d2c:	bf38      	it	cc
 8005d2e:	461d      	movcc	r5, r3
 8005d30:	0553      	lsls	r3, r2, #21
 8005d32:	d530      	bpl.n	8005d96 <__ssputs_r+0x9e>
 8005d34:	4629      	mov	r1, r5
 8005d36:	f000 fb37 	bl	80063a8 <_malloc_r>
 8005d3a:	4606      	mov	r6, r0
 8005d3c:	b950      	cbnz	r0, 8005d54 <__ssputs_r+0x5c>
 8005d3e:	230c      	movs	r3, #12
 8005d40:	f04f 30ff 	mov.w	r0, #4294967295
 8005d44:	f8ca 3000 	str.w	r3, [sl]
 8005d48:	89a3      	ldrh	r3, [r4, #12]
 8005d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d4e:	81a3      	strh	r3, [r4, #12]
 8005d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d54:	463a      	mov	r2, r7
 8005d56:	6921      	ldr	r1, [r4, #16]
 8005d58:	f000 fab6 	bl	80062c8 <memcpy>
 8005d5c:	89a3      	ldrh	r3, [r4, #12]
 8005d5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d66:	81a3      	strh	r3, [r4, #12]
 8005d68:	6126      	str	r6, [r4, #16]
 8005d6a:	443e      	add	r6, r7
 8005d6c:	6026      	str	r6, [r4, #0]
 8005d6e:	464e      	mov	r6, r9
 8005d70:	6165      	str	r5, [r4, #20]
 8005d72:	1bed      	subs	r5, r5, r7
 8005d74:	60a5      	str	r5, [r4, #8]
 8005d76:	454e      	cmp	r6, r9
 8005d78:	d900      	bls.n	8005d7c <__ssputs_r+0x84>
 8005d7a:	464e      	mov	r6, r9
 8005d7c:	4632      	mov	r2, r6
 8005d7e:	4641      	mov	r1, r8
 8005d80:	6820      	ldr	r0, [r4, #0]
 8005d82:	f000 faac 	bl	80062de <memmove>
 8005d86:	68a3      	ldr	r3, [r4, #8]
 8005d88:	2000      	movs	r0, #0
 8005d8a:	1b9b      	subs	r3, r3, r6
 8005d8c:	60a3      	str	r3, [r4, #8]
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	441e      	add	r6, r3
 8005d92:	6026      	str	r6, [r4, #0]
 8005d94:	e7dc      	b.n	8005d50 <__ssputs_r+0x58>
 8005d96:	462a      	mov	r2, r5
 8005d98:	f000 fb60 	bl	800645c <_realloc_r>
 8005d9c:	4606      	mov	r6, r0
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	d1e2      	bne.n	8005d68 <__ssputs_r+0x70>
 8005da2:	6921      	ldr	r1, [r4, #16]
 8005da4:	4650      	mov	r0, sl
 8005da6:	f000 fab3 	bl	8006310 <_free_r>
 8005daa:	e7c8      	b.n	8005d3e <__ssputs_r+0x46>

08005dac <_svfiprintf_r>:
 8005dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db0:	461d      	mov	r5, r3
 8005db2:	898b      	ldrh	r3, [r1, #12]
 8005db4:	b09d      	sub	sp, #116	; 0x74
 8005db6:	061f      	lsls	r7, r3, #24
 8005db8:	4680      	mov	r8, r0
 8005dba:	460c      	mov	r4, r1
 8005dbc:	4616      	mov	r6, r2
 8005dbe:	d50f      	bpl.n	8005de0 <_svfiprintf_r+0x34>
 8005dc0:	690b      	ldr	r3, [r1, #16]
 8005dc2:	b96b      	cbnz	r3, 8005de0 <_svfiprintf_r+0x34>
 8005dc4:	2140      	movs	r1, #64	; 0x40
 8005dc6:	f000 faef 	bl	80063a8 <_malloc_r>
 8005dca:	6020      	str	r0, [r4, #0]
 8005dcc:	6120      	str	r0, [r4, #16]
 8005dce:	b928      	cbnz	r0, 8005ddc <_svfiprintf_r+0x30>
 8005dd0:	230c      	movs	r3, #12
 8005dd2:	f8c8 3000 	str.w	r3, [r8]
 8005dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8005dda:	e0c8      	b.n	8005f6e <_svfiprintf_r+0x1c2>
 8005ddc:	2340      	movs	r3, #64	; 0x40
 8005dde:	6163      	str	r3, [r4, #20]
 8005de0:	2300      	movs	r3, #0
 8005de2:	9309      	str	r3, [sp, #36]	; 0x24
 8005de4:	2320      	movs	r3, #32
 8005de6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005dea:	2330      	movs	r3, #48	; 0x30
 8005dec:	f04f 0b01 	mov.w	fp, #1
 8005df0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005df4:	9503      	str	r5, [sp, #12]
 8005df6:	4637      	mov	r7, r6
 8005df8:	463d      	mov	r5, r7
 8005dfa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005dfe:	b10b      	cbz	r3, 8005e04 <_svfiprintf_r+0x58>
 8005e00:	2b25      	cmp	r3, #37	; 0x25
 8005e02:	d13e      	bne.n	8005e82 <_svfiprintf_r+0xd6>
 8005e04:	ebb7 0a06 	subs.w	sl, r7, r6
 8005e08:	d00b      	beq.n	8005e22 <_svfiprintf_r+0x76>
 8005e0a:	4653      	mov	r3, sl
 8005e0c:	4632      	mov	r2, r6
 8005e0e:	4621      	mov	r1, r4
 8005e10:	4640      	mov	r0, r8
 8005e12:	f7ff ff71 	bl	8005cf8 <__ssputs_r>
 8005e16:	3001      	adds	r0, #1
 8005e18:	f000 80a4 	beq.w	8005f64 <_svfiprintf_r+0x1b8>
 8005e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e1e:	4453      	add	r3, sl
 8005e20:	9309      	str	r3, [sp, #36]	; 0x24
 8005e22:	783b      	ldrb	r3, [r7, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 809d 	beq.w	8005f64 <_svfiprintf_r+0x1b8>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e34:	9304      	str	r3, [sp, #16]
 8005e36:	9307      	str	r3, [sp, #28]
 8005e38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e3c:	931a      	str	r3, [sp, #104]	; 0x68
 8005e3e:	462f      	mov	r7, r5
 8005e40:	2205      	movs	r2, #5
 8005e42:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005e46:	4850      	ldr	r0, [pc, #320]	; (8005f88 <_svfiprintf_r+0x1dc>)
 8005e48:	f000 fa30 	bl	80062ac <memchr>
 8005e4c:	9b04      	ldr	r3, [sp, #16]
 8005e4e:	b9d0      	cbnz	r0, 8005e86 <_svfiprintf_r+0xda>
 8005e50:	06d9      	lsls	r1, r3, #27
 8005e52:	bf44      	itt	mi
 8005e54:	2220      	movmi	r2, #32
 8005e56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005e5a:	071a      	lsls	r2, r3, #28
 8005e5c:	bf44      	itt	mi
 8005e5e:	222b      	movmi	r2, #43	; 0x2b
 8005e60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005e64:	782a      	ldrb	r2, [r5, #0]
 8005e66:	2a2a      	cmp	r2, #42	; 0x2a
 8005e68:	d015      	beq.n	8005e96 <_svfiprintf_r+0xea>
 8005e6a:	462f      	mov	r7, r5
 8005e6c:	2000      	movs	r0, #0
 8005e6e:	250a      	movs	r5, #10
 8005e70:	9a07      	ldr	r2, [sp, #28]
 8005e72:	4639      	mov	r1, r7
 8005e74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e78:	3b30      	subs	r3, #48	; 0x30
 8005e7a:	2b09      	cmp	r3, #9
 8005e7c:	d94d      	bls.n	8005f1a <_svfiprintf_r+0x16e>
 8005e7e:	b1b8      	cbz	r0, 8005eb0 <_svfiprintf_r+0x104>
 8005e80:	e00f      	b.n	8005ea2 <_svfiprintf_r+0xf6>
 8005e82:	462f      	mov	r7, r5
 8005e84:	e7b8      	b.n	8005df8 <_svfiprintf_r+0x4c>
 8005e86:	4a40      	ldr	r2, [pc, #256]	; (8005f88 <_svfiprintf_r+0x1dc>)
 8005e88:	463d      	mov	r5, r7
 8005e8a:	1a80      	subs	r0, r0, r2
 8005e8c:	fa0b f000 	lsl.w	r0, fp, r0
 8005e90:	4318      	orrs	r0, r3
 8005e92:	9004      	str	r0, [sp, #16]
 8005e94:	e7d3      	b.n	8005e3e <_svfiprintf_r+0x92>
 8005e96:	9a03      	ldr	r2, [sp, #12]
 8005e98:	1d11      	adds	r1, r2, #4
 8005e9a:	6812      	ldr	r2, [r2, #0]
 8005e9c:	9103      	str	r1, [sp, #12]
 8005e9e:	2a00      	cmp	r2, #0
 8005ea0:	db01      	blt.n	8005ea6 <_svfiprintf_r+0xfa>
 8005ea2:	9207      	str	r2, [sp, #28]
 8005ea4:	e004      	b.n	8005eb0 <_svfiprintf_r+0x104>
 8005ea6:	4252      	negs	r2, r2
 8005ea8:	f043 0302 	orr.w	r3, r3, #2
 8005eac:	9207      	str	r2, [sp, #28]
 8005eae:	9304      	str	r3, [sp, #16]
 8005eb0:	783b      	ldrb	r3, [r7, #0]
 8005eb2:	2b2e      	cmp	r3, #46	; 0x2e
 8005eb4:	d10c      	bne.n	8005ed0 <_svfiprintf_r+0x124>
 8005eb6:	787b      	ldrb	r3, [r7, #1]
 8005eb8:	2b2a      	cmp	r3, #42	; 0x2a
 8005eba:	d133      	bne.n	8005f24 <_svfiprintf_r+0x178>
 8005ebc:	9b03      	ldr	r3, [sp, #12]
 8005ebe:	3702      	adds	r7, #2
 8005ec0:	1d1a      	adds	r2, r3, #4
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	9203      	str	r2, [sp, #12]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	bfb8      	it	lt
 8005eca:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ece:	9305      	str	r3, [sp, #20]
 8005ed0:	4d2e      	ldr	r5, [pc, #184]	; (8005f8c <_svfiprintf_r+0x1e0>)
 8005ed2:	2203      	movs	r2, #3
 8005ed4:	7839      	ldrb	r1, [r7, #0]
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	f000 f9e8 	bl	80062ac <memchr>
 8005edc:	b138      	cbz	r0, 8005eee <_svfiprintf_r+0x142>
 8005ede:	2340      	movs	r3, #64	; 0x40
 8005ee0:	1b40      	subs	r0, r0, r5
 8005ee2:	fa03 f000 	lsl.w	r0, r3, r0
 8005ee6:	9b04      	ldr	r3, [sp, #16]
 8005ee8:	3701      	adds	r7, #1
 8005eea:	4303      	orrs	r3, r0
 8005eec:	9304      	str	r3, [sp, #16]
 8005eee:	7839      	ldrb	r1, [r7, #0]
 8005ef0:	2206      	movs	r2, #6
 8005ef2:	4827      	ldr	r0, [pc, #156]	; (8005f90 <_svfiprintf_r+0x1e4>)
 8005ef4:	1c7e      	adds	r6, r7, #1
 8005ef6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005efa:	f000 f9d7 	bl	80062ac <memchr>
 8005efe:	2800      	cmp	r0, #0
 8005f00:	d038      	beq.n	8005f74 <_svfiprintf_r+0x1c8>
 8005f02:	4b24      	ldr	r3, [pc, #144]	; (8005f94 <_svfiprintf_r+0x1e8>)
 8005f04:	bb13      	cbnz	r3, 8005f4c <_svfiprintf_r+0x1a0>
 8005f06:	9b03      	ldr	r3, [sp, #12]
 8005f08:	3307      	adds	r3, #7
 8005f0a:	f023 0307 	bic.w	r3, r3, #7
 8005f0e:	3308      	adds	r3, #8
 8005f10:	9303      	str	r3, [sp, #12]
 8005f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f14:	444b      	add	r3, r9
 8005f16:	9309      	str	r3, [sp, #36]	; 0x24
 8005f18:	e76d      	b.n	8005df6 <_svfiprintf_r+0x4a>
 8005f1a:	fb05 3202 	mla	r2, r5, r2, r3
 8005f1e:	2001      	movs	r0, #1
 8005f20:	460f      	mov	r7, r1
 8005f22:	e7a6      	b.n	8005e72 <_svfiprintf_r+0xc6>
 8005f24:	2300      	movs	r3, #0
 8005f26:	250a      	movs	r5, #10
 8005f28:	4619      	mov	r1, r3
 8005f2a:	3701      	adds	r7, #1
 8005f2c:	9305      	str	r3, [sp, #20]
 8005f2e:	4638      	mov	r0, r7
 8005f30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f34:	3a30      	subs	r2, #48	; 0x30
 8005f36:	2a09      	cmp	r2, #9
 8005f38:	d903      	bls.n	8005f42 <_svfiprintf_r+0x196>
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d0c8      	beq.n	8005ed0 <_svfiprintf_r+0x124>
 8005f3e:	9105      	str	r1, [sp, #20]
 8005f40:	e7c6      	b.n	8005ed0 <_svfiprintf_r+0x124>
 8005f42:	fb05 2101 	mla	r1, r5, r1, r2
 8005f46:	2301      	movs	r3, #1
 8005f48:	4607      	mov	r7, r0
 8005f4a:	e7f0      	b.n	8005f2e <_svfiprintf_r+0x182>
 8005f4c:	ab03      	add	r3, sp, #12
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	4622      	mov	r2, r4
 8005f52:	4b11      	ldr	r3, [pc, #68]	; (8005f98 <_svfiprintf_r+0x1ec>)
 8005f54:	a904      	add	r1, sp, #16
 8005f56:	4640      	mov	r0, r8
 8005f58:	f3af 8000 	nop.w
 8005f5c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005f60:	4681      	mov	r9, r0
 8005f62:	d1d6      	bne.n	8005f12 <_svfiprintf_r+0x166>
 8005f64:	89a3      	ldrh	r3, [r4, #12]
 8005f66:	065b      	lsls	r3, r3, #25
 8005f68:	f53f af35 	bmi.w	8005dd6 <_svfiprintf_r+0x2a>
 8005f6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f6e:	b01d      	add	sp, #116	; 0x74
 8005f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f74:	ab03      	add	r3, sp, #12
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	4622      	mov	r2, r4
 8005f7a:	4b07      	ldr	r3, [pc, #28]	; (8005f98 <_svfiprintf_r+0x1ec>)
 8005f7c:	a904      	add	r1, sp, #16
 8005f7e:	4640      	mov	r0, r8
 8005f80:	f000 f882 	bl	8006088 <_printf_i>
 8005f84:	e7ea      	b.n	8005f5c <_svfiprintf_r+0x1b0>
 8005f86:	bf00      	nop
 8005f88:	08006584 	.word	0x08006584
 8005f8c:	0800658a 	.word	0x0800658a
 8005f90:	0800658e 	.word	0x0800658e
 8005f94:	00000000 	.word	0x00000000
 8005f98:	08005cf9 	.word	0x08005cf9

08005f9c <_printf_common>:
 8005f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fa0:	4691      	mov	r9, r2
 8005fa2:	461f      	mov	r7, r3
 8005fa4:	688a      	ldr	r2, [r1, #8]
 8005fa6:	690b      	ldr	r3, [r1, #16]
 8005fa8:	4606      	mov	r6, r0
 8005faa:	4293      	cmp	r3, r2
 8005fac:	bfb8      	it	lt
 8005fae:	4613      	movlt	r3, r2
 8005fb0:	f8c9 3000 	str.w	r3, [r9]
 8005fb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fb8:	460c      	mov	r4, r1
 8005fba:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fbe:	b112      	cbz	r2, 8005fc6 <_printf_common+0x2a>
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	f8c9 3000 	str.w	r3, [r9]
 8005fc6:	6823      	ldr	r3, [r4, #0]
 8005fc8:	0699      	lsls	r1, r3, #26
 8005fca:	bf42      	ittt	mi
 8005fcc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005fd0:	3302      	addmi	r3, #2
 8005fd2:	f8c9 3000 	strmi.w	r3, [r9]
 8005fd6:	6825      	ldr	r5, [r4, #0]
 8005fd8:	f015 0506 	ands.w	r5, r5, #6
 8005fdc:	d107      	bne.n	8005fee <_printf_common+0x52>
 8005fde:	f104 0a19 	add.w	sl, r4, #25
 8005fe2:	68e3      	ldr	r3, [r4, #12]
 8005fe4:	f8d9 2000 	ldr.w	r2, [r9]
 8005fe8:	1a9b      	subs	r3, r3, r2
 8005fea:	42ab      	cmp	r3, r5
 8005fec:	dc29      	bgt.n	8006042 <_printf_common+0xa6>
 8005fee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005ff2:	6822      	ldr	r2, [r4, #0]
 8005ff4:	3300      	adds	r3, #0
 8005ff6:	bf18      	it	ne
 8005ff8:	2301      	movne	r3, #1
 8005ffa:	0692      	lsls	r2, r2, #26
 8005ffc:	d42e      	bmi.n	800605c <_printf_common+0xc0>
 8005ffe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006002:	4639      	mov	r1, r7
 8006004:	4630      	mov	r0, r6
 8006006:	47c0      	blx	r8
 8006008:	3001      	adds	r0, #1
 800600a:	d021      	beq.n	8006050 <_printf_common+0xb4>
 800600c:	6823      	ldr	r3, [r4, #0]
 800600e:	68e5      	ldr	r5, [r4, #12]
 8006010:	f003 0306 	and.w	r3, r3, #6
 8006014:	2b04      	cmp	r3, #4
 8006016:	bf18      	it	ne
 8006018:	2500      	movne	r5, #0
 800601a:	f8d9 2000 	ldr.w	r2, [r9]
 800601e:	f04f 0900 	mov.w	r9, #0
 8006022:	bf08      	it	eq
 8006024:	1aad      	subeq	r5, r5, r2
 8006026:	68a3      	ldr	r3, [r4, #8]
 8006028:	6922      	ldr	r2, [r4, #16]
 800602a:	bf08      	it	eq
 800602c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006030:	4293      	cmp	r3, r2
 8006032:	bfc4      	itt	gt
 8006034:	1a9b      	subgt	r3, r3, r2
 8006036:	18ed      	addgt	r5, r5, r3
 8006038:	341a      	adds	r4, #26
 800603a:	454d      	cmp	r5, r9
 800603c:	d11a      	bne.n	8006074 <_printf_common+0xd8>
 800603e:	2000      	movs	r0, #0
 8006040:	e008      	b.n	8006054 <_printf_common+0xb8>
 8006042:	2301      	movs	r3, #1
 8006044:	4652      	mov	r2, sl
 8006046:	4639      	mov	r1, r7
 8006048:	4630      	mov	r0, r6
 800604a:	47c0      	blx	r8
 800604c:	3001      	adds	r0, #1
 800604e:	d103      	bne.n	8006058 <_printf_common+0xbc>
 8006050:	f04f 30ff 	mov.w	r0, #4294967295
 8006054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006058:	3501      	adds	r5, #1
 800605a:	e7c2      	b.n	8005fe2 <_printf_common+0x46>
 800605c:	2030      	movs	r0, #48	; 0x30
 800605e:	18e1      	adds	r1, r4, r3
 8006060:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006064:	1c5a      	adds	r2, r3, #1
 8006066:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800606a:	4422      	add	r2, r4
 800606c:	3302      	adds	r3, #2
 800606e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006072:	e7c4      	b.n	8005ffe <_printf_common+0x62>
 8006074:	2301      	movs	r3, #1
 8006076:	4622      	mov	r2, r4
 8006078:	4639      	mov	r1, r7
 800607a:	4630      	mov	r0, r6
 800607c:	47c0      	blx	r8
 800607e:	3001      	adds	r0, #1
 8006080:	d0e6      	beq.n	8006050 <_printf_common+0xb4>
 8006082:	f109 0901 	add.w	r9, r9, #1
 8006086:	e7d8      	b.n	800603a <_printf_common+0x9e>

08006088 <_printf_i>:
 8006088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800608c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006090:	460c      	mov	r4, r1
 8006092:	7e09      	ldrb	r1, [r1, #24]
 8006094:	b085      	sub	sp, #20
 8006096:	296e      	cmp	r1, #110	; 0x6e
 8006098:	4617      	mov	r7, r2
 800609a:	4606      	mov	r6, r0
 800609c:	4698      	mov	r8, r3
 800609e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060a0:	f000 80b3 	beq.w	800620a <_printf_i+0x182>
 80060a4:	d822      	bhi.n	80060ec <_printf_i+0x64>
 80060a6:	2963      	cmp	r1, #99	; 0x63
 80060a8:	d036      	beq.n	8006118 <_printf_i+0x90>
 80060aa:	d80a      	bhi.n	80060c2 <_printf_i+0x3a>
 80060ac:	2900      	cmp	r1, #0
 80060ae:	f000 80b9 	beq.w	8006224 <_printf_i+0x19c>
 80060b2:	2958      	cmp	r1, #88	; 0x58
 80060b4:	f000 8083 	beq.w	80061be <_printf_i+0x136>
 80060b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80060c0:	e032      	b.n	8006128 <_printf_i+0xa0>
 80060c2:	2964      	cmp	r1, #100	; 0x64
 80060c4:	d001      	beq.n	80060ca <_printf_i+0x42>
 80060c6:	2969      	cmp	r1, #105	; 0x69
 80060c8:	d1f6      	bne.n	80060b8 <_printf_i+0x30>
 80060ca:	6820      	ldr	r0, [r4, #0]
 80060cc:	6813      	ldr	r3, [r2, #0]
 80060ce:	0605      	lsls	r5, r0, #24
 80060d0:	f103 0104 	add.w	r1, r3, #4
 80060d4:	d52a      	bpl.n	800612c <_printf_i+0xa4>
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6011      	str	r1, [r2, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	da03      	bge.n	80060e6 <_printf_i+0x5e>
 80060de:	222d      	movs	r2, #45	; 0x2d
 80060e0:	425b      	negs	r3, r3
 80060e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80060e6:	486f      	ldr	r0, [pc, #444]	; (80062a4 <_printf_i+0x21c>)
 80060e8:	220a      	movs	r2, #10
 80060ea:	e039      	b.n	8006160 <_printf_i+0xd8>
 80060ec:	2973      	cmp	r1, #115	; 0x73
 80060ee:	f000 809d 	beq.w	800622c <_printf_i+0x1a4>
 80060f2:	d808      	bhi.n	8006106 <_printf_i+0x7e>
 80060f4:	296f      	cmp	r1, #111	; 0x6f
 80060f6:	d020      	beq.n	800613a <_printf_i+0xb2>
 80060f8:	2970      	cmp	r1, #112	; 0x70
 80060fa:	d1dd      	bne.n	80060b8 <_printf_i+0x30>
 80060fc:	6823      	ldr	r3, [r4, #0]
 80060fe:	f043 0320 	orr.w	r3, r3, #32
 8006102:	6023      	str	r3, [r4, #0]
 8006104:	e003      	b.n	800610e <_printf_i+0x86>
 8006106:	2975      	cmp	r1, #117	; 0x75
 8006108:	d017      	beq.n	800613a <_printf_i+0xb2>
 800610a:	2978      	cmp	r1, #120	; 0x78
 800610c:	d1d4      	bne.n	80060b8 <_printf_i+0x30>
 800610e:	2378      	movs	r3, #120	; 0x78
 8006110:	4865      	ldr	r0, [pc, #404]	; (80062a8 <_printf_i+0x220>)
 8006112:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006116:	e055      	b.n	80061c4 <_printf_i+0x13c>
 8006118:	6813      	ldr	r3, [r2, #0]
 800611a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800611e:	1d19      	adds	r1, r3, #4
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6011      	str	r1, [r2, #0]
 8006124:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006128:	2301      	movs	r3, #1
 800612a:	e08c      	b.n	8006246 <_printf_i+0x1be>
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006132:	6011      	str	r1, [r2, #0]
 8006134:	bf18      	it	ne
 8006136:	b21b      	sxthne	r3, r3
 8006138:	e7cf      	b.n	80060da <_printf_i+0x52>
 800613a:	6813      	ldr	r3, [r2, #0]
 800613c:	6825      	ldr	r5, [r4, #0]
 800613e:	1d18      	adds	r0, r3, #4
 8006140:	6010      	str	r0, [r2, #0]
 8006142:	0628      	lsls	r0, r5, #24
 8006144:	d501      	bpl.n	800614a <_printf_i+0xc2>
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	e002      	b.n	8006150 <_printf_i+0xc8>
 800614a:	0668      	lsls	r0, r5, #25
 800614c:	d5fb      	bpl.n	8006146 <_printf_i+0xbe>
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	296f      	cmp	r1, #111	; 0x6f
 8006152:	bf14      	ite	ne
 8006154:	220a      	movne	r2, #10
 8006156:	2208      	moveq	r2, #8
 8006158:	4852      	ldr	r0, [pc, #328]	; (80062a4 <_printf_i+0x21c>)
 800615a:	2100      	movs	r1, #0
 800615c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006160:	6865      	ldr	r5, [r4, #4]
 8006162:	2d00      	cmp	r5, #0
 8006164:	60a5      	str	r5, [r4, #8]
 8006166:	f2c0 8095 	blt.w	8006294 <_printf_i+0x20c>
 800616a:	6821      	ldr	r1, [r4, #0]
 800616c:	f021 0104 	bic.w	r1, r1, #4
 8006170:	6021      	str	r1, [r4, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d13d      	bne.n	80061f2 <_printf_i+0x16a>
 8006176:	2d00      	cmp	r5, #0
 8006178:	f040 808e 	bne.w	8006298 <_printf_i+0x210>
 800617c:	4665      	mov	r5, ip
 800617e:	2a08      	cmp	r2, #8
 8006180:	d10b      	bne.n	800619a <_printf_i+0x112>
 8006182:	6823      	ldr	r3, [r4, #0]
 8006184:	07db      	lsls	r3, r3, #31
 8006186:	d508      	bpl.n	800619a <_printf_i+0x112>
 8006188:	6923      	ldr	r3, [r4, #16]
 800618a:	6862      	ldr	r2, [r4, #4]
 800618c:	429a      	cmp	r2, r3
 800618e:	bfde      	ittt	le
 8006190:	2330      	movle	r3, #48	; 0x30
 8006192:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006196:	f105 35ff 	addle.w	r5, r5, #4294967295
 800619a:	ebac 0305 	sub.w	r3, ip, r5
 800619e:	6123      	str	r3, [r4, #16]
 80061a0:	f8cd 8000 	str.w	r8, [sp]
 80061a4:	463b      	mov	r3, r7
 80061a6:	aa03      	add	r2, sp, #12
 80061a8:	4621      	mov	r1, r4
 80061aa:	4630      	mov	r0, r6
 80061ac:	f7ff fef6 	bl	8005f9c <_printf_common>
 80061b0:	3001      	adds	r0, #1
 80061b2:	d14d      	bne.n	8006250 <_printf_i+0x1c8>
 80061b4:	f04f 30ff 	mov.w	r0, #4294967295
 80061b8:	b005      	add	sp, #20
 80061ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061be:	4839      	ldr	r0, [pc, #228]	; (80062a4 <_printf_i+0x21c>)
 80061c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80061c4:	6813      	ldr	r3, [r2, #0]
 80061c6:	6821      	ldr	r1, [r4, #0]
 80061c8:	1d1d      	adds	r5, r3, #4
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6015      	str	r5, [r2, #0]
 80061ce:	060a      	lsls	r2, r1, #24
 80061d0:	d50b      	bpl.n	80061ea <_printf_i+0x162>
 80061d2:	07ca      	lsls	r2, r1, #31
 80061d4:	bf44      	itt	mi
 80061d6:	f041 0120 	orrmi.w	r1, r1, #32
 80061da:	6021      	strmi	r1, [r4, #0]
 80061dc:	b91b      	cbnz	r3, 80061e6 <_printf_i+0x15e>
 80061de:	6822      	ldr	r2, [r4, #0]
 80061e0:	f022 0220 	bic.w	r2, r2, #32
 80061e4:	6022      	str	r2, [r4, #0]
 80061e6:	2210      	movs	r2, #16
 80061e8:	e7b7      	b.n	800615a <_printf_i+0xd2>
 80061ea:	064d      	lsls	r5, r1, #25
 80061ec:	bf48      	it	mi
 80061ee:	b29b      	uxthmi	r3, r3
 80061f0:	e7ef      	b.n	80061d2 <_printf_i+0x14a>
 80061f2:	4665      	mov	r5, ip
 80061f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80061f8:	fb02 3311 	mls	r3, r2, r1, r3
 80061fc:	5cc3      	ldrb	r3, [r0, r3]
 80061fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006202:	460b      	mov	r3, r1
 8006204:	2900      	cmp	r1, #0
 8006206:	d1f5      	bne.n	80061f4 <_printf_i+0x16c>
 8006208:	e7b9      	b.n	800617e <_printf_i+0xf6>
 800620a:	6813      	ldr	r3, [r2, #0]
 800620c:	6825      	ldr	r5, [r4, #0]
 800620e:	1d18      	adds	r0, r3, #4
 8006210:	6961      	ldr	r1, [r4, #20]
 8006212:	6010      	str	r0, [r2, #0]
 8006214:	0628      	lsls	r0, r5, #24
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	d501      	bpl.n	800621e <_printf_i+0x196>
 800621a:	6019      	str	r1, [r3, #0]
 800621c:	e002      	b.n	8006224 <_printf_i+0x19c>
 800621e:	066a      	lsls	r2, r5, #25
 8006220:	d5fb      	bpl.n	800621a <_printf_i+0x192>
 8006222:	8019      	strh	r1, [r3, #0]
 8006224:	2300      	movs	r3, #0
 8006226:	4665      	mov	r5, ip
 8006228:	6123      	str	r3, [r4, #16]
 800622a:	e7b9      	b.n	80061a0 <_printf_i+0x118>
 800622c:	6813      	ldr	r3, [r2, #0]
 800622e:	1d19      	adds	r1, r3, #4
 8006230:	6011      	str	r1, [r2, #0]
 8006232:	681d      	ldr	r5, [r3, #0]
 8006234:	6862      	ldr	r2, [r4, #4]
 8006236:	2100      	movs	r1, #0
 8006238:	4628      	mov	r0, r5
 800623a:	f000 f837 	bl	80062ac <memchr>
 800623e:	b108      	cbz	r0, 8006244 <_printf_i+0x1bc>
 8006240:	1b40      	subs	r0, r0, r5
 8006242:	6060      	str	r0, [r4, #4]
 8006244:	6863      	ldr	r3, [r4, #4]
 8006246:	6123      	str	r3, [r4, #16]
 8006248:	2300      	movs	r3, #0
 800624a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800624e:	e7a7      	b.n	80061a0 <_printf_i+0x118>
 8006250:	6923      	ldr	r3, [r4, #16]
 8006252:	462a      	mov	r2, r5
 8006254:	4639      	mov	r1, r7
 8006256:	4630      	mov	r0, r6
 8006258:	47c0      	blx	r8
 800625a:	3001      	adds	r0, #1
 800625c:	d0aa      	beq.n	80061b4 <_printf_i+0x12c>
 800625e:	6823      	ldr	r3, [r4, #0]
 8006260:	079b      	lsls	r3, r3, #30
 8006262:	d413      	bmi.n	800628c <_printf_i+0x204>
 8006264:	68e0      	ldr	r0, [r4, #12]
 8006266:	9b03      	ldr	r3, [sp, #12]
 8006268:	4298      	cmp	r0, r3
 800626a:	bfb8      	it	lt
 800626c:	4618      	movlt	r0, r3
 800626e:	e7a3      	b.n	80061b8 <_printf_i+0x130>
 8006270:	2301      	movs	r3, #1
 8006272:	464a      	mov	r2, r9
 8006274:	4639      	mov	r1, r7
 8006276:	4630      	mov	r0, r6
 8006278:	47c0      	blx	r8
 800627a:	3001      	adds	r0, #1
 800627c:	d09a      	beq.n	80061b4 <_printf_i+0x12c>
 800627e:	3501      	adds	r5, #1
 8006280:	68e3      	ldr	r3, [r4, #12]
 8006282:	9a03      	ldr	r2, [sp, #12]
 8006284:	1a9b      	subs	r3, r3, r2
 8006286:	42ab      	cmp	r3, r5
 8006288:	dcf2      	bgt.n	8006270 <_printf_i+0x1e8>
 800628a:	e7eb      	b.n	8006264 <_printf_i+0x1dc>
 800628c:	2500      	movs	r5, #0
 800628e:	f104 0919 	add.w	r9, r4, #25
 8006292:	e7f5      	b.n	8006280 <_printf_i+0x1f8>
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1ac      	bne.n	80061f2 <_printf_i+0x16a>
 8006298:	7803      	ldrb	r3, [r0, #0]
 800629a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800629e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062a2:	e76c      	b.n	800617e <_printf_i+0xf6>
 80062a4:	08006595 	.word	0x08006595
 80062a8:	080065a6 	.word	0x080065a6

080062ac <memchr>:
 80062ac:	b510      	push	{r4, lr}
 80062ae:	b2c9      	uxtb	r1, r1
 80062b0:	4402      	add	r2, r0
 80062b2:	4290      	cmp	r0, r2
 80062b4:	4603      	mov	r3, r0
 80062b6:	d101      	bne.n	80062bc <memchr+0x10>
 80062b8:	2300      	movs	r3, #0
 80062ba:	e003      	b.n	80062c4 <memchr+0x18>
 80062bc:	781c      	ldrb	r4, [r3, #0]
 80062be:	3001      	adds	r0, #1
 80062c0:	428c      	cmp	r4, r1
 80062c2:	d1f6      	bne.n	80062b2 <memchr+0x6>
 80062c4:	4618      	mov	r0, r3
 80062c6:	bd10      	pop	{r4, pc}

080062c8 <memcpy>:
 80062c8:	b510      	push	{r4, lr}
 80062ca:	1e43      	subs	r3, r0, #1
 80062cc:	440a      	add	r2, r1
 80062ce:	4291      	cmp	r1, r2
 80062d0:	d100      	bne.n	80062d4 <memcpy+0xc>
 80062d2:	bd10      	pop	{r4, pc}
 80062d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062dc:	e7f7      	b.n	80062ce <memcpy+0x6>

080062de <memmove>:
 80062de:	4288      	cmp	r0, r1
 80062e0:	b510      	push	{r4, lr}
 80062e2:	eb01 0302 	add.w	r3, r1, r2
 80062e6:	d807      	bhi.n	80062f8 <memmove+0x1a>
 80062e8:	1e42      	subs	r2, r0, #1
 80062ea:	4299      	cmp	r1, r3
 80062ec:	d00a      	beq.n	8006304 <memmove+0x26>
 80062ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062f2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80062f6:	e7f8      	b.n	80062ea <memmove+0xc>
 80062f8:	4283      	cmp	r3, r0
 80062fa:	d9f5      	bls.n	80062e8 <memmove+0xa>
 80062fc:	1881      	adds	r1, r0, r2
 80062fe:	1ad2      	subs	r2, r2, r3
 8006300:	42d3      	cmn	r3, r2
 8006302:	d100      	bne.n	8006306 <memmove+0x28>
 8006304:	bd10      	pop	{r4, pc}
 8006306:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800630a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800630e:	e7f7      	b.n	8006300 <memmove+0x22>

08006310 <_free_r>:
 8006310:	b538      	push	{r3, r4, r5, lr}
 8006312:	4605      	mov	r5, r0
 8006314:	2900      	cmp	r1, #0
 8006316:	d043      	beq.n	80063a0 <_free_r+0x90>
 8006318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800631c:	1f0c      	subs	r4, r1, #4
 800631e:	2b00      	cmp	r3, #0
 8006320:	bfb8      	it	lt
 8006322:	18e4      	addlt	r4, r4, r3
 8006324:	f000 f8d0 	bl	80064c8 <__malloc_lock>
 8006328:	4a1e      	ldr	r2, [pc, #120]	; (80063a4 <_free_r+0x94>)
 800632a:	6813      	ldr	r3, [r2, #0]
 800632c:	4610      	mov	r0, r2
 800632e:	b933      	cbnz	r3, 800633e <_free_r+0x2e>
 8006330:	6063      	str	r3, [r4, #4]
 8006332:	6014      	str	r4, [r2, #0]
 8006334:	4628      	mov	r0, r5
 8006336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800633a:	f000 b8c6 	b.w	80064ca <__malloc_unlock>
 800633e:	42a3      	cmp	r3, r4
 8006340:	d90b      	bls.n	800635a <_free_r+0x4a>
 8006342:	6821      	ldr	r1, [r4, #0]
 8006344:	1862      	adds	r2, r4, r1
 8006346:	4293      	cmp	r3, r2
 8006348:	bf01      	itttt	eq
 800634a:	681a      	ldreq	r2, [r3, #0]
 800634c:	685b      	ldreq	r3, [r3, #4]
 800634e:	1852      	addeq	r2, r2, r1
 8006350:	6022      	streq	r2, [r4, #0]
 8006352:	6063      	str	r3, [r4, #4]
 8006354:	6004      	str	r4, [r0, #0]
 8006356:	e7ed      	b.n	8006334 <_free_r+0x24>
 8006358:	4613      	mov	r3, r2
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	b10a      	cbz	r2, 8006362 <_free_r+0x52>
 800635e:	42a2      	cmp	r2, r4
 8006360:	d9fa      	bls.n	8006358 <_free_r+0x48>
 8006362:	6819      	ldr	r1, [r3, #0]
 8006364:	1858      	adds	r0, r3, r1
 8006366:	42a0      	cmp	r0, r4
 8006368:	d10b      	bne.n	8006382 <_free_r+0x72>
 800636a:	6820      	ldr	r0, [r4, #0]
 800636c:	4401      	add	r1, r0
 800636e:	1858      	adds	r0, r3, r1
 8006370:	4282      	cmp	r2, r0
 8006372:	6019      	str	r1, [r3, #0]
 8006374:	d1de      	bne.n	8006334 <_free_r+0x24>
 8006376:	6810      	ldr	r0, [r2, #0]
 8006378:	6852      	ldr	r2, [r2, #4]
 800637a:	4401      	add	r1, r0
 800637c:	6019      	str	r1, [r3, #0]
 800637e:	605a      	str	r2, [r3, #4]
 8006380:	e7d8      	b.n	8006334 <_free_r+0x24>
 8006382:	d902      	bls.n	800638a <_free_r+0x7a>
 8006384:	230c      	movs	r3, #12
 8006386:	602b      	str	r3, [r5, #0]
 8006388:	e7d4      	b.n	8006334 <_free_r+0x24>
 800638a:	6820      	ldr	r0, [r4, #0]
 800638c:	1821      	adds	r1, r4, r0
 800638e:	428a      	cmp	r2, r1
 8006390:	bf01      	itttt	eq
 8006392:	6811      	ldreq	r1, [r2, #0]
 8006394:	6852      	ldreq	r2, [r2, #4]
 8006396:	1809      	addeq	r1, r1, r0
 8006398:	6021      	streq	r1, [r4, #0]
 800639a:	6062      	str	r2, [r4, #4]
 800639c:	605c      	str	r4, [r3, #4]
 800639e:	e7c9      	b.n	8006334 <_free_r+0x24>
 80063a0:	bd38      	pop	{r3, r4, r5, pc}
 80063a2:	bf00      	nop
 80063a4:	20000424 	.word	0x20000424

080063a8 <_malloc_r>:
 80063a8:	b570      	push	{r4, r5, r6, lr}
 80063aa:	1ccd      	adds	r5, r1, #3
 80063ac:	f025 0503 	bic.w	r5, r5, #3
 80063b0:	3508      	adds	r5, #8
 80063b2:	2d0c      	cmp	r5, #12
 80063b4:	bf38      	it	cc
 80063b6:	250c      	movcc	r5, #12
 80063b8:	2d00      	cmp	r5, #0
 80063ba:	4606      	mov	r6, r0
 80063bc:	db01      	blt.n	80063c2 <_malloc_r+0x1a>
 80063be:	42a9      	cmp	r1, r5
 80063c0:	d903      	bls.n	80063ca <_malloc_r+0x22>
 80063c2:	230c      	movs	r3, #12
 80063c4:	6033      	str	r3, [r6, #0]
 80063c6:	2000      	movs	r0, #0
 80063c8:	bd70      	pop	{r4, r5, r6, pc}
 80063ca:	f000 f87d 	bl	80064c8 <__malloc_lock>
 80063ce:	4a21      	ldr	r2, [pc, #132]	; (8006454 <_malloc_r+0xac>)
 80063d0:	6814      	ldr	r4, [r2, #0]
 80063d2:	4621      	mov	r1, r4
 80063d4:	b991      	cbnz	r1, 80063fc <_malloc_r+0x54>
 80063d6:	4c20      	ldr	r4, [pc, #128]	; (8006458 <_malloc_r+0xb0>)
 80063d8:	6823      	ldr	r3, [r4, #0]
 80063da:	b91b      	cbnz	r3, 80063e4 <_malloc_r+0x3c>
 80063dc:	4630      	mov	r0, r6
 80063de:	f000 f863 	bl	80064a8 <_sbrk_r>
 80063e2:	6020      	str	r0, [r4, #0]
 80063e4:	4629      	mov	r1, r5
 80063e6:	4630      	mov	r0, r6
 80063e8:	f000 f85e 	bl	80064a8 <_sbrk_r>
 80063ec:	1c43      	adds	r3, r0, #1
 80063ee:	d124      	bne.n	800643a <_malloc_r+0x92>
 80063f0:	230c      	movs	r3, #12
 80063f2:	4630      	mov	r0, r6
 80063f4:	6033      	str	r3, [r6, #0]
 80063f6:	f000 f868 	bl	80064ca <__malloc_unlock>
 80063fa:	e7e4      	b.n	80063c6 <_malloc_r+0x1e>
 80063fc:	680b      	ldr	r3, [r1, #0]
 80063fe:	1b5b      	subs	r3, r3, r5
 8006400:	d418      	bmi.n	8006434 <_malloc_r+0x8c>
 8006402:	2b0b      	cmp	r3, #11
 8006404:	d90f      	bls.n	8006426 <_malloc_r+0x7e>
 8006406:	600b      	str	r3, [r1, #0]
 8006408:	18cc      	adds	r4, r1, r3
 800640a:	50cd      	str	r5, [r1, r3]
 800640c:	4630      	mov	r0, r6
 800640e:	f000 f85c 	bl	80064ca <__malloc_unlock>
 8006412:	f104 000b 	add.w	r0, r4, #11
 8006416:	1d23      	adds	r3, r4, #4
 8006418:	f020 0007 	bic.w	r0, r0, #7
 800641c:	1ac3      	subs	r3, r0, r3
 800641e:	d0d3      	beq.n	80063c8 <_malloc_r+0x20>
 8006420:	425a      	negs	r2, r3
 8006422:	50e2      	str	r2, [r4, r3]
 8006424:	e7d0      	b.n	80063c8 <_malloc_r+0x20>
 8006426:	684b      	ldr	r3, [r1, #4]
 8006428:	428c      	cmp	r4, r1
 800642a:	bf16      	itet	ne
 800642c:	6063      	strne	r3, [r4, #4]
 800642e:	6013      	streq	r3, [r2, #0]
 8006430:	460c      	movne	r4, r1
 8006432:	e7eb      	b.n	800640c <_malloc_r+0x64>
 8006434:	460c      	mov	r4, r1
 8006436:	6849      	ldr	r1, [r1, #4]
 8006438:	e7cc      	b.n	80063d4 <_malloc_r+0x2c>
 800643a:	1cc4      	adds	r4, r0, #3
 800643c:	f024 0403 	bic.w	r4, r4, #3
 8006440:	42a0      	cmp	r0, r4
 8006442:	d005      	beq.n	8006450 <_malloc_r+0xa8>
 8006444:	1a21      	subs	r1, r4, r0
 8006446:	4630      	mov	r0, r6
 8006448:	f000 f82e 	bl	80064a8 <_sbrk_r>
 800644c:	3001      	adds	r0, #1
 800644e:	d0cf      	beq.n	80063f0 <_malloc_r+0x48>
 8006450:	6025      	str	r5, [r4, #0]
 8006452:	e7db      	b.n	800640c <_malloc_r+0x64>
 8006454:	20000424 	.word	0x20000424
 8006458:	20000428 	.word	0x20000428

0800645c <_realloc_r>:
 800645c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645e:	4607      	mov	r7, r0
 8006460:	4614      	mov	r4, r2
 8006462:	460e      	mov	r6, r1
 8006464:	b921      	cbnz	r1, 8006470 <_realloc_r+0x14>
 8006466:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800646a:	4611      	mov	r1, r2
 800646c:	f7ff bf9c 	b.w	80063a8 <_malloc_r>
 8006470:	b922      	cbnz	r2, 800647c <_realloc_r+0x20>
 8006472:	f7ff ff4d 	bl	8006310 <_free_r>
 8006476:	4625      	mov	r5, r4
 8006478:	4628      	mov	r0, r5
 800647a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800647c:	f000 f826 	bl	80064cc <_malloc_usable_size_r>
 8006480:	42a0      	cmp	r0, r4
 8006482:	d20f      	bcs.n	80064a4 <_realloc_r+0x48>
 8006484:	4621      	mov	r1, r4
 8006486:	4638      	mov	r0, r7
 8006488:	f7ff ff8e 	bl	80063a8 <_malloc_r>
 800648c:	4605      	mov	r5, r0
 800648e:	2800      	cmp	r0, #0
 8006490:	d0f2      	beq.n	8006478 <_realloc_r+0x1c>
 8006492:	4631      	mov	r1, r6
 8006494:	4622      	mov	r2, r4
 8006496:	f7ff ff17 	bl	80062c8 <memcpy>
 800649a:	4631      	mov	r1, r6
 800649c:	4638      	mov	r0, r7
 800649e:	f7ff ff37 	bl	8006310 <_free_r>
 80064a2:	e7e9      	b.n	8006478 <_realloc_r+0x1c>
 80064a4:	4635      	mov	r5, r6
 80064a6:	e7e7      	b.n	8006478 <_realloc_r+0x1c>

080064a8 <_sbrk_r>:
 80064a8:	b538      	push	{r3, r4, r5, lr}
 80064aa:	2300      	movs	r3, #0
 80064ac:	4c05      	ldr	r4, [pc, #20]	; (80064c4 <_sbrk_r+0x1c>)
 80064ae:	4605      	mov	r5, r0
 80064b0:	4608      	mov	r0, r1
 80064b2:	6023      	str	r3, [r4, #0]
 80064b4:	f7fa f8a6 	bl	8000604 <_sbrk>
 80064b8:	1c43      	adds	r3, r0, #1
 80064ba:	d102      	bne.n	80064c2 <_sbrk_r+0x1a>
 80064bc:	6823      	ldr	r3, [r4, #0]
 80064be:	b103      	cbz	r3, 80064c2 <_sbrk_r+0x1a>
 80064c0:	602b      	str	r3, [r5, #0]
 80064c2:	bd38      	pop	{r3, r4, r5, pc}
 80064c4:	2000141c 	.word	0x2000141c

080064c8 <__malloc_lock>:
 80064c8:	4770      	bx	lr

080064ca <__malloc_unlock>:
 80064ca:	4770      	bx	lr

080064cc <_malloc_usable_size_r>:
 80064cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064d0:	1f18      	subs	r0, r3, #4
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	bfbc      	itt	lt
 80064d6:	580b      	ldrlt	r3, [r1, r0]
 80064d8:	18c0      	addlt	r0, r0, r3
 80064da:	4770      	bx	lr

080064dc <_init>:
 80064dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064de:	bf00      	nop
 80064e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064e2:	bc08      	pop	{r3}
 80064e4:	469e      	mov	lr, r3
 80064e6:	4770      	bx	lr

080064e8 <_fini>:
 80064e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ea:	bf00      	nop
 80064ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ee:	bc08      	pop	{r3}
 80064f0:	469e      	mov	lr, r3
 80064f2:	4770      	bx	lr
