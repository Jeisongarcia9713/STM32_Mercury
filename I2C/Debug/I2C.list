
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006314  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08006420  08006420  00016420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064e8  080064e8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080064e8  080064e8  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080064e8  080064e8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064e8  080064e8  000164e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064ec  080064ec  000164ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080064f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011ec  200001e0  080066d0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013cc  080066d0  000213cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001364f  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002daa  00000000  00000000  00033858  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d28  00000000  00000000  00036608  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be0  00000000  00000000  00037330  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016992  00000000  00000000  00037f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d87a  00000000  00000000  0004e8a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006fc9c  00000000  00000000  0005c11c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cbdb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037d4  00000000  00000000  000cbe34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08006408 	.word	0x08006408

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08006408 	.word	0x08006408

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fa8b 	bl	800066c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f867 	bl	8000228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8ed 	bl	8000338 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015e:	f000 f8bd 	bl	80002dc <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000162:	f005 f87d 	bl	8005260 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
        HAL_Delay(2000);
 8000166:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800016a:	f000 fae1 	bl	8000730 <HAL_Delay>
		CDC_size_buff=sprintf(CDC_tx_buff,"Scanning I2C bus:\r\n");//Guarda en la variable CDC_tx_buff el string y el tamaño del string queda en CDC_size_buff
 800016e:	4a28      	ldr	r2, [pc, #160]	; (8000210 <main+0xc4>)
 8000170:	4b28      	ldr	r3, [pc, #160]	; (8000214 <main+0xc8>)
 8000172:	4615      	mov	r5, r2
 8000174:	461c      	mov	r4, r3
 8000176:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000178:	6028      	str	r0, [r5, #0]
 800017a:	6069      	str	r1, [r5, #4]
 800017c:	60aa      	str	r2, [r5, #8]
 800017e:	60eb      	str	r3, [r5, #12]
 8000180:	6820      	ldr	r0, [r4, #0]
 8000182:	6128      	str	r0, [r5, #16]
 8000184:	2313      	movs	r3, #19
 8000186:	b2da      	uxtb	r2, r3
 8000188:	4b23      	ldr	r3, [pc, #140]	; (8000218 <main+0xcc>)
 800018a:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(CDC_tx_buff, CDC_size_buff);//Transmite por USB
 800018c:	4b22      	ldr	r3, [pc, #136]	; (8000218 <main+0xcc>)
 800018e:	781b      	ldrb	r3, [r3, #0]
 8000190:	b29b      	uxth	r3, r3
 8000192:	4619      	mov	r1, r3
 8000194:	481e      	ldr	r0, [pc, #120]	; (8000210 <main+0xc4>)
 8000196:	f005 f921 	bl	80053dc <CDC_Transmit_FS>
		int i=1;
 800019a:	2301      	movs	r3, #1
 800019c:	607b      	str	r3, [r7, #4]
		for (i=1; i<128; i++)
 800019e:	2301      	movs	r3, #1
 80001a0:	607b      	str	r3, [r7, #4]
 80001a2:	e030      	b.n	8000206 <main+0xba>
		{
		  int result = HAL_I2C_IsDeviceReady(&hi2c1,i<<1,2, 2);
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	b29b      	uxth	r3, r3
 80001a8:	005b      	lsls	r3, r3, #1
 80001aa:	b299      	uxth	r1, r3
 80001ac:	2302      	movs	r3, #2
 80001ae:	2202      	movs	r2, #2
 80001b0:	481a      	ldr	r0, [pc, #104]	; (800021c <main+0xd0>)
 80001b2:	f000 fe87 	bl	8000ec4 <HAL_I2C_IsDeviceReady>
 80001b6:	4603      	mov	r3, r0
 80001b8:	603b      	str	r3, [r7, #0]
		  if (result != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 80001ba:	683b      	ldr	r3, [r7, #0]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d00f      	beq.n	80001e0 <main+0x94>
		  {
			CDC_size_buff=sprintf(CDC_tx_buff,".");//Guarda en la variable CDC_tx_buff el string y el tamaño del string queda en CDC_size_buff
 80001c0:	4a13      	ldr	r2, [pc, #76]	; (8000210 <main+0xc4>)
 80001c2:	4b17      	ldr	r3, [pc, #92]	; (8000220 <main+0xd4>)
 80001c4:	881b      	ldrh	r3, [r3, #0]
 80001c6:	8013      	strh	r3, [r2, #0]
 80001c8:	2301      	movs	r3, #1
 80001ca:	b2da      	uxtb	r2, r3
 80001cc:	4b12      	ldr	r3, [pc, #72]	; (8000218 <main+0xcc>)
 80001ce:	701a      	strb	r2, [r3, #0]
			CDC_Transmit_FS(CDC_tx_buff, CDC_size_buff);//Transmite por USB
 80001d0:	4b11      	ldr	r3, [pc, #68]	; (8000218 <main+0xcc>)
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	b29b      	uxth	r3, r3
 80001d6:	4619      	mov	r1, r3
 80001d8:	480d      	ldr	r0, [pc, #52]	; (8000210 <main+0xc4>)
 80001da:	f005 f8ff 	bl	80053dc <CDC_Transmit_FS>
 80001de:	e00f      	b.n	8000200 <main+0xb4>
		  }else{
			CDC_size_buff=sprintf(CDC_tx_buff,"0x%X", i);//Guarda en la variable CDC_tx_buff el string y el tamaño del string queda en CDC_size_buff
 80001e0:	687a      	ldr	r2, [r7, #4]
 80001e2:	4910      	ldr	r1, [pc, #64]	; (8000224 <main+0xd8>)
 80001e4:	480a      	ldr	r0, [pc, #40]	; (8000210 <main+0xc4>)
 80001e6:	f005 fcfd 	bl	8005be4 <siprintf>
 80001ea:	4603      	mov	r3, r0
 80001ec:	b2da      	uxtb	r2, r3
 80001ee:	4b0a      	ldr	r3, [pc, #40]	; (8000218 <main+0xcc>)
 80001f0:	701a      	strb	r2, [r3, #0]
			CDC_Transmit_FS(CDC_tx_buff, CDC_size_buff);//Transmite por USB
 80001f2:	4b09      	ldr	r3, [pc, #36]	; (8000218 <main+0xcc>)
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	b29b      	uxth	r3, r3
 80001f8:	4619      	mov	r1, r3
 80001fa:	4805      	ldr	r0, [pc, #20]	; (8000210 <main+0xc4>)
 80001fc:	f005 f8ee 	bl	80053dc <CDC_Transmit_FS>
		for (i=1; i<128; i++)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	3301      	adds	r3, #1
 8000204:	607b      	str	r3, [r7, #4]
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	2b7f      	cmp	r3, #127	; 0x7f
 800020a:	ddcb      	ble.n	80001a4 <main+0x58>
  {
 800020c:	e7ab      	b.n	8000166 <main+0x1a>
 800020e:	bf00      	nop
 8000210:	20000484 	.word	0x20000484
 8000214:	08006420 	.word	0x08006420
 8000218:	200004c0 	.word	0x200004c0
 800021c:	2000042c 	.word	0x2000042c
 8000220:	08006434 	.word	0x08006434
 8000224:	08006438 	.word	0x08006438

08000228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b094      	sub	sp, #80	; 0x50
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000232:	2228      	movs	r2, #40	; 0x28
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f005 fccc 	bl	8005bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	f107 0314 	add.w	r3, r7, #20
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
 8000244:	605a      	str	r2, [r3, #4]
 8000246:	609a      	str	r2, [r3, #8]
 8000248:	60da      	str	r2, [r3, #12]
 800024a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000258:	2301      	movs	r3, #1
 800025a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800025c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000260:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000266:	2301      	movs	r3, #1
 8000268:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026a:	2302      	movs	r3, #2
 800026c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800026e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000272:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000274:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000278:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800027e:	4618      	mov	r0, r3
 8000280:	f001 fe7a 	bl	8001f78 <HAL_RCC_OscConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800028a:	f000 f8ad 	bl	80003e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028e:	230f      	movs	r3, #15
 8000290:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000292:	2302      	movs	r3, #2
 8000294:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800029a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800029e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a4:	f107 0314 	add.w	r3, r7, #20
 80002a8:	2102      	movs	r1, #2
 80002aa:	4618      	mov	r0, r3
 80002ac:	f002 f8e4 	bl	8002478 <HAL_RCC_ClockConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002b6:	f000 f897 	bl	80003e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002ba:	2310      	movs	r3, #16
 80002bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002be:	2300      	movs	r3, #0
 80002c0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	4618      	mov	r0, r3
 80002c6:	f002 fa5f 	bl	8002788 <HAL_RCCEx_PeriphCLKConfig>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002d0:	f000 f88a 	bl	80003e8 <Error_Handler>
  }
}
 80002d4:	bf00      	nop
 80002d6:	3750      	adds	r7, #80	; 0x50
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}

080002dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002e0:	4b12      	ldr	r3, [pc, #72]	; (800032c <MX_I2C1_Init+0x50>)
 80002e2:	4a13      	ldr	r2, [pc, #76]	; (8000330 <MX_I2C1_Init+0x54>)
 80002e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80002e6:	4b11      	ldr	r3, [pc, #68]	; (800032c <MX_I2C1_Init+0x50>)
 80002e8:	4a12      	ldr	r2, [pc, #72]	; (8000334 <MX_I2C1_Init+0x58>)
 80002ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002ec:	4b0f      	ldr	r3, [pc, #60]	; (800032c <MX_I2C1_Init+0x50>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002f2:	4b0e      	ldr	r3, [pc, #56]	; (800032c <MX_I2C1_Init+0x50>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002f8:	4b0c      	ldr	r3, [pc, #48]	; (800032c <MX_I2C1_Init+0x50>)
 80002fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000300:	4b0a      	ldr	r3, [pc, #40]	; (800032c <MX_I2C1_Init+0x50>)
 8000302:	2200      	movs	r2, #0
 8000304:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000306:	4b09      	ldr	r3, [pc, #36]	; (800032c <MX_I2C1_Init+0x50>)
 8000308:	2200      	movs	r2, #0
 800030a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800030c:	4b07      	ldr	r3, [pc, #28]	; (800032c <MX_I2C1_Init+0x50>)
 800030e:	2200      	movs	r2, #0
 8000310:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000312:	4b06      	ldr	r3, [pc, #24]	; (800032c <MX_I2C1_Init+0x50>)
 8000314:	2200      	movs	r2, #0
 8000316:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000318:	4804      	ldr	r0, [pc, #16]	; (800032c <MX_I2C1_Init+0x50>)
 800031a:	f000 fcab 	bl	8000c74 <HAL_I2C_Init>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000324:	f000 f860 	bl	80003e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}
 800032c:	2000042c 	.word	0x2000042c
 8000330:	40005400 	.word	0x40005400
 8000334:	00061a80 	.word	0x00061a80

08000338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b088      	sub	sp, #32
 800033c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800033e:	f107 0310 	add.w	r3, r7, #16
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800034c:	4b24      	ldr	r3, [pc, #144]	; (80003e0 <MX_GPIO_Init+0xa8>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	4a23      	ldr	r2, [pc, #140]	; (80003e0 <MX_GPIO_Init+0xa8>)
 8000352:	f043 0310 	orr.w	r3, r3, #16
 8000356:	6193      	str	r3, [r2, #24]
 8000358:	4b21      	ldr	r3, [pc, #132]	; (80003e0 <MX_GPIO_Init+0xa8>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	f003 0310 	and.w	r3, r3, #16
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000364:	4b1e      	ldr	r3, [pc, #120]	; (80003e0 <MX_GPIO_Init+0xa8>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	4a1d      	ldr	r2, [pc, #116]	; (80003e0 <MX_GPIO_Init+0xa8>)
 800036a:	f043 0320 	orr.w	r3, r3, #32
 800036e:	6193      	str	r3, [r2, #24]
 8000370:	4b1b      	ldr	r3, [pc, #108]	; (80003e0 <MX_GPIO_Init+0xa8>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	f003 0320 	and.w	r3, r3, #32
 8000378:	60bb      	str	r3, [r7, #8]
 800037a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800037c:	4b18      	ldr	r3, [pc, #96]	; (80003e0 <MX_GPIO_Init+0xa8>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a17      	ldr	r2, [pc, #92]	; (80003e0 <MX_GPIO_Init+0xa8>)
 8000382:	f043 0304 	orr.w	r3, r3, #4
 8000386:	6193      	str	r3, [r2, #24]
 8000388:	4b15      	ldr	r3, [pc, #84]	; (80003e0 <MX_GPIO_Init+0xa8>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f003 0304 	and.w	r3, r3, #4
 8000390:	607b      	str	r3, [r7, #4]
 8000392:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000394:	4b12      	ldr	r3, [pc, #72]	; (80003e0 <MX_GPIO_Init+0xa8>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	4a11      	ldr	r2, [pc, #68]	; (80003e0 <MX_GPIO_Init+0xa8>)
 800039a:	f043 0308 	orr.w	r3, r3, #8
 800039e:	6193      	str	r3, [r2, #24]
 80003a0:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <MX_GPIO_Init+0xa8>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	f003 0308 	and.w	r3, r3, #8
 80003a8:	603b      	str	r3, [r7, #0]
 80003aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 80003ac:	2200      	movs	r2, #0
 80003ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003b2:	480c      	ldr	r0, [pc, #48]	; (80003e4 <MX_GPIO_Init+0xac>)
 80003b4:	f000 fc46 	bl	8000c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 80003b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003be:	2301      	movs	r3, #1
 80003c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c2:	2300      	movs	r3, #0
 80003c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c6:	2302      	movs	r3, #2
 80003c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 80003ca:	f107 0310 	add.w	r3, r7, #16
 80003ce:	4619      	mov	r1, r3
 80003d0:	4804      	ldr	r0, [pc, #16]	; (80003e4 <MX_GPIO_Init+0xac>)
 80003d2:	f000 fadd 	bl	8000990 <HAL_GPIO_Init>

}
 80003d6:	bf00      	nop
 80003d8:	3720      	adds	r7, #32
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40021000 	.word	0x40021000
 80003e4:	40011000 	.word	0x40011000

080003e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003ec:	bf00      	nop
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bc80      	pop	{r7}
 80003f2:	4770      	bx	lr

080003f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003fa:	4b15      	ldr	r3, [pc, #84]	; (8000450 <HAL_MspInit+0x5c>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	4a14      	ldr	r2, [pc, #80]	; (8000450 <HAL_MspInit+0x5c>)
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	6193      	str	r3, [r2, #24]
 8000406:	4b12      	ldr	r3, [pc, #72]	; (8000450 <HAL_MspInit+0x5c>)
 8000408:	699b      	ldr	r3, [r3, #24]
 800040a:	f003 0301 	and.w	r3, r3, #1
 800040e:	60bb      	str	r3, [r7, #8]
 8000410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000412:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <HAL_MspInit+0x5c>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	4a0e      	ldr	r2, [pc, #56]	; (8000450 <HAL_MspInit+0x5c>)
 8000418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800041c:	61d3      	str	r3, [r2, #28]
 800041e:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <HAL_MspInit+0x5c>)
 8000420:	69db      	ldr	r3, [r3, #28]
 8000422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800042a:	4b0a      	ldr	r3, [pc, #40]	; (8000454 <HAL_MspInit+0x60>)
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	4a04      	ldr	r2, [pc, #16]	; (8000454 <HAL_MspInit+0x60>)
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000446:	bf00      	nop
 8000448:	3714      	adds	r7, #20
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr
 8000450:	40021000 	.word	0x40021000
 8000454:	40010000 	.word	0x40010000

08000458 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b08a      	sub	sp, #40	; 0x28
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000460:	f107 0314 	add.w	r3, r7, #20
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	605a      	str	r2, [r3, #4]
 800046a:	609a      	str	r2, [r3, #8]
 800046c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a1d      	ldr	r2, [pc, #116]	; (80004e8 <HAL_I2C_MspInit+0x90>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d132      	bne.n	80004de <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000478:	4b1c      	ldr	r3, [pc, #112]	; (80004ec <HAL_I2C_MspInit+0x94>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a1b      	ldr	r2, [pc, #108]	; (80004ec <HAL_I2C_MspInit+0x94>)
 800047e:	f043 0308 	orr.w	r3, r3, #8
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b19      	ldr	r3, [pc, #100]	; (80004ec <HAL_I2C_MspInit+0x94>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f003 0308 	and.w	r3, r3, #8
 800048c:	613b      	str	r3, [r7, #16]
 800048e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000490:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000496:	2312      	movs	r3, #18
 8000498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800049a:	2303      	movs	r3, #3
 800049c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800049e:	f107 0314 	add.w	r3, r7, #20
 80004a2:	4619      	mov	r1, r3
 80004a4:	4812      	ldr	r0, [pc, #72]	; (80004f0 <HAL_I2C_MspInit+0x98>)
 80004a6:	f000 fa73 	bl	8000990 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80004aa:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <HAL_I2C_MspInit+0x9c>)
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	627b      	str	r3, [r7, #36]	; 0x24
 80004b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004b2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80004b6:	627b      	str	r3, [r7, #36]	; 0x24
 80004b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ba:	f043 0302 	orr.w	r3, r3, #2
 80004be:	627b      	str	r3, [r7, #36]	; 0x24
 80004c0:	4a0c      	ldr	r2, [pc, #48]	; (80004f4 <HAL_I2C_MspInit+0x9c>)
 80004c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004c4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004c6:	4b09      	ldr	r3, [pc, #36]	; (80004ec <HAL_I2C_MspInit+0x94>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	4a08      	ldr	r2, [pc, #32]	; (80004ec <HAL_I2C_MspInit+0x94>)
 80004cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004d0:	61d3      	str	r3, [r2, #28]
 80004d2:	4b06      	ldr	r3, [pc, #24]	; (80004ec <HAL_I2C_MspInit+0x94>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004da:	60fb      	str	r3, [r7, #12]
 80004dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80004de:	bf00      	nop
 80004e0:	3728      	adds	r7, #40	; 0x28
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40005400 	.word	0x40005400
 80004ec:	40021000 	.word	0x40021000
 80004f0:	40010c00 	.word	0x40010c00
 80004f4:	40010000 	.word	0x40010000

080004f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr

08000504 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000508:	e7fe      	b.n	8000508 <HardFault_Handler+0x4>

0800050a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800050e:	e7fe      	b.n	800050e <MemManage_Handler+0x4>

08000510 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000514:	e7fe      	b.n	8000514 <BusFault_Handler+0x4>

08000516 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800051a:	e7fe      	b.n	800051a <UsageFault_Handler+0x4>

0800051c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr

08000528 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr

08000534 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr

08000540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000544:	f000 f8d8 	bl	80006f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}

0800054c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000550:	4802      	ldr	r0, [pc, #8]	; (800055c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000552:	f000 ff37 	bl	80013c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	2000115c 	.word	0x2000115c

08000560 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000568:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <_sbrk+0x50>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d102      	bne.n	8000576 <_sbrk+0x16>
		heap_end = &end;
 8000570:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <_sbrk+0x50>)
 8000572:	4a10      	ldr	r2, [pc, #64]	; (80005b4 <_sbrk+0x54>)
 8000574:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <_sbrk+0x50>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800057c:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <_sbrk+0x50>)
 800057e:	681a      	ldr	r2, [r3, #0]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4413      	add	r3, r2
 8000584:	466a      	mov	r2, sp
 8000586:	4293      	cmp	r3, r2
 8000588:	d907      	bls.n	800059a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800058a:	f005 faf9 	bl	8005b80 <__errno>
 800058e:	4602      	mov	r2, r0
 8000590:	230c      	movs	r3, #12
 8000592:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000594:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000598:	e006      	b.n	80005a8 <_sbrk+0x48>
	}

	heap_end += incr;
 800059a:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <_sbrk+0x50>)
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4413      	add	r3, r2
 80005a2:	4a03      	ldr	r2, [pc, #12]	; (80005b0 <_sbrk+0x50>)
 80005a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80005a6:	68fb      	ldr	r3, [r7, #12]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	200001fc 	.word	0x200001fc
 80005b4:	200013d0 	.word	0x200013d0

080005b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80005bc:	4b15      	ldr	r3, [pc, #84]	; (8000614 <SystemInit+0x5c>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a14      	ldr	r2, [pc, #80]	; (8000614 <SystemInit+0x5c>)
 80005c2:	f043 0301 	orr.w	r3, r3, #1
 80005c6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80005c8:	4b12      	ldr	r3, [pc, #72]	; (8000614 <SystemInit+0x5c>)
 80005ca:	685a      	ldr	r2, [r3, #4]
 80005cc:	4911      	ldr	r1, [pc, #68]	; (8000614 <SystemInit+0x5c>)
 80005ce:	4b12      	ldr	r3, [pc, #72]	; (8000618 <SystemInit+0x60>)
 80005d0:	4013      	ands	r3, r2
 80005d2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80005d4:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <SystemInit+0x5c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <SystemInit+0x5c>)
 80005da:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80005de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005e2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005e4:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <SystemInit+0x5c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <SystemInit+0x5c>)
 80005ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005ee:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <SystemInit+0x5c>)
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	4a07      	ldr	r2, [pc, #28]	; (8000614 <SystemInit+0x5c>)
 80005f6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80005fa:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <SystemInit+0x5c>)
 80005fe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000602:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <SystemInit+0x64>)
 8000606:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800060a:	609a      	str	r2, [r3, #8]
#endif 
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr
 8000614:	40021000 	.word	0x40021000
 8000618:	f8ff0000 	.word	0xf8ff0000
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000620:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000622:	e003      	b.n	800062c <LoopCopyDataInit>

08000624 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000626:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000628:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800062a:	3104      	adds	r1, #4

0800062c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800062c:	480a      	ldr	r0, [pc, #40]	; (8000658 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000630:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000632:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000634:	d3f6      	bcc.n	8000624 <CopyDataInit>
  ldr r2, =_sbss
 8000636:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000638:	e002      	b.n	8000640 <LoopFillZerobss>

0800063a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800063c:	f842 3b04 	str.w	r3, [r2], #4

08000640 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000640:	4b08      	ldr	r3, [pc, #32]	; (8000664 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000642:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000644:	d3f9      	bcc.n	800063a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000646:	f7ff ffb7 	bl	80005b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800064a:	f005 fa9f 	bl	8005b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800064e:	f7ff fd7d 	bl	800014c <main>
  bx lr
 8000652:	4770      	bx	lr
  ldr r3, =_sidata
 8000654:	080064f0 	.word	0x080064f0
  ldr r0, =_sdata
 8000658:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800065c:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8000660:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8000664:	200013cc 	.word	0x200013cc

08000668 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000668:	e7fe      	b.n	8000668 <ADC1_2_IRQHandler>
	...

0800066c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <HAL_Init+0x28>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a07      	ldr	r2, [pc, #28]	; (8000694 <HAL_Init+0x28>)
 8000676:	f043 0310 	orr.w	r3, r3, #16
 800067a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800067c:	2003      	movs	r0, #3
 800067e:	f000 f945 	bl	800090c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000682:	2000      	movs	r0, #0
 8000684:	f000 f808 	bl	8000698 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000688:	f7ff feb4 	bl	80003f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800068c:	2300      	movs	r3, #0
}
 800068e:	4618      	mov	r0, r3
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40022000 	.word	0x40022000

08000698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <HAL_InitTick+0x54>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <HAL_InitTick+0x58>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	4619      	mov	r1, r3
 80006aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80006b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 f95d 	bl	8000976 <HAL_SYSTICK_Config>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006c2:	2301      	movs	r3, #1
 80006c4:	e00e      	b.n	80006e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2b0f      	cmp	r3, #15
 80006ca:	d80a      	bhi.n	80006e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006cc:	2200      	movs	r2, #0
 80006ce:	6879      	ldr	r1, [r7, #4]
 80006d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006d4:	f000 f925 	bl	8000922 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d8:	4a06      	ldr	r2, [pc, #24]	; (80006f4 <HAL_InitTick+0x5c>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006de:	2300      	movs	r3, #0
 80006e0:	e000      	b.n	80006e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006e2:	2301      	movs	r3, #1
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000000 	.word	0x20000000
 80006f0:	20000008 	.word	0x20000008
 80006f4:	20000004 	.word	0x20000004

080006f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006fc:	4b05      	ldr	r3, [pc, #20]	; (8000714 <HAL_IncTick+0x1c>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	461a      	mov	r2, r3
 8000702:	4b05      	ldr	r3, [pc, #20]	; (8000718 <HAL_IncTick+0x20>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4413      	add	r3, r2
 8000708:	4a03      	ldr	r2, [pc, #12]	; (8000718 <HAL_IncTick+0x20>)
 800070a:	6013      	str	r3, [r2, #0]
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr
 8000714:	20000008 	.word	0x20000008
 8000718:	200004c4 	.word	0x200004c4

0800071c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  return uwTick;
 8000720:	4b02      	ldr	r3, [pc, #8]	; (800072c <HAL_GetTick+0x10>)
 8000722:	681b      	ldr	r3, [r3, #0]
}
 8000724:	4618      	mov	r0, r3
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr
 800072c:	200004c4 	.word	0x200004c4

08000730 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000738:	f7ff fff0 	bl	800071c <HAL_GetTick>
 800073c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000748:	d005      	beq.n	8000756 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <HAL_Delay+0x40>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	461a      	mov	r2, r3
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	4413      	add	r3, r2
 8000754:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000756:	bf00      	nop
 8000758:	f7ff ffe0 	bl	800071c <HAL_GetTick>
 800075c:	4602      	mov	r2, r0
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	1ad3      	subs	r3, r2, r3
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	429a      	cmp	r2, r3
 8000766:	d8f7      	bhi.n	8000758 <HAL_Delay+0x28>
  {
  }
}
 8000768:	bf00      	nop
 800076a:	3710      	adds	r7, #16
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000008 	.word	0x20000008

08000774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	f003 0307 	and.w	r3, r3, #7
 8000782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800078a:	68ba      	ldr	r2, [r7, #8]
 800078c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000790:	4013      	ands	r3, r2
 8000792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800079c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007a6:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <__NVIC_SetPriorityGrouping+0x44>)
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	60d3      	str	r3, [r2, #12]
}
 80007ac:	bf00      	nop
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007c0:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <__NVIC_GetPriorityGrouping+0x18>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	0a1b      	lsrs	r3, r3, #8
 80007c6:	f003 0307 	and.w	r3, r3, #7
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	db0b      	blt.n	8000802 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	f003 021f 	and.w	r2, r3, #31
 80007f0:	4906      	ldr	r1, [pc, #24]	; (800080c <__NVIC_EnableIRQ+0x34>)
 80007f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f6:	095b      	lsrs	r3, r3, #5
 80007f8:	2001      	movs	r0, #1
 80007fa:	fa00 f202 	lsl.w	r2, r0, r2
 80007fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr
 800080c:	e000e100 	.word	0xe000e100

08000810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	6039      	str	r1, [r7, #0]
 800081a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000820:	2b00      	cmp	r3, #0
 8000822:	db0a      	blt.n	800083a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	b2da      	uxtb	r2, r3
 8000828:	490c      	ldr	r1, [pc, #48]	; (800085c <__NVIC_SetPriority+0x4c>)
 800082a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082e:	0112      	lsls	r2, r2, #4
 8000830:	b2d2      	uxtb	r2, r2
 8000832:	440b      	add	r3, r1
 8000834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000838:	e00a      	b.n	8000850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4908      	ldr	r1, [pc, #32]	; (8000860 <__NVIC_SetPriority+0x50>)
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	f003 030f 	and.w	r3, r3, #15
 8000846:	3b04      	subs	r3, #4
 8000848:	0112      	lsls	r2, r2, #4
 800084a:	b2d2      	uxtb	r2, r2
 800084c:	440b      	add	r3, r1
 800084e:	761a      	strb	r2, [r3, #24]
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000e100 	.word	0xe000e100
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000864:	b480      	push	{r7}
 8000866:	b089      	sub	sp, #36	; 0x24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	f1c3 0307 	rsb	r3, r3, #7
 800087e:	2b04      	cmp	r3, #4
 8000880:	bf28      	it	cs
 8000882:	2304      	movcs	r3, #4
 8000884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	3304      	adds	r3, #4
 800088a:	2b06      	cmp	r3, #6
 800088c:	d902      	bls.n	8000894 <NVIC_EncodePriority+0x30>
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	3b03      	subs	r3, #3
 8000892:	e000      	b.n	8000896 <NVIC_EncodePriority+0x32>
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000898:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	43da      	mvns	r2, r3
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	401a      	ands	r2, r3
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	fa01 f303 	lsl.w	r3, r1, r3
 80008b6:	43d9      	mvns	r1, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008bc:	4313      	orrs	r3, r2
         );
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3724      	adds	r7, #36	; 0x24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	3b01      	subs	r3, #1
 80008d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008d8:	d301      	bcc.n	80008de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008da:	2301      	movs	r3, #1
 80008dc:	e00f      	b.n	80008fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008de:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <SysTick_Config+0x40>)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008e6:	210f      	movs	r1, #15
 80008e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008ec:	f7ff ff90 	bl	8000810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <SysTick_Config+0x40>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008f6:	4b04      	ldr	r3, [pc, #16]	; (8000908 <SysTick_Config+0x40>)
 80008f8:	2207      	movs	r2, #7
 80008fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	e000e010 	.word	0xe000e010

0800090c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff ff2d 	bl	8000774 <__NVIC_SetPriorityGrouping>
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000922:	b580      	push	{r7, lr}
 8000924:	b086      	sub	sp, #24
 8000926:	af00      	add	r7, sp, #0
 8000928:	4603      	mov	r3, r0
 800092a:	60b9      	str	r1, [r7, #8]
 800092c:	607a      	str	r2, [r7, #4]
 800092e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000934:	f7ff ff42 	bl	80007bc <__NVIC_GetPriorityGrouping>
 8000938:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	68b9      	ldr	r1, [r7, #8]
 800093e:	6978      	ldr	r0, [r7, #20]
 8000940:	f7ff ff90 	bl	8000864 <NVIC_EncodePriority>
 8000944:	4602      	mov	r2, r0
 8000946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800094a:	4611      	mov	r1, r2
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff ff5f 	bl	8000810 <__NVIC_SetPriority>
}
 8000952:	bf00      	nop
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b082      	sub	sp, #8
 800095e:	af00      	add	r7, sp, #0
 8000960:	4603      	mov	r3, r0
 8000962:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff ff35 	bl	80007d8 <__NVIC_EnableIRQ>
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f7ff ffa2 	bl	80008c8 <SysTick_Config>
 8000984:	4603      	mov	r3, r0
}
 8000986:	4618      	mov	r0, r3
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000990:	b480      	push	{r7}
 8000992:	b08b      	sub	sp, #44	; 0x2c
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800099e:	2300      	movs	r3, #0
 80009a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009a2:	e127      	b.n	8000bf4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009a4:	2201      	movs	r2, #1
 80009a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	69fa      	ldr	r2, [r7, #28]
 80009b4:	4013      	ands	r3, r2
 80009b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009b8:	69ba      	ldr	r2, [r7, #24]
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	429a      	cmp	r2, r3
 80009be:	f040 8116 	bne.w	8000bee <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	2b12      	cmp	r3, #18
 80009c8:	d034      	beq.n	8000a34 <HAL_GPIO_Init+0xa4>
 80009ca:	2b12      	cmp	r3, #18
 80009cc:	d80d      	bhi.n	80009ea <HAL_GPIO_Init+0x5a>
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	d02b      	beq.n	8000a2a <HAL_GPIO_Init+0x9a>
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	d804      	bhi.n	80009e0 <HAL_GPIO_Init+0x50>
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d031      	beq.n	8000a3e <HAL_GPIO_Init+0xae>
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d01c      	beq.n	8000a18 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009de:	e048      	b.n	8000a72 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80009e0:	2b03      	cmp	r3, #3
 80009e2:	d043      	beq.n	8000a6c <HAL_GPIO_Init+0xdc>
 80009e4:	2b11      	cmp	r3, #17
 80009e6:	d01b      	beq.n	8000a20 <HAL_GPIO_Init+0x90>
          break;
 80009e8:	e043      	b.n	8000a72 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80009ea:	4a89      	ldr	r2, [pc, #548]	; (8000c10 <HAL_GPIO_Init+0x280>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d026      	beq.n	8000a3e <HAL_GPIO_Init+0xae>
 80009f0:	4a87      	ldr	r2, [pc, #540]	; (8000c10 <HAL_GPIO_Init+0x280>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d806      	bhi.n	8000a04 <HAL_GPIO_Init+0x74>
 80009f6:	4a87      	ldr	r2, [pc, #540]	; (8000c14 <HAL_GPIO_Init+0x284>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d020      	beq.n	8000a3e <HAL_GPIO_Init+0xae>
 80009fc:	4a86      	ldr	r2, [pc, #536]	; (8000c18 <HAL_GPIO_Init+0x288>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d01d      	beq.n	8000a3e <HAL_GPIO_Init+0xae>
          break;
 8000a02:	e036      	b.n	8000a72 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a04:	4a85      	ldr	r2, [pc, #532]	; (8000c1c <HAL_GPIO_Init+0x28c>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d019      	beq.n	8000a3e <HAL_GPIO_Init+0xae>
 8000a0a:	4a85      	ldr	r2, [pc, #532]	; (8000c20 <HAL_GPIO_Init+0x290>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d016      	beq.n	8000a3e <HAL_GPIO_Init+0xae>
 8000a10:	4a84      	ldr	r2, [pc, #528]	; (8000c24 <HAL_GPIO_Init+0x294>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d013      	beq.n	8000a3e <HAL_GPIO_Init+0xae>
          break;
 8000a16:	e02c      	b.n	8000a72 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	623b      	str	r3, [r7, #32]
          break;
 8000a1e:	e028      	b.n	8000a72 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	3304      	adds	r3, #4
 8000a26:	623b      	str	r3, [r7, #32]
          break;
 8000a28:	e023      	b.n	8000a72 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	68db      	ldr	r3, [r3, #12]
 8000a2e:	3308      	adds	r3, #8
 8000a30:	623b      	str	r3, [r7, #32]
          break;
 8000a32:	e01e      	b.n	8000a72 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	330c      	adds	r3, #12
 8000a3a:	623b      	str	r3, [r7, #32]
          break;
 8000a3c:	e019      	b.n	8000a72 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d102      	bne.n	8000a4c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a46:	2304      	movs	r3, #4
 8000a48:	623b      	str	r3, [r7, #32]
          break;
 8000a4a:	e012      	b.n	8000a72 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d105      	bne.n	8000a60 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a54:	2308      	movs	r3, #8
 8000a56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	69fa      	ldr	r2, [r7, #28]
 8000a5c:	611a      	str	r2, [r3, #16]
          break;
 8000a5e:	e008      	b.n	8000a72 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a60:	2308      	movs	r3, #8
 8000a62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	69fa      	ldr	r2, [r7, #28]
 8000a68:	615a      	str	r2, [r3, #20]
          break;
 8000a6a:	e002      	b.n	8000a72 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
          break;
 8000a70:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	2bff      	cmp	r3, #255	; 0xff
 8000a76:	d801      	bhi.n	8000a7c <HAL_GPIO_Init+0xec>
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	e001      	b.n	8000a80 <HAL_GPIO_Init+0xf0>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	3304      	adds	r3, #4
 8000a80:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	2bff      	cmp	r3, #255	; 0xff
 8000a86:	d802      	bhi.n	8000a8e <HAL_GPIO_Init+0xfe>
 8000a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	e002      	b.n	8000a94 <HAL_GPIO_Init+0x104>
 8000a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a90:	3b08      	subs	r3, #8
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	210f      	movs	r1, #15
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	401a      	ands	r2, r3
 8000aa6:	6a39      	ldr	r1, [r7, #32]
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000aae:	431a      	orrs	r2, r3
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	f000 8096 	beq.w	8000bee <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ac2:	4b59      	ldr	r3, [pc, #356]	; (8000c28 <HAL_GPIO_Init+0x298>)
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	4a58      	ldr	r2, [pc, #352]	; (8000c28 <HAL_GPIO_Init+0x298>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6193      	str	r3, [r2, #24]
 8000ace:	4b56      	ldr	r3, [pc, #344]	; (8000c28 <HAL_GPIO_Init+0x298>)
 8000ad0:	699b      	ldr	r3, [r3, #24]
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ada:	4a54      	ldr	r2, [pc, #336]	; (8000c2c <HAL_GPIO_Init+0x29c>)
 8000adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ade:	089b      	lsrs	r3, r3, #2
 8000ae0:	3302      	adds	r3, #2
 8000ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aea:	f003 0303 	and.w	r3, r3, #3
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	220f      	movs	r2, #15
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43db      	mvns	r3, r3
 8000af8:	68fa      	ldr	r2, [r7, #12]
 8000afa:	4013      	ands	r3, r2
 8000afc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a4b      	ldr	r2, [pc, #300]	; (8000c30 <HAL_GPIO_Init+0x2a0>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d013      	beq.n	8000b2e <HAL_GPIO_Init+0x19e>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a4a      	ldr	r2, [pc, #296]	; (8000c34 <HAL_GPIO_Init+0x2a4>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d00d      	beq.n	8000b2a <HAL_GPIO_Init+0x19a>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a49      	ldr	r2, [pc, #292]	; (8000c38 <HAL_GPIO_Init+0x2a8>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d007      	beq.n	8000b26 <HAL_GPIO_Init+0x196>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a48      	ldr	r2, [pc, #288]	; (8000c3c <HAL_GPIO_Init+0x2ac>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d101      	bne.n	8000b22 <HAL_GPIO_Init+0x192>
 8000b1e:	2303      	movs	r3, #3
 8000b20:	e006      	b.n	8000b30 <HAL_GPIO_Init+0x1a0>
 8000b22:	2304      	movs	r3, #4
 8000b24:	e004      	b.n	8000b30 <HAL_GPIO_Init+0x1a0>
 8000b26:	2302      	movs	r3, #2
 8000b28:	e002      	b.n	8000b30 <HAL_GPIO_Init+0x1a0>
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e000      	b.n	8000b30 <HAL_GPIO_Init+0x1a0>
 8000b2e:	2300      	movs	r3, #0
 8000b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b32:	f002 0203 	and.w	r2, r2, #3
 8000b36:	0092      	lsls	r2, r2, #2
 8000b38:	4093      	lsls	r3, r2
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b40:	493a      	ldr	r1, [pc, #232]	; (8000c2c <HAL_GPIO_Init+0x29c>)
 8000b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b44:	089b      	lsrs	r3, r3, #2
 8000b46:	3302      	adds	r3, #2
 8000b48:	68fa      	ldr	r2, [r7, #12]
 8000b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d006      	beq.n	8000b68 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b5a:	4b39      	ldr	r3, [pc, #228]	; (8000c40 <HAL_GPIO_Init+0x2b0>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	4938      	ldr	r1, [pc, #224]	; (8000c40 <HAL_GPIO_Init+0x2b0>)
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	600b      	str	r3, [r1, #0]
 8000b66:	e006      	b.n	8000b76 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b68:	4b35      	ldr	r3, [pc, #212]	; (8000c40 <HAL_GPIO_Init+0x2b0>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	4933      	ldr	r1, [pc, #204]	; (8000c40 <HAL_GPIO_Init+0x2b0>)
 8000b72:	4013      	ands	r3, r2
 8000b74:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d006      	beq.n	8000b90 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b82:	4b2f      	ldr	r3, [pc, #188]	; (8000c40 <HAL_GPIO_Init+0x2b0>)
 8000b84:	685a      	ldr	r2, [r3, #4]
 8000b86:	492e      	ldr	r1, [pc, #184]	; (8000c40 <HAL_GPIO_Init+0x2b0>)
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	604b      	str	r3, [r1, #4]
 8000b8e:	e006      	b.n	8000b9e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b90:	4b2b      	ldr	r3, [pc, #172]	; (8000c40 <HAL_GPIO_Init+0x2b0>)
 8000b92:	685a      	ldr	r2, [r3, #4]
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	43db      	mvns	r3, r3
 8000b98:	4929      	ldr	r1, [pc, #164]	; (8000c40 <HAL_GPIO_Init+0x2b0>)
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d006      	beq.n	8000bb8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000baa:	4b25      	ldr	r3, [pc, #148]	; (8000c40 <HAL_GPIO_Init+0x2b0>)
 8000bac:	689a      	ldr	r2, [r3, #8]
 8000bae:	4924      	ldr	r1, [pc, #144]	; (8000c40 <HAL_GPIO_Init+0x2b0>)
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	608b      	str	r3, [r1, #8]
 8000bb6:	e006      	b.n	8000bc6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bb8:	4b21      	ldr	r3, [pc, #132]	; (8000c40 <HAL_GPIO_Init+0x2b0>)
 8000bba:	689a      	ldr	r2, [r3, #8]
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	491f      	ldr	r1, [pc, #124]	; (8000c40 <HAL_GPIO_Init+0x2b0>)
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d006      	beq.n	8000be0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bd2:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <HAL_GPIO_Init+0x2b0>)
 8000bd4:	68da      	ldr	r2, [r3, #12]
 8000bd6:	491a      	ldr	r1, [pc, #104]	; (8000c40 <HAL_GPIO_Init+0x2b0>)
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	60cb      	str	r3, [r1, #12]
 8000bde:	e006      	b.n	8000bee <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000be0:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <HAL_GPIO_Init+0x2b0>)
 8000be2:	68da      	ldr	r2, [r3, #12]
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	43db      	mvns	r3, r3
 8000be8:	4915      	ldr	r1, [pc, #84]	; (8000c40 <HAL_GPIO_Init+0x2b0>)
 8000bea:	4013      	ands	r3, r2
 8000bec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	f47f aed0 	bne.w	80009a4 <HAL_GPIO_Init+0x14>
  }
}
 8000c04:	bf00      	nop
 8000c06:	372c      	adds	r7, #44	; 0x2c
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	10210000 	.word	0x10210000
 8000c14:	10110000 	.word	0x10110000
 8000c18:	10120000 	.word	0x10120000
 8000c1c:	10310000 	.word	0x10310000
 8000c20:	10320000 	.word	0x10320000
 8000c24:	10220000 	.word	0x10220000
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	40010000 	.word	0x40010000
 8000c30:	40010800 	.word	0x40010800
 8000c34:	40010c00 	.word	0x40010c00
 8000c38:	40011000 	.word	0x40011000
 8000c3c:	40011400 	.word	0x40011400
 8000c40:	40010400 	.word	0x40010400

08000c44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	807b      	strh	r3, [r7, #2]
 8000c50:	4613      	mov	r3, r2
 8000c52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c54:	787b      	ldrb	r3, [r7, #1]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d003      	beq.n	8000c62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c5a:	887a      	ldrh	r2, [r7, #2]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c60:	e003      	b.n	8000c6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c62:	887b      	ldrh	r3, [r7, #2]
 8000c64:	041a      	lsls	r2, r3, #16
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	611a      	str	r2, [r3, #16]
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d101      	bne.n	8000c86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e10f      	b.n	8000ea6 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d106      	bne.n	8000ca0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2200      	movs	r2, #0
 8000c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff fbdc 	bl	8000458 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2224      	movs	r2, #36	; 0x24
 8000ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f022 0201 	bic.w	r2, r2, #1
 8000cb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000cb8:	f001 fd34 	bl	8002724 <HAL_RCC_GetPCLK1Freq>
 8000cbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	4a7b      	ldr	r2, [pc, #492]	; (8000eb0 <HAL_I2C_Init+0x23c>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d807      	bhi.n	8000cd8 <HAL_I2C_Init+0x64>
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4a7a      	ldr	r2, [pc, #488]	; (8000eb4 <HAL_I2C_Init+0x240>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	bf94      	ite	ls
 8000cd0:	2301      	movls	r3, #1
 8000cd2:	2300      	movhi	r3, #0
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	e006      	b.n	8000ce6 <HAL_I2C_Init+0x72>
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	4a77      	ldr	r2, [pc, #476]	; (8000eb8 <HAL_I2C_Init+0x244>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	bf94      	ite	ls
 8000ce0:	2301      	movls	r3, #1
 8000ce2:	2300      	movhi	r3, #0
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e0db      	b.n	8000ea6 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	4a72      	ldr	r2, [pc, #456]	; (8000ebc <HAL_I2C_Init+0x248>)
 8000cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf6:	0c9b      	lsrs	r3, r3, #18
 8000cf8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	68ba      	ldr	r2, [r7, #8]
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	6a1b      	ldr	r3, [r3, #32]
 8000d14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	4a64      	ldr	r2, [pc, #400]	; (8000eb0 <HAL_I2C_Init+0x23c>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d802      	bhi.n	8000d28 <HAL_I2C_Init+0xb4>
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	3301      	adds	r3, #1
 8000d26:	e009      	b.n	8000d3c <HAL_I2C_Init+0xc8>
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d2e:	fb02 f303 	mul.w	r3, r2, r3
 8000d32:	4a63      	ldr	r2, [pc, #396]	; (8000ec0 <HAL_I2C_Init+0x24c>)
 8000d34:	fba2 2303 	umull	r2, r3, r2, r3
 8000d38:	099b      	lsrs	r3, r3, #6
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	6812      	ldr	r2, [r2, #0]
 8000d40:	430b      	orrs	r3, r1
 8000d42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000d4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	4956      	ldr	r1, [pc, #344]	; (8000eb0 <HAL_I2C_Init+0x23c>)
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d80d      	bhi.n	8000d78 <HAL_I2C_Init+0x104>
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	1e59      	subs	r1, r3, #1
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d70:	2b04      	cmp	r3, #4
 8000d72:	bf38      	it	cc
 8000d74:	2304      	movcc	r3, #4
 8000d76:	e04f      	b.n	8000e18 <HAL_I2C_Init+0x1a4>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d111      	bne.n	8000da4 <HAL_I2C_Init+0x130>
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	1e58      	subs	r0, r3, #1
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6859      	ldr	r1, [r3, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	440b      	add	r3, r1
 8000d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d92:	3301      	adds	r3, #1
 8000d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	bf0c      	ite	eq
 8000d9c:	2301      	moveq	r3, #1
 8000d9e:	2300      	movne	r3, #0
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	e012      	b.n	8000dca <HAL_I2C_Init+0x156>
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	1e58      	subs	r0, r3, #1
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6859      	ldr	r1, [r3, #4]
 8000dac:	460b      	mov	r3, r1
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	440b      	add	r3, r1
 8000db2:	0099      	lsls	r1, r3, #2
 8000db4:	440b      	add	r3, r1
 8000db6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dba:	3301      	adds	r3, #1
 8000dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	bf0c      	ite	eq
 8000dc4:	2301      	moveq	r3, #1
 8000dc6:	2300      	movne	r3, #0
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <HAL_I2C_Init+0x15e>
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e022      	b.n	8000e18 <HAL_I2C_Init+0x1a4>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d10e      	bne.n	8000df8 <HAL_I2C_Init+0x184>
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	1e58      	subs	r0, r3, #1
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6859      	ldr	r1, [r3, #4]
 8000de2:	460b      	mov	r3, r1
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	440b      	add	r3, r1
 8000de8:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dec:	3301      	adds	r3, #1
 8000dee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000df6:	e00f      	b.n	8000e18 <HAL_I2C_Init+0x1a4>
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	1e58      	subs	r0, r3, #1
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6859      	ldr	r1, [r3, #4]
 8000e00:	460b      	mov	r3, r1
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	440b      	add	r3, r1
 8000e06:	0099      	lsls	r1, r3, #2
 8000e08:	440b      	add	r3, r1
 8000e0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e0e:	3301      	adds	r3, #1
 8000e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e18:	6879      	ldr	r1, [r7, #4]
 8000e1a:	6809      	ldr	r1, [r1, #0]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	69da      	ldr	r2, [r3, #28]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6a1b      	ldr	r3, [r3, #32]
 8000e32:	431a      	orrs	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000e46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	6911      	ldr	r1, [r2, #16]
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	68d2      	ldr	r2, [r2, #12]
 8000e52:	4311      	orrs	r1, r2
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	6812      	ldr	r2, [r2, #0]
 8000e58:	430b      	orrs	r3, r1
 8000e5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	695a      	ldr	r2, [r3, #20]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	431a      	orrs	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	430a      	orrs	r2, r1
 8000e76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f042 0201 	orr.w	r2, r2, #1
 8000e86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2220      	movs	r2, #32
 8000e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	000186a0 	.word	0x000186a0
 8000eb4:	001e847f 	.word	0x001e847f
 8000eb8:	003d08ff 	.word	0x003d08ff
 8000ebc:	431bde83 	.word	0x431bde83
 8000ec0:	10624dd3 	.word	0x10624dd3

08000ec4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	; 0x28
 8000ec8:	af02      	add	r7, sp, #8
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	607a      	str	r2, [r7, #4]
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8000ed4:	f7ff fc22 	bl	800071c <HAL_GetTick>
 8000ed8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8000eda:	2301      	movs	r3, #1
 8000edc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b20      	cmp	r3, #32
 8000ee8:	f040 8105 	bne.w	80010f6 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	2319      	movs	r3, #25
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	4982      	ldr	r1, [pc, #520]	; (8001100 <HAL_I2C_IsDeviceReady+0x23c>)
 8000ef6:	68f8      	ldr	r0, [r7, #12]
 8000ef8:	f000 f906 	bl	8001108 <I2C_WaitOnFlagUntilTimeout>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8000f02:	2302      	movs	r3, #2
 8000f04:	e0f8      	b.n	80010f8 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d101      	bne.n	8000f14 <HAL_I2C_IsDeviceReady+0x50>
 8000f10:	2302      	movs	r3, #2
 8000f12:	e0f1      	b.n	80010f8 <HAL_I2C_IsDeviceReady+0x234>
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2201      	movs	r2, #1
 8000f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d007      	beq.n	8000f3a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f042 0201 	orr.w	r2, r2, #1
 8000f38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	2224      	movs	r2, #36	; 0x24
 8000f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2200      	movs	r2, #0
 8000f56:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4a6a      	ldr	r2, [pc, #424]	; (8001104 <HAL_I2C_IsDeviceReady+0x240>)
 8000f5c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f6c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	2200      	movs	r2, #0
 8000f76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000f7a:	68f8      	ldr	r0, [r7, #12]
 8000f7c:	f000 f8c4 	bl	8001108 <I2C_WaitOnFlagUntilTimeout>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e0b6      	b.n	80010f8 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000f8a:	897b      	ldrh	r3, [r7, #10]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	461a      	mov	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8000f98:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8000f9a:	f7ff fbbf 	bl	800071c <HAL_GetTick>
 8000f9e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	bf0c      	ite	eq
 8000fae:	2301      	moveq	r3, #1
 8000fb0:	2300      	movne	r3, #0
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	695b      	ldr	r3, [r3, #20]
 8000fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fc4:	bf0c      	ite	eq
 8000fc6:	2301      	moveq	r3, #1
 8000fc8:	2300      	movne	r3, #0
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8000fce:	e025      	b.n	800101c <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000fd0:	f7ff fba4 	bl	800071c <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	683a      	ldr	r2, [r7, #0]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d302      	bcc.n	8000fe6 <HAL_I2C_IsDeviceReady+0x122>
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d103      	bne.n	8000fee <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	22a0      	movs	r2, #160	; 0xa0
 8000fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	695b      	ldr	r3, [r3, #20]
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	bf0c      	ite	eq
 8000ffc:	2301      	moveq	r3, #1
 8000ffe:	2300      	movne	r3, #0
 8001000:	b2db      	uxtb	r3, r3
 8001002:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800100e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001012:	bf0c      	ite	eq
 8001014:	2301      	moveq	r3, #1
 8001016:	2300      	movne	r3, #0
 8001018:	b2db      	uxtb	r3, r3
 800101a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2ba0      	cmp	r3, #160	; 0xa0
 8001026:	d005      	beq.n	8001034 <HAL_I2C_IsDeviceReady+0x170>
 8001028:	7dfb      	ldrb	r3, [r7, #23]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d102      	bne.n	8001034 <HAL_I2C_IsDeviceReady+0x170>
 800102e:	7dbb      	ldrb	r3, [r7, #22]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d0cd      	beq.n	8000fd0 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2220      	movs	r2, #32
 8001038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	2b02      	cmp	r3, #2
 8001048:	d129      	bne.n	800109e <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001058:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	695b      	ldr	r3, [r3, #20]
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2319      	movs	r3, #25
 8001076:	2201      	movs	r2, #1
 8001078:	4921      	ldr	r1, [pc, #132]	; (8001100 <HAL_I2C_IsDeviceReady+0x23c>)
 800107a:	68f8      	ldr	r0, [r7, #12]
 800107c:	f000 f844 	bl	8001108 <I2C_WaitOnFlagUntilTimeout>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e036      	b.n	80010f8 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	2220      	movs	r2, #32
 800108e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	e02c      	b.n	80010f8 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010ac:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80010b6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2319      	movs	r3, #25
 80010be:	2201      	movs	r2, #1
 80010c0:	490f      	ldr	r1, [pc, #60]	; (8001100 <HAL_I2C_IsDeviceReady+0x23c>)
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	f000 f820 	bl	8001108 <I2C_WaitOnFlagUntilTimeout>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e012      	b.n	80010f8 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	3301      	adds	r3, #1
 80010d6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	429a      	cmp	r2, r3
 80010de:	f4ff af3e 	bcc.w	8000f5e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2220      	movs	r2, #32
 80010e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e000      	b.n	80010f8 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 80010f6:	2302      	movs	r3, #2
  }
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3720      	adds	r7, #32
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	00100002 	.word	0x00100002
 8001104:	ffff0000 	.word	0xffff0000

08001108 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	4613      	mov	r3, r2
 8001116:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001118:	e025      	b.n	8001166 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001120:	d021      	beq.n	8001166 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001122:	f7ff fafb 	bl	800071c <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	429a      	cmp	r2, r3
 8001130:	d302      	bcc.n	8001138 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d116      	bne.n	8001166 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2200      	movs	r2, #0
 800113c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2220      	movs	r2, #32
 8001142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2200      	movs	r2, #0
 800114a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f043 0220 	orr.w	r2, r3, #32
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2200      	movs	r2, #0
 800115e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e023      	b.n	80011ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	0c1b      	lsrs	r3, r3, #16
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b01      	cmp	r3, #1
 800116e:	d10d      	bne.n	800118c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	43da      	mvns	r2, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	4013      	ands	r3, r2
 800117c:	b29b      	uxth	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	bf0c      	ite	eq
 8001182:	2301      	moveq	r3, #1
 8001184:	2300      	movne	r3, #0
 8001186:	b2db      	uxtb	r3, r3
 8001188:	461a      	mov	r2, r3
 800118a:	e00c      	b.n	80011a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	43da      	mvns	r2, r3
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	4013      	ands	r3, r2
 8001198:	b29b      	uxth	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	bf0c      	ite	eq
 800119e:	2301      	moveq	r3, #1
 80011a0:	2300      	movne	r3, #0
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	461a      	mov	r2, r3
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d0b6      	beq.n	800111a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b8:	b08b      	sub	sp, #44	; 0x2c
 80011ba:	af06      	add	r7, sp, #24
 80011bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e0d3      	b.n	8001370 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d106      	bne.n	80011e2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f004 fa31 	bl	8005644 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2203      	movs	r2, #3
 80011e6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f001 fba7 	bl	8002942 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	603b      	str	r3, [r7, #0]
 80011fa:	687e      	ldr	r6, [r7, #4]
 80011fc:	466d      	mov	r5, sp
 80011fe:	f106 0410 	add.w	r4, r6, #16
 8001202:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001204:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001206:	6823      	ldr	r3, [r4, #0]
 8001208:	602b      	str	r3, [r5, #0]
 800120a:	1d33      	adds	r3, r6, #4
 800120c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800120e:	6838      	ldr	r0, [r7, #0]
 8001210:	f001 fb70 	bl	80028f4 <USB_CoreInit>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d005      	beq.n	8001226 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2202      	movs	r2, #2
 800121e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e0a4      	b.n	8001370 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f001 fba4 	bl	800297a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001232:	2300      	movs	r3, #0
 8001234:	73fb      	strb	r3, [r7, #15]
 8001236:	e035      	b.n	80012a4 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	015b      	lsls	r3, r3, #5
 800123e:	4413      	add	r3, r2
 8001240:	3329      	adds	r3, #41	; 0x29
 8001242:	2201      	movs	r2, #1
 8001244:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	015b      	lsls	r3, r3, #5
 800124c:	4413      	add	r3, r2
 800124e:	3328      	adds	r3, #40	; 0x28
 8001250:	7bfa      	ldrb	r2, [r7, #15]
 8001252:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	7bfa      	ldrb	r2, [r7, #15]
 8001258:	b291      	uxth	r1, r2
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	015b      	lsls	r3, r3, #5
 800125e:	4413      	add	r3, r2
 8001260:	3336      	adds	r3, #54	; 0x36
 8001262:	460a      	mov	r2, r1
 8001264:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001266:	7bfb      	ldrb	r3, [r7, #15]
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	015b      	lsls	r3, r3, #5
 800126c:	4413      	add	r3, r2
 800126e:	332b      	adds	r3, #43	; 0x2b
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	015b      	lsls	r3, r3, #5
 800127a:	4413      	add	r3, r2
 800127c:	3338      	adds	r3, #56	; 0x38
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	015b      	lsls	r3, r3, #5
 8001288:	4413      	add	r3, r2
 800128a:	333c      	adds	r3, #60	; 0x3c
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	3302      	adds	r3, #2
 8001296:	015b      	lsls	r3, r3, #5
 8001298:	4413      	add	r3, r2
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	3301      	adds	r3, #1
 80012a2:	73fb      	strb	r3, [r7, #15]
 80012a4:	7bfa      	ldrb	r2, [r7, #15]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d3c4      	bcc.n	8001238 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	73fb      	strb	r3, [r7, #15]
 80012b2:	e031      	b.n	8001318 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	015b      	lsls	r3, r3, #5
 80012ba:	4413      	add	r3, r2
 80012bc:	f203 1329 	addw	r3, r3, #297	; 0x129
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	015b      	lsls	r3, r3, #5
 80012ca:	4413      	add	r3, r2
 80012cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80012d0:	7bfa      	ldrb	r2, [r7, #15]
 80012d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	015b      	lsls	r3, r3, #5
 80012da:	4413      	add	r3, r2
 80012dc:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	015b      	lsls	r3, r3, #5
 80012ea:	4413      	add	r3, r2
 80012ec:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	015b      	lsls	r3, r3, #5
 80012fa:	4413      	add	r3, r2
 80012fc:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001304:	7bfb      	ldrb	r3, [r7, #15]
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	330a      	adds	r3, #10
 800130a:	015b      	lsls	r3, r3, #5
 800130c:	4413      	add	r3, r2
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	3301      	adds	r3, #1
 8001316:	73fb      	strb	r3, [r7, #15]
 8001318:	7bfa      	ldrb	r2, [r7, #15]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	429a      	cmp	r2, r3
 8001320:	d3c8      	bcc.n	80012b4 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	687e      	ldr	r6, [r7, #4]
 800132a:	466d      	mov	r5, sp
 800132c:	f106 0410 	add.w	r4, r6, #16
 8001330:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001332:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001334:	6823      	ldr	r3, [r4, #0]
 8001336:	602b      	str	r3, [r5, #0]
 8001338:	1d33      	adds	r3, r6, #4
 800133a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800133c:	6838      	ldr	r0, [r7, #0]
 800133e:	f001 fb28 	bl	8002992 <USB_DevInit>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d005      	beq.n	8001354 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2202      	movs	r2, #2
 800134c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e00d      	b.n	8001370 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2201      	movs	r2, #1
 8001360:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f002 fb66 	bl	8003a3a <USB_DevDisconnect>

  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001378 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001386:	2b01      	cmp	r3, #1
 8001388:	d101      	bne.n	800138e <HAL_PCD_Start+0x16>
 800138a:	2302      	movs	r3, #2
 800138c:	e016      	b.n	80013bc <HAL_PCD_Start+0x44>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2201      	movs	r2, #1
 8001392:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001396:	2101      	movs	r1, #1
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f004 fbba 	bl	8005b12 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f002 fb3f 	bl	8003a26 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f001 fab1 	bl	8002914 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f002 fb3c 	bl	8003a4e <USB_ReadInterrupts>
 80013d6:	4603      	mov	r3, r0
 80013d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013e0:	d102      	bne.n	80013e8 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 faf2 	bl	80019cc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f002 fb2e 	bl	8003a4e <USB_ReadInterrupts>
 80013f2:	4603      	mov	r3, r0
 80013f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013fc:	d112      	bne.n	8001424 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001406:	b29a      	uxth	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001410:	b292      	uxth	r2, r2
 8001412:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f004 f989 	bl	800572e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800141c:	2100      	movs	r1, #0
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 f8de 	bl	80015e0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f002 fb10 	bl	8003a4e <USB_ReadInterrupts>
 800142e:	4603      	mov	r3, r0
 8001430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001434:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001438:	d10b      	bne.n	8001452 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001442:	b29a      	uxth	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800144c:	b292      	uxth	r2, r2
 800144e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f002 faf9 	bl	8003a4e <USB_ReadInterrupts>
 800145c:	4603      	mov	r3, r0
 800145e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001466:	d10b      	bne.n	8001480 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001470:	b29a      	uxth	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800147a:	b292      	uxth	r2, r2
 800147c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f002 fae2 	bl	8003a4e <USB_ReadInterrupts>
 800148a:	4603      	mov	r3, r0
 800148c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001494:	d126      	bne.n	80014e4 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800149e:	b29a      	uxth	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0204 	bic.w	r2, r2, #4
 80014a8:	b292      	uxth	r2, r2
 80014aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 0208 	bic.w	r2, r2, #8
 80014c0:	b292      	uxth	r2, r2
 80014c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f004 f96a 	bl	80057a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80014de:	b292      	uxth	r2, r2
 80014e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f002 fab0 	bl	8003a4e <USB_ReadInterrupts>
 80014ee:	4603      	mov	r3, r0
 80014f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014f8:	d13d      	bne.n	8001576 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001502:	b29a      	uxth	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f042 0208 	orr.w	r2, r2, #8
 800150c:	b292      	uxth	r2, r2
 800150e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800151a:	b29a      	uxth	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001524:	b292      	uxth	r2, r2
 8001526:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001532:	b29a      	uxth	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f042 0204 	orr.w	r2, r2, #4
 800153c:	b292      	uxth	r2, r2
 800153e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f002 fa81 	bl	8003a4e <USB_ReadInterrupts>
 800154c:	4603      	mov	r3, r0
 800154e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001556:	d10b      	bne.n	8001570 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001560:	b29a      	uxth	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800156a:	b292      	uxth	r2, r2
 800156c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f004 f8fb 	bl	800576c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f002 fa67 	bl	8003a4e <USB_ReadInterrupts>
 8001580:	4603      	mov	r3, r0
 8001582:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800158a:	d10e      	bne.n	80015aa <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001594:	b29a      	uxth	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800159e:	b292      	uxth	r2, r2
 80015a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f004 f8b4 	bl	8005712 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f002 fa4d 	bl	8003a4e <USB_ReadInterrupts>
 80015b4:	4603      	mov	r3, r0
 80015b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015be:	d10b      	bne.n	80015d8 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015d2:	b292      	uxth	r2, r2
 80015d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d101      	bne.n	80015fa <HAL_PCD_SetAddress+0x1a>
 80015f6:	2302      	movs	r3, #2
 80015f8:	e013      	b.n	8001622 <HAL_PCD_SetAddress+0x42>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	78fa      	ldrb	r2, [r7, #3]
 8001606:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	78fa      	ldrb	r2, [r7, #3]
 8001610:	4611      	mov	r1, r2
 8001612:	4618      	mov	r0, r3
 8001614:	f002 f9f4 	bl	8003a00 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b084      	sub	sp, #16
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	4608      	mov	r0, r1
 8001634:	4611      	mov	r1, r2
 8001636:	461a      	mov	r2, r3
 8001638:	4603      	mov	r3, r0
 800163a:	70fb      	strb	r3, [r7, #3]
 800163c:	460b      	mov	r3, r1
 800163e:	803b      	strh	r3, [r7, #0]
 8001640:	4613      	mov	r3, r2
 8001642:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001644:	2300      	movs	r3, #0
 8001646:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001648:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800164c:	2b00      	cmp	r3, #0
 800164e:	da0b      	bge.n	8001668 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001650:	78fb      	ldrb	r3, [r7, #3]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	015b      	lsls	r3, r3, #5
 8001658:	3328      	adds	r3, #40	; 0x28
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2201      	movs	r2, #1
 8001664:	705a      	strb	r2, [r3, #1]
 8001666:	e00b      	b.n	8001680 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001668:	78fb      	ldrb	r3, [r7, #3]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	015b      	lsls	r3, r3, #5
 8001670:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	4413      	add	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2200      	movs	r2, #0
 800167e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001680:	78fb      	ldrb	r3, [r7, #3]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	b2da      	uxtb	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800168c:	883a      	ldrh	r2, [r7, #0]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	78ba      	ldrb	r2, [r7, #2]
 8001696:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	785b      	ldrb	r3, [r3, #1]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d004      	beq.n	80016aa <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80016aa:	78bb      	ldrb	r3, [r7, #2]
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d102      	bne.n	80016b6 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2200      	movs	r2, #0
 80016b4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d101      	bne.n	80016c4 <HAL_PCD_EP_Open+0x9a>
 80016c0:	2302      	movs	r3, #2
 80016c2:	e00e      	b.n	80016e2 <HAL_PCD_EP_Open+0xb8>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68f9      	ldr	r1, [r7, #12]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f001 f982 	bl	80029dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80016e0:	7afb      	ldrb	r3, [r7, #11]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b084      	sub	sp, #16
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	460b      	mov	r3, r1
 80016f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	da0b      	bge.n	8001716 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016fe:	78fb      	ldrb	r3, [r7, #3]
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	015b      	lsls	r3, r3, #5
 8001706:	3328      	adds	r3, #40	; 0x28
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	4413      	add	r3, r2
 800170c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2201      	movs	r2, #1
 8001712:	705a      	strb	r2, [r3, #1]
 8001714:	e00b      	b.n	800172e <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001716:	78fb      	ldrb	r3, [r7, #3]
 8001718:	f003 0307 	and.w	r3, r3, #7
 800171c:	015b      	lsls	r3, r3, #5
 800171e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	4413      	add	r3, r2
 8001726:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2200      	movs	r2, #0
 800172c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800172e:	78fb      	ldrb	r3, [r7, #3]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	b2da      	uxtb	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001740:	2b01      	cmp	r3, #1
 8001742:	d101      	bne.n	8001748 <HAL_PCD_EP_Close+0x5e>
 8001744:	2302      	movs	r3, #2
 8001746:	e00e      	b.n	8001766 <HAL_PCD_EP_Close+0x7c>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68f9      	ldr	r1, [r7, #12]
 8001756:	4618      	mov	r0, r3
 8001758:	f001 fc2e 	bl	8002fb8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b086      	sub	sp, #24
 8001772:	af00      	add	r7, sp, #0
 8001774:	60f8      	str	r0, [r7, #12]
 8001776:	607a      	str	r2, [r7, #4]
 8001778:	603b      	str	r3, [r7, #0]
 800177a:	460b      	mov	r3, r1
 800177c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800177e:	7afb      	ldrb	r3, [r7, #11]
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	015b      	lsls	r3, r3, #5
 8001786:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	4413      	add	r3, r2
 800178e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	2200      	movs	r2, #0
 80017a0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	2200      	movs	r2, #0
 80017a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017a8:	7afb      	ldrb	r3, [r7, #11]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80017b4:	7afb      	ldrb	r3, [r7, #11]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d106      	bne.n	80017cc <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6979      	ldr	r1, [r7, #20]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f001 fd8d 	bl	80032e4 <USB_EPStartXfer>
 80017ca:	e005      	b.n	80017d8 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6979      	ldr	r1, [r7, #20]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f001 fd86 	bl	80032e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	460b      	mov	r3, r1
 80017ec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80017ee:	78fb      	ldrb	r3, [r7, #3]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	330a      	adds	r3, #10
 80017f8:	015b      	lsls	r3, r3, #5
 80017fa:	4413      	add	r3, r2
 80017fc:	3304      	adds	r3, #4
 80017fe:	681b      	ldr	r3, [r3, #0]
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr

0800180a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b086      	sub	sp, #24
 800180e:	af00      	add	r7, sp, #0
 8001810:	60f8      	str	r0, [r7, #12]
 8001812:	607a      	str	r2, [r7, #4]
 8001814:	603b      	str	r3, [r7, #0]
 8001816:	460b      	mov	r3, r1
 8001818:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800181a:	7afb      	ldrb	r3, [r7, #11]
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	015b      	lsls	r3, r3, #5
 8001822:	3328      	adds	r3, #40	; 0x28
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	4413      	add	r3, r2
 8001828:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	2200      	movs	r2, #0
 800183a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	2201      	movs	r2, #1
 8001840:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001842:	7afb      	ldrb	r3, [r7, #11]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	b2da      	uxtb	r2, r3
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800184e:	7afb      	ldrb	r3, [r7, #11]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	2b00      	cmp	r3, #0
 8001856:	d106      	bne.n	8001866 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6979      	ldr	r1, [r7, #20]
 800185e:	4618      	mov	r0, r3
 8001860:	f001 fd40 	bl	80032e4 <USB_EPStartXfer>
 8001864:	e005      	b.n	8001872 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6979      	ldr	r1, [r7, #20]
 800186c:	4618      	mov	r0, r3
 800186e:	f001 fd39 	bl	80032e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	460b      	mov	r3, r1
 8001886:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001888:	78fb      	ldrb	r3, [r7, #3]
 800188a:	f003 0207 	and.w	r2, r3, #7
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	429a      	cmp	r2, r3
 8001894:	d901      	bls.n	800189a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e046      	b.n	8001928 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800189a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	da0b      	bge.n	80018ba <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018a2:	78fb      	ldrb	r3, [r7, #3]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	015b      	lsls	r3, r3, #5
 80018aa:	3328      	adds	r3, #40	; 0x28
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	4413      	add	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2201      	movs	r2, #1
 80018b6:	705a      	strb	r2, [r3, #1]
 80018b8:	e009      	b.n	80018ce <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80018ba:	78fb      	ldrb	r3, [r7, #3]
 80018bc:	015b      	lsls	r3, r3, #5
 80018be:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2200      	movs	r2, #0
 80018cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2201      	movs	r2, #1
 80018d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018d4:	78fb      	ldrb	r3, [r7, #3]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d101      	bne.n	80018ee <HAL_PCD_EP_SetStall+0x72>
 80018ea:	2302      	movs	r3, #2
 80018ec:	e01c      	b.n	8001928 <HAL_PCD_EP_SetStall+0xac>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68f9      	ldr	r1, [r7, #12]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f001 ffa9 	bl	8003854 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001902:	78fb      	ldrb	r3, [r7, #3]
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	2b00      	cmp	r3, #0
 800190a:	d108      	bne.n	800191e <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001916:	4619      	mov	r1, r3
 8001918:	4610      	mov	r0, r2
 800191a:	f002 f8a7 	bl	8003a6c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	f003 020f 	and.w	r2, r3, #15
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	429a      	cmp	r2, r3
 8001948:	d901      	bls.n	800194e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e03a      	b.n	80019c4 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800194e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001952:	2b00      	cmp	r3, #0
 8001954:	da0b      	bge.n	800196e <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001956:	78fb      	ldrb	r3, [r7, #3]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	015b      	lsls	r3, r3, #5
 800195e:	3328      	adds	r3, #40	; 0x28
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	4413      	add	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2201      	movs	r2, #1
 800196a:	705a      	strb	r2, [r3, #1]
 800196c:	e00b      	b.n	8001986 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800196e:	78fb      	ldrb	r3, [r7, #3]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	015b      	lsls	r3, r3, #5
 8001976:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	4413      	add	r3, r2
 800197e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2200      	movs	r2, #0
 8001984:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2200      	movs	r2, #0
 800198a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800198c:	78fb      	ldrb	r3, [r7, #3]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	b2da      	uxtb	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d101      	bne.n	80019a6 <HAL_PCD_EP_ClrStall+0x76>
 80019a2:	2302      	movs	r3, #2
 80019a4:	e00e      	b.n	80019c4 <HAL_PCD_EP_ClrStall+0x94>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68f9      	ldr	r1, [r7, #12]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f001 ff8f 	bl	80038d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80019cc:	b590      	push	{r4, r7, lr}
 80019ce:	b089      	sub	sp, #36	; 0x24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80019d4:	e282      	b.n	8001edc <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019de:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80019e0:	8afb      	ldrh	r3, [r7, #22]
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	f003 030f 	and.w	r3, r3, #15
 80019e8:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80019ea:	7d7b      	ldrb	r3, [r7, #21]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f040 8142 	bne.w	8001c76 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80019f2:	8afb      	ldrh	r3, [r7, #22]
 80019f4:	f003 0310 	and.w	r3, r3, #16
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d151      	bne.n	8001aa0 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a0c:	b29c      	uxth	r4, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001a16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3328      	adds	r3, #40	; 0x28
 8001a22:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	461a      	mov	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	4413      	add	r3, r2
 8001a38:	3302      	adds	r3, #2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	6812      	ldr	r2, [r2, #0]
 8001a40:	4413      	add	r3, r2
 8001a42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	695a      	ldr	r2, [r3, #20]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	69db      	ldr	r3, [r3, #28]
 8001a58:	441a      	add	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001a5e:	2100      	movs	r1, #0
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f003 fe3f 	bl	80056e4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 8234 	beq.w	8001edc <PCD_EP_ISR_Handler+0x510>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f040 822f 	bne.w	8001edc <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	b292      	uxth	r2, r2
 8001a92:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001a9e:	e21d      	b.n	8001edc <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001aa6:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	881b      	ldrh	r3, [r3, #0]
 8001aae:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001ab0:	8a7b      	ldrh	r3, [r7, #18]
 8001ab2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d033      	beq.n	8001b22 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	4413      	add	r3, r2
 8001ace:	3306      	adds	r3, #6
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	6812      	ldr	r2, [r2, #0]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6818      	ldr	r0, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	f002 f806 	bl	8003b0a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	b29c      	uxth	r4, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001b16:	b292      	uxth	r2, r2
 8001b18:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f003 fdb8 	bl	8005690 <HAL_PCD_SetupStageCallback>
 8001b20:	e1dc      	b.n	8001edc <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b22:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f280 81d8 	bge.w	8001edc <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b38:	4013      	ands	r3, r2
 8001b3a:	b29c      	uxth	r4, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001b44:	b292      	uxth	r2, r2
 8001b46:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	461a      	mov	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3306      	adds	r3, #6
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6812      	ldr	r2, [r2, #0]
 8001b64:	4413      	add	r3, r2
 8001b66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	69db      	ldr	r3, [r3, #28]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d019      	beq.n	8001bb0 <PCD_EP_ISR_Handler+0x1e4>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d015      	beq.n	8001bb0 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6818      	ldr	r0, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6959      	ldr	r1, [r3, #20]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	f001 ffb8 	bl	8003b0a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	695a      	ldr	r2, [r3, #20]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	441a      	add	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001ba8:	2100      	movs	r1, #0
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f003 fd82 	bl	80056b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	461c      	mov	r4, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	441c      	add	r4, r3
 8001bc2:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8001bc6:	461c      	mov	r4, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d10e      	bne.n	8001bee <PCD_EP_ISR_Handler+0x222>
 8001bd0:	8823      	ldrh	r3, [r4, #0]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	8023      	strh	r3, [r4, #0]
 8001bdc:	8823      	ldrh	r3, [r4, #0]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001be4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	8023      	strh	r3, [r4, #0]
 8001bec:	e02d      	b.n	8001c4a <PCD_EP_ISR_Handler+0x27e>
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	2b3e      	cmp	r3, #62	; 0x3e
 8001bf4:	d812      	bhi.n	8001c1c <PCD_EP_ISR_Handler+0x250>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	085b      	lsrs	r3, r3, #1
 8001bfc:	61bb      	str	r3, [r7, #24]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d002      	beq.n	8001c10 <PCD_EP_ISR_Handler+0x244>
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	61bb      	str	r3, [r7, #24]
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	029b      	lsls	r3, r3, #10
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	8023      	strh	r3, [r4, #0]
 8001c1a:	e016      	b.n	8001c4a <PCD_EP_ISR_Handler+0x27e>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	095b      	lsrs	r3, r3, #5
 8001c22:	61bb      	str	r3, [r7, #24]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	f003 031f 	and.w	r3, r3, #31
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d102      	bne.n	8001c36 <PCD_EP_ISR_Handler+0x26a>
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	61bb      	str	r3, [r7, #24]
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	029b      	lsls	r3, r3, #10
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c5a:	b29c      	uxth	r4, r3
 8001c5c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001c60:	b29c      	uxth	r4, r3
 8001c62:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001c66:	b29c      	uxth	r4, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4ba2      	ldr	r3, [pc, #648]	; (8001ef8 <PCD_EP_ISR_Handler+0x52c>)
 8001c6e:	4323      	orrs	r3, r4
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	8013      	strh	r3, [r2, #0]
 8001c74:	e132      	b.n	8001edc <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	7d7b      	ldrb	r3, [r7, #21]
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c86:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f280 80d1 	bge.w	8001e32 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	7d7b      	ldrb	r3, [r7, #21]
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	b29c      	uxth	r4, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	7d7b      	ldrb	r3, [r7, #21]
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001cb8:	b292      	uxth	r2, r2
 8001cba:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001cbc:	7d7b      	ldrb	r3, [r7, #21]
 8001cbe:	015b      	lsls	r3, r3, #5
 8001cc0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	7b1b      	ldrb	r3, [r3, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d121      	bne.n	8001d16 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	461a      	mov	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3306      	adds	r3, #6
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6812      	ldr	r2, [r2, #0]
 8001cee:	4413      	add	r3, r2
 8001cf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cfa:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8001cfc:	8bfb      	ldrh	r3, [r7, #30]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d072      	beq.n	8001de8 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6818      	ldr	r0, [r3, #0]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6959      	ldr	r1, [r3, #20]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	88da      	ldrh	r2, [r3, #6]
 8001d0e:	8bfb      	ldrh	r3, [r7, #30]
 8001d10:	f001 fefb 	bl	8003b0a <USB_ReadPMA>
 8001d14:	e068      	b.n	8001de8 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d021      	beq.n	8001d74 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	4413      	add	r3, r2
 8001d44:	3302      	adds	r3, #2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d58:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001d5a:	8bfb      	ldrh	r3, [r7, #30]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d02a      	beq.n	8001db6 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6818      	ldr	r0, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6959      	ldr	r1, [r3, #20]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	891a      	ldrh	r2, [r3, #8]
 8001d6c:	8bfb      	ldrh	r3, [r7, #30]
 8001d6e:	f001 fecc 	bl	8003b0a <USB_ReadPMA>
 8001d72:	e020      	b.n	8001db6 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	461a      	mov	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	4413      	add	r3, r2
 8001d88:	3306      	adds	r3, #6
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	4413      	add	r3, r2
 8001d92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d9c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001d9e:	8bfb      	ldrh	r3, [r7, #30]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d008      	beq.n	8001db6 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6818      	ldr	r0, [r3, #0]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6959      	ldr	r1, [r3, #20]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	895a      	ldrh	r2, [r3, #10]
 8001db0:	8bfb      	ldrh	r3, [r7, #30]
 8001db2:	f001 feaa 	bl	8003b0a <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dd0:	b29c      	uxth	r4, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	441a      	add	r2, r3
 8001de0:	4b46      	ldr	r3, [pc, #280]	; (8001efc <PCD_EP_ISR_Handler+0x530>)
 8001de2:	4323      	orrs	r3, r4
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	69da      	ldr	r2, [r3, #28]
 8001dec:	8bfb      	ldrh	r3, [r7, #30]
 8001dee:	441a      	add	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	695a      	ldr	r2, [r3, #20]
 8001df8:	8bfb      	ldrh	r3, [r7, #30]
 8001dfa:	441a      	add	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d004      	beq.n	8001e12 <PCD_EP_ISR_Handler+0x446>
 8001e08:	8bfa      	ldrh	r2, [r7, #30]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d206      	bcs.n	8001e20 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	4619      	mov	r1, r3
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f003 fc4b 	bl	80056b4 <HAL_PCD_DataOutStageCallback>
 8001e1e:	e008      	b.n	8001e32 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	7819      	ldrb	r1, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	695a      	ldr	r2, [r3, #20]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff fc9e 	bl	800176e <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001e32:	8a7b      	ldrh	r3, [r7, #18]
 8001e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d04f      	beq.n	8001edc <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8001e3c:	7d7b      	ldrb	r3, [r7, #21]
 8001e3e:	015b      	lsls	r3, r3, #5
 8001e40:	3328      	adds	r3, #40	; 0x28
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	7d7b      	ldrb	r3, [r7, #21]
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	881b      	ldrh	r3, [r3, #0]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e60:	b29c      	uxth	r4, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	461a      	mov	r2, r3
 8001e68:	7d7b      	ldrb	r3, [r7, #21]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	441a      	add	r2, r3
 8001e6e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001e72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	461a      	mov	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	4413      	add	r3, r2
 8001e8e:	3302      	adds	r3, #2
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6812      	ldr	r2, [r2, #0]
 8001e96:	4413      	add	r3, r2
 8001e98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	695a      	ldr	r2, [r3, #20]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	441a      	add	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d106      	bne.n	8001eca <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f003 fc0e 	bl	80056e4 <HAL_PCD_DataInStageCallback>
 8001ec8:	e008      	b.n	8001edc <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	7819      	ldrb	r1, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	695a      	ldr	r2, [r3, #20]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff fc97 	bl	800180a <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	b21b      	sxth	r3, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f6ff ad74 	blt.w	80019d6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3724      	adds	r7, #36	; 0x24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd90      	pop	{r4, r7, pc}
 8001ef8:	ffff8080 	.word	0xffff8080
 8001efc:	ffff80c0 	.word	0xffff80c0

08001f00 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b087      	sub	sp, #28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	817b      	strh	r3, [r7, #10]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001f12:	897b      	ldrh	r3, [r7, #10]
 8001f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d008      	beq.n	8001f30 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f1e:	897b      	ldrh	r3, [r7, #10]
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	015b      	lsls	r3, r3, #5
 8001f26:	3328      	adds	r3, #40	; 0x28
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	e006      	b.n	8001f3e <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f30:	897b      	ldrh	r3, [r7, #10]
 8001f32:	015b      	lsls	r3, r3, #5
 8001f34:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001f3e:	893b      	ldrh	r3, [r7, #8]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d107      	bne.n	8001f54 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	2200      	movs	r2, #0
 8001f48:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	80da      	strh	r2, [r3, #6]
 8001f52:	e00b      	b.n	8001f6c <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	2201      	movs	r2, #1
 8001f58:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	0c1b      	lsrs	r3, r3, #16
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	371c      	adds	r7, #28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr

08001f78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e26c      	b.n	8002464 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 8087 	beq.w	80020a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f98:	4b92      	ldr	r3, [pc, #584]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 030c 	and.w	r3, r3, #12
 8001fa0:	2b04      	cmp	r3, #4
 8001fa2:	d00c      	beq.n	8001fbe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fa4:	4b8f      	ldr	r3, [pc, #572]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 030c 	and.w	r3, r3, #12
 8001fac:	2b08      	cmp	r3, #8
 8001fae:	d112      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x5e>
 8001fb0:	4b8c      	ldr	r3, [pc, #560]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fbc:	d10b      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fbe:	4b89      	ldr	r3, [pc, #548]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d06c      	beq.n	80020a4 <HAL_RCC_OscConfig+0x12c>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d168      	bne.n	80020a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e246      	b.n	8002464 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fde:	d106      	bne.n	8001fee <HAL_RCC_OscConfig+0x76>
 8001fe0:	4b80      	ldr	r3, [pc, #512]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a7f      	ldr	r2, [pc, #508]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8001fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fea:	6013      	str	r3, [r2, #0]
 8001fec:	e02e      	b.n	800204c <HAL_RCC_OscConfig+0xd4>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10c      	bne.n	8002010 <HAL_RCC_OscConfig+0x98>
 8001ff6:	4b7b      	ldr	r3, [pc, #492]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a7a      	ldr	r2, [pc, #488]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	4b78      	ldr	r3, [pc, #480]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a77      	ldr	r2, [pc, #476]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8002008:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	e01d      	b.n	800204c <HAL_RCC_OscConfig+0xd4>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002018:	d10c      	bne.n	8002034 <HAL_RCC_OscConfig+0xbc>
 800201a:	4b72      	ldr	r3, [pc, #456]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a71      	ldr	r2, [pc, #452]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8002020:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	4b6f      	ldr	r3, [pc, #444]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a6e      	ldr	r2, [pc, #440]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 800202c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	e00b      	b.n	800204c <HAL_RCC_OscConfig+0xd4>
 8002034:	4b6b      	ldr	r3, [pc, #428]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a6a      	ldr	r2, [pc, #424]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 800203a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	4b68      	ldr	r3, [pc, #416]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a67      	ldr	r2, [pc, #412]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8002046:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800204a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d013      	beq.n	800207c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7fe fb62 	bl	800071c <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800205c:	f7fe fb5e 	bl	800071c <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b64      	cmp	r3, #100	; 0x64
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e1fa      	b.n	8002464 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206e:	4b5d      	ldr	r3, [pc, #372]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0xe4>
 800207a:	e014      	b.n	80020a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207c:	f7fe fb4e 	bl	800071c <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002084:	f7fe fb4a 	bl	800071c <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b64      	cmp	r3, #100	; 0x64
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e1e6      	b.n	8002464 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002096:	4b53      	ldr	r3, [pc, #332]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0x10c>
 80020a2:	e000      	b.n	80020a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d063      	beq.n	800217a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020b2:	4b4c      	ldr	r3, [pc, #304]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00b      	beq.n	80020d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020be:	4b49      	ldr	r3, [pc, #292]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 030c 	and.w	r3, r3, #12
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d11c      	bne.n	8002104 <HAL_RCC_OscConfig+0x18c>
 80020ca:	4b46      	ldr	r3, [pc, #280]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d116      	bne.n	8002104 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d6:	4b43      	ldr	r3, [pc, #268]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d005      	beq.n	80020ee <HAL_RCC_OscConfig+0x176>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d001      	beq.n	80020ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e1ba      	b.n	8002464 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ee:	4b3d      	ldr	r3, [pc, #244]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	4939      	ldr	r1, [pc, #228]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002102:	e03a      	b.n	800217a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d020      	beq.n	800214e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800210c:	4b36      	ldr	r3, [pc, #216]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 800210e:	2201      	movs	r2, #1
 8002110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002112:	f7fe fb03 	bl	800071c <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800211a:	f7fe faff 	bl	800071c <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e19b      	b.n	8002464 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212c:	4b2d      	ldr	r3, [pc, #180]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0f0      	beq.n	800211a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002138:	4b2a      	ldr	r3, [pc, #168]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	4927      	ldr	r1, [pc, #156]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8002148:	4313      	orrs	r3, r2
 800214a:	600b      	str	r3, [r1, #0]
 800214c:	e015      	b.n	800217a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800214e:	4b26      	ldr	r3, [pc, #152]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002154:	f7fe fae2 	bl	800071c <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800215c:	f7fe fade 	bl	800071c <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e17a      	b.n	8002464 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800216e:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f0      	bne.n	800215c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d03a      	beq.n	80021fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d019      	beq.n	80021c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800218e:	4b17      	ldr	r3, [pc, #92]	; (80021ec <HAL_RCC_OscConfig+0x274>)
 8002190:	2201      	movs	r2, #1
 8002192:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002194:	f7fe fac2 	bl	800071c <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800219c:	f7fe fabe 	bl	800071c <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e15a      	b.n	8002464 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ae:	4b0d      	ldr	r3, [pc, #52]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021ba:	2001      	movs	r0, #1
 80021bc:	f000 fac6 	bl	800274c <RCC_Delay>
 80021c0:	e01c      	b.n	80021fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021c2:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <HAL_RCC_OscConfig+0x274>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c8:	f7fe faa8 	bl	800071c <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ce:	e00f      	b.n	80021f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d0:	f7fe faa4 	bl	800071c <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d908      	bls.n	80021f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e140      	b.n	8002464 <HAL_RCC_OscConfig+0x4ec>
 80021e2:	bf00      	nop
 80021e4:	40021000 	.word	0x40021000
 80021e8:	42420000 	.word	0x42420000
 80021ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f0:	4b9e      	ldr	r3, [pc, #632]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1e9      	bne.n	80021d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 80a6 	beq.w	8002356 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800220a:	2300      	movs	r3, #0
 800220c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800220e:	4b97      	ldr	r3, [pc, #604]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10d      	bne.n	8002236 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800221a:	4b94      	ldr	r3, [pc, #592]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	4a93      	ldr	r2, [pc, #588]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 8002220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002224:	61d3      	str	r3, [r2, #28]
 8002226:	4b91      	ldr	r3, [pc, #580]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222e:	60bb      	str	r3, [r7, #8]
 8002230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002232:	2301      	movs	r3, #1
 8002234:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002236:	4b8e      	ldr	r3, [pc, #568]	; (8002470 <HAL_RCC_OscConfig+0x4f8>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223e:	2b00      	cmp	r3, #0
 8002240:	d118      	bne.n	8002274 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002242:	4b8b      	ldr	r3, [pc, #556]	; (8002470 <HAL_RCC_OscConfig+0x4f8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a8a      	ldr	r2, [pc, #552]	; (8002470 <HAL_RCC_OscConfig+0x4f8>)
 8002248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800224c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800224e:	f7fe fa65 	bl	800071c <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002256:	f7fe fa61 	bl	800071c <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b64      	cmp	r3, #100	; 0x64
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e0fd      	b.n	8002464 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002268:	4b81      	ldr	r3, [pc, #516]	; (8002470 <HAL_RCC_OscConfig+0x4f8>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0f0      	beq.n	8002256 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d106      	bne.n	800228a <HAL_RCC_OscConfig+0x312>
 800227c:	4b7b      	ldr	r3, [pc, #492]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	4a7a      	ldr	r2, [pc, #488]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	6213      	str	r3, [r2, #32]
 8002288:	e02d      	b.n	80022e6 <HAL_RCC_OscConfig+0x36e>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10c      	bne.n	80022ac <HAL_RCC_OscConfig+0x334>
 8002292:	4b76      	ldr	r3, [pc, #472]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	4a75      	ldr	r2, [pc, #468]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 8002298:	f023 0301 	bic.w	r3, r3, #1
 800229c:	6213      	str	r3, [r2, #32]
 800229e:	4b73      	ldr	r3, [pc, #460]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	4a72      	ldr	r2, [pc, #456]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 80022a4:	f023 0304 	bic.w	r3, r3, #4
 80022a8:	6213      	str	r3, [r2, #32]
 80022aa:	e01c      	b.n	80022e6 <HAL_RCC_OscConfig+0x36e>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	2b05      	cmp	r3, #5
 80022b2:	d10c      	bne.n	80022ce <HAL_RCC_OscConfig+0x356>
 80022b4:	4b6d      	ldr	r3, [pc, #436]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	4a6c      	ldr	r2, [pc, #432]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 80022ba:	f043 0304 	orr.w	r3, r3, #4
 80022be:	6213      	str	r3, [r2, #32]
 80022c0:	4b6a      	ldr	r3, [pc, #424]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	4a69      	ldr	r2, [pc, #420]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	6213      	str	r3, [r2, #32]
 80022cc:	e00b      	b.n	80022e6 <HAL_RCC_OscConfig+0x36e>
 80022ce:	4b67      	ldr	r3, [pc, #412]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	4a66      	ldr	r2, [pc, #408]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 80022d4:	f023 0301 	bic.w	r3, r3, #1
 80022d8:	6213      	str	r3, [r2, #32]
 80022da:	4b64      	ldr	r3, [pc, #400]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	4a63      	ldr	r2, [pc, #396]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 80022e0:	f023 0304 	bic.w	r3, r3, #4
 80022e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d015      	beq.n	800231a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ee:	f7fe fa15 	bl	800071c <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f4:	e00a      	b.n	800230c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f6:	f7fe fa11 	bl	800071c <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	f241 3288 	movw	r2, #5000	; 0x1388
 8002304:	4293      	cmp	r3, r2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e0ab      	b.n	8002464 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800230c:	4b57      	ldr	r3, [pc, #348]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0ee      	beq.n	80022f6 <HAL_RCC_OscConfig+0x37e>
 8002318:	e014      	b.n	8002344 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231a:	f7fe f9ff 	bl	800071c <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002320:	e00a      	b.n	8002338 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002322:	f7fe f9fb 	bl	800071c <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002330:	4293      	cmp	r3, r2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e095      	b.n	8002464 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002338:	4b4c      	ldr	r3, [pc, #304]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1ee      	bne.n	8002322 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002344:	7dfb      	ldrb	r3, [r7, #23]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d105      	bne.n	8002356 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800234a:	4b48      	ldr	r3, [pc, #288]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	4a47      	ldr	r2, [pc, #284]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 8002350:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002354:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 8081 	beq.w	8002462 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002360:	4b42      	ldr	r3, [pc, #264]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 030c 	and.w	r3, r3, #12
 8002368:	2b08      	cmp	r3, #8
 800236a:	d061      	beq.n	8002430 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69db      	ldr	r3, [r3, #28]
 8002370:	2b02      	cmp	r3, #2
 8002372:	d146      	bne.n	8002402 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002374:	4b3f      	ldr	r3, [pc, #252]	; (8002474 <HAL_RCC_OscConfig+0x4fc>)
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237a:	f7fe f9cf 	bl	800071c <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002382:	f7fe f9cb 	bl	800071c <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e067      	b.n	8002464 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002394:	4b35      	ldr	r3, [pc, #212]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1f0      	bne.n	8002382 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a8:	d108      	bne.n	80023bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023aa:	4b30      	ldr	r3, [pc, #192]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	492d      	ldr	r1, [pc, #180]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023bc:	4b2b      	ldr	r3, [pc, #172]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a19      	ldr	r1, [r3, #32]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	430b      	orrs	r3, r1
 80023ce:	4927      	ldr	r1, [pc, #156]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023d4:	4b27      	ldr	r3, [pc, #156]	; (8002474 <HAL_RCC_OscConfig+0x4fc>)
 80023d6:	2201      	movs	r2, #1
 80023d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023da:	f7fe f99f 	bl	800071c <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e2:	f7fe f99b 	bl	800071c <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e037      	b.n	8002464 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023f4:	4b1d      	ldr	r3, [pc, #116]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0f0      	beq.n	80023e2 <HAL_RCC_OscConfig+0x46a>
 8002400:	e02f      	b.n	8002462 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002402:	4b1c      	ldr	r3, [pc, #112]	; (8002474 <HAL_RCC_OscConfig+0x4fc>)
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002408:	f7fe f988 	bl	800071c <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002410:	f7fe f984 	bl	800071c <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e020      	b.n	8002464 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002422:	4b12      	ldr	r3, [pc, #72]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0x498>
 800242e:	e018      	b.n	8002462 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d101      	bne.n	800243c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e013      	b.n	8002464 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800243c:	4b0b      	ldr	r3, [pc, #44]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	429a      	cmp	r2, r3
 800244e:	d106      	bne.n	800245e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245a:	429a      	cmp	r2, r3
 800245c:	d001      	beq.n	8002462 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40021000 	.word	0x40021000
 8002470:	40007000 	.word	0x40007000
 8002474:	42420060 	.word	0x42420060

08002478 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0d0      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800248c:	4b6a      	ldr	r3, [pc, #424]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d910      	bls.n	80024bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249a:	4b67      	ldr	r3, [pc, #412]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f023 0207 	bic.w	r2, r3, #7
 80024a2:	4965      	ldr	r1, [pc, #404]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024aa:	4b63      	ldr	r3, [pc, #396]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d001      	beq.n	80024bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e0b8      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d020      	beq.n	800250a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d005      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024d4:	4b59      	ldr	r3, [pc, #356]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	4a58      	ldr	r2, [pc, #352]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0308 	and.w	r3, r3, #8
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d005      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024ec:	4b53      	ldr	r3, [pc, #332]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	4a52      	ldr	r2, [pc, #328]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f8:	4b50      	ldr	r3, [pc, #320]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	494d      	ldr	r1, [pc, #308]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002506:	4313      	orrs	r3, r2
 8002508:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d040      	beq.n	8002598 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d107      	bne.n	800252e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251e:	4b47      	ldr	r3, [pc, #284]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d115      	bne.n	8002556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e07f      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d107      	bne.n	8002546 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002536:	4b41      	ldr	r3, [pc, #260]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d109      	bne.n	8002556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e073      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002546:	4b3d      	ldr	r3, [pc, #244]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e06b      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002556:	4b39      	ldr	r3, [pc, #228]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f023 0203 	bic.w	r2, r3, #3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	4936      	ldr	r1, [pc, #216]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002564:	4313      	orrs	r3, r2
 8002566:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002568:	f7fe f8d8 	bl	800071c <HAL_GetTick>
 800256c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256e:	e00a      	b.n	8002586 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002570:	f7fe f8d4 	bl	800071c <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f241 3288 	movw	r2, #5000	; 0x1388
 800257e:	4293      	cmp	r3, r2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e053      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002586:	4b2d      	ldr	r3, [pc, #180]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 020c 	and.w	r2, r3, #12
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	429a      	cmp	r2, r3
 8002596:	d1eb      	bne.n	8002570 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002598:	4b27      	ldr	r3, [pc, #156]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d210      	bcs.n	80025c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a6:	4b24      	ldr	r3, [pc, #144]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 0207 	bic.w	r2, r3, #7
 80025ae:	4922      	ldr	r1, [pc, #136]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b6:	4b20      	ldr	r3, [pc, #128]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d001      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e032      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d008      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d4:	4b19      	ldr	r3, [pc, #100]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4916      	ldr	r1, [pc, #88]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d009      	beq.n	8002606 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025f2:	4b12      	ldr	r3, [pc, #72]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	490e      	ldr	r1, [pc, #56]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	4313      	orrs	r3, r2
 8002604:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002606:	f000 f821 	bl	800264c <HAL_RCC_GetSysClockFreq>
 800260a:	4601      	mov	r1, r0
 800260c:	4b0b      	ldr	r3, [pc, #44]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	091b      	lsrs	r3, r3, #4
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	4a0a      	ldr	r2, [pc, #40]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 8002618:	5cd3      	ldrb	r3, [r2, r3]
 800261a:	fa21 f303 	lsr.w	r3, r1, r3
 800261e:	4a09      	ldr	r2, [pc, #36]	; (8002644 <HAL_RCC_ClockConfig+0x1cc>)
 8002620:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002622:	4b09      	ldr	r3, [pc, #36]	; (8002648 <HAL_RCC_ClockConfig+0x1d0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe f836 	bl	8000698 <HAL_InitTick>

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40022000 	.word	0x40022000
 800263c:	40021000 	.word	0x40021000
 8002640:	0800649c 	.word	0x0800649c
 8002644:	20000000 	.word	0x20000000
 8002648:	20000004 	.word	0x20000004

0800264c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800264c:	b490      	push	{r4, r7}
 800264e:	b08a      	sub	sp, #40	; 0x28
 8002650:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002652:	4b2a      	ldr	r3, [pc, #168]	; (80026fc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002654:	1d3c      	adds	r4, r7, #4
 8002656:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002658:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800265c:	4b28      	ldr	r3, [pc, #160]	; (8002700 <HAL_RCC_GetSysClockFreq+0xb4>)
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
 8002666:	2300      	movs	r3, #0
 8002668:	61bb      	str	r3, [r7, #24]
 800266a:	2300      	movs	r3, #0
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002676:	4b23      	ldr	r3, [pc, #140]	; (8002704 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	2b04      	cmp	r3, #4
 8002684:	d002      	beq.n	800268c <HAL_RCC_GetSysClockFreq+0x40>
 8002686:	2b08      	cmp	r3, #8
 8002688:	d003      	beq.n	8002692 <HAL_RCC_GetSysClockFreq+0x46>
 800268a:	e02d      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800268c:	4b1e      	ldr	r3, [pc, #120]	; (8002708 <HAL_RCC_GetSysClockFreq+0xbc>)
 800268e:	623b      	str	r3, [r7, #32]
      break;
 8002690:	e02d      	b.n	80026ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	0c9b      	lsrs	r3, r3, #18
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800269e:	4413      	add	r3, r2
 80026a0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026a4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d013      	beq.n	80026d8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026b0:	4b14      	ldr	r3, [pc, #80]	; (8002704 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	0c5b      	lsrs	r3, r3, #17
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80026be:	4413      	add	r3, r2
 80026c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80026c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	4a0f      	ldr	r2, [pc, #60]	; (8002708 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026ca:	fb02 f203 	mul.w	r2, r2, r3
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
 80026d6:	e004      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	4a0c      	ldr	r2, [pc, #48]	; (800270c <HAL_RCC_GetSysClockFreq+0xc0>)
 80026dc:	fb02 f303 	mul.w	r3, r2, r3
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	623b      	str	r3, [r7, #32]
      break;
 80026e6:	e002      	b.n	80026ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026e8:	4b07      	ldr	r3, [pc, #28]	; (8002708 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026ea:	623b      	str	r3, [r7, #32]
      break;
 80026ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ee:	6a3b      	ldr	r3, [r7, #32]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3728      	adds	r7, #40	; 0x28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc90      	pop	{r4, r7}
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	08006440 	.word	0x08006440
 8002700:	08006450 	.word	0x08006450
 8002704:	40021000 	.word	0x40021000
 8002708:	007a1200 	.word	0x007a1200
 800270c:	003d0900 	.word	0x003d0900

08002710 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002714:	4b02      	ldr	r3, [pc, #8]	; (8002720 <HAL_RCC_GetHCLKFreq+0x10>)
 8002716:	681b      	ldr	r3, [r3, #0]
}
 8002718:	4618      	mov	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr
 8002720:	20000000 	.word	0x20000000

08002724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002728:	f7ff fff2 	bl	8002710 <HAL_RCC_GetHCLKFreq>
 800272c:	4601      	mov	r1, r0
 800272e:	4b05      	ldr	r3, [pc, #20]	; (8002744 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	0a1b      	lsrs	r3, r3, #8
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	4a03      	ldr	r2, [pc, #12]	; (8002748 <HAL_RCC_GetPCLK1Freq+0x24>)
 800273a:	5cd3      	ldrb	r3, [r2, r3]
 800273c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002740:	4618      	mov	r0, r3
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40021000 	.word	0x40021000
 8002748:	080064ac 	.word	0x080064ac

0800274c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002754:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <RCC_Delay+0x34>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a0a      	ldr	r2, [pc, #40]	; (8002784 <RCC_Delay+0x38>)
 800275a:	fba2 2303 	umull	r2, r3, r2, r3
 800275e:	0a5b      	lsrs	r3, r3, #9
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	fb02 f303 	mul.w	r3, r2, r3
 8002766:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002768:	bf00      	nop
  }
  while (Delay --);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1e5a      	subs	r2, r3, #1
 800276e:	60fa      	str	r2, [r7, #12]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1f9      	bne.n	8002768 <RCC_Delay+0x1c>
}
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	20000000 	.word	0x20000000
 8002784:	10624dd3 	.word	0x10624dd3

08002788 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	2300      	movs	r3, #0
 8002796:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d07d      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80027a4:	2300      	movs	r3, #0
 80027a6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027a8:	4b4f      	ldr	r3, [pc, #316]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10d      	bne.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027b4:	4b4c      	ldr	r3, [pc, #304]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	4a4b      	ldr	r2, [pc, #300]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027be:	61d3      	str	r3, [r2, #28]
 80027c0:	4b49      	ldr	r3, [pc, #292]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c8:	60bb      	str	r3, [r7, #8]
 80027ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027cc:	2301      	movs	r3, #1
 80027ce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d0:	4b46      	ldr	r3, [pc, #280]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d118      	bne.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027dc:	4b43      	ldr	r3, [pc, #268]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a42      	ldr	r2, [pc, #264]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027e8:	f7fd ff98 	bl	800071c <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ee:	e008      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f0:	f7fd ff94 	bl	800071c <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b64      	cmp	r3, #100	; 0x64
 80027fc:	d901      	bls.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e06d      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002802:	4b3a      	ldr	r3, [pc, #232]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800280e:	4b36      	ldr	r3, [pc, #216]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002816:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d02e      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	429a      	cmp	r2, r3
 800282a:	d027      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800282c:	4b2e      	ldr	r3, [pc, #184]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002834:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002836:	4b2e      	ldr	r3, [pc, #184]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002838:	2201      	movs	r2, #1
 800283a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800283c:	4b2c      	ldr	r3, [pc, #176]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002842:	4a29      	ldr	r2, [pc, #164]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d014      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002852:	f7fd ff63 	bl	800071c <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002858:	e00a      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285a:	f7fd ff5f 	bl	800071c <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	f241 3288 	movw	r2, #5000	; 0x1388
 8002868:	4293      	cmp	r3, r2
 800286a:	d901      	bls.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e036      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002870:	4b1d      	ldr	r3, [pc, #116]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0ee      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800287c:	4b1a      	ldr	r3, [pc, #104]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	4917      	ldr	r1, [pc, #92]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800288a:	4313      	orrs	r3, r2
 800288c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800288e:	7dfb      	ldrb	r3, [r7, #23]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d105      	bne.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002894:	4b14      	ldr	r3, [pc, #80]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	4a13      	ldr	r2, [pc, #76]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800289a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800289e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d008      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028ac:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	490b      	ldr	r1, [pc, #44]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0310 	and.w	r3, r3, #16
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d008      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028ca:	4b07      	ldr	r3, [pc, #28]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	4904      	ldr	r1, [pc, #16]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40021000 	.word	0x40021000
 80028ec:	40007000 	.word	0x40007000
 80028f0:	42420440 	.word	0x42420440

080028f4 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80028f4:	b084      	sub	sp, #16
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
 80028fe:	f107 0014 	add.w	r0, r7, #20
 8002902:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	b004      	add	sp, #16
 8002912:	4770      	bx	lr

08002914 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800291c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002920:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002928:	b29a      	uxth	r2, r3
 800292a:	89fb      	ldrh	r3, [r7, #14]
 800292c:	4313      	orrs	r3, r2
 800292e:	b29a      	uxth	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	bc80      	pop	{r7}
 8002940:	4770      	bx	lr

08002942 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002942:	b480      	push	{r7}
 8002944:	b085      	sub	sp, #20
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800294a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800294e:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002956:	b29b      	uxth	r3, r3
 8002958:	b21a      	sxth	r2, r3
 800295a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800295e:	43db      	mvns	r3, r3
 8002960:	b21b      	sxth	r3, r3
 8002962:	4013      	ands	r3, r2
 8002964:	b21b      	sxth	r3, r3
 8002966:	b29a      	uxth	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr

0800297a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	460b      	mov	r3, r1
 8002984:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr

08002992 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002992:	b084      	sub	sp, #16
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	f107 0014 	add.w	r0, r7, #20
 80029a0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff ffa5 	bl	8002914 <USB_EnableGlobalInt>

  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80029d6:	b004      	add	sp, #16
 80029d8:	4770      	bx	lr
	...

080029dc <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80029dc:	b490      	push	{r4, r7}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80029e6:	2300      	movs	r3, #0
 80029e8:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80029fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a00:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	78db      	ldrb	r3, [r3, #3]
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d819      	bhi.n	8002a3e <USB_ActivateEndpoint+0x62>
 8002a0a:	a201      	add	r2, pc, #4	; (adr r2, 8002a10 <USB_ActivateEndpoint+0x34>)
 8002a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a10:	08002a21 	.word	0x08002a21
 8002a14:	08002a35 	.word	0x08002a35
 8002a18:	08002a45 	.word	0x08002a45
 8002a1c:	08002a2b 	.word	0x08002a2b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002a20:	89bb      	ldrh	r3, [r7, #12]
 8002a22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a26:	81bb      	strh	r3, [r7, #12]
      break;
 8002a28:	e00d      	b.n	8002a46 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002a2a:	89bb      	ldrh	r3, [r7, #12]
 8002a2c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002a30:	81bb      	strh	r3, [r7, #12]
      break;
 8002a32:	e008      	b.n	8002a46 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002a34:	89bb      	ldrh	r3, [r7, #12]
 8002a36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a3a:	81bb      	strh	r3, [r7, #12]
      break;
 8002a3c:	e003      	b.n	8002a46 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	73fb      	strb	r3, [r7, #15]
      break;
 8002a42:	e000      	b.n	8002a46 <USB_ActivateEndpoint+0x6a>
      break;
 8002a44:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	441a      	add	r2, r3
 8002a50:	89bb      	ldrh	r3, [r7, #12]
 8002a52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	4313      	orrs	r3, r2
 8002a86:	b29c      	uxth	r4, r3
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	441a      	add	r2, r3
 8002a92:	4b8a      	ldr	r3, [pc, #552]	; (8002cbc <USB_ActivateEndpoint+0x2e0>)
 8002a94:	4323      	orrs	r3, r4
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	7b1b      	ldrb	r3, [r3, #12]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f040 8112 	bne.w	8002cc8 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	785b      	ldrb	r3, [r3, #1]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d067      	beq.n	8002b7c <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002aac:	687c      	ldr	r4, [r7, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	441c      	add	r4, r3
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	4423      	add	r3, r4
 8002ac0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ac4:	461c      	mov	r4, r3
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	88db      	ldrh	r3, [r3, #6]
 8002aca:	085b      	lsrs	r3, r3, #1
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	b29c      	uxth	r4, r3
 8002ae2:	4623      	mov	r3, r4
 8002ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d014      	beq.n	8002b16 <USB_ActivateEndpoint+0x13a>
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b02:	b29c      	uxth	r4, r3
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	441a      	add	r2, r3
 8002b0e:	4b6c      	ldr	r3, [pc, #432]	; (8002cc0 <USB_ActivateEndpoint+0x2e4>)
 8002b10:	4323      	orrs	r3, r4
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	78db      	ldrb	r3, [r3, #3]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d018      	beq.n	8002b50 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b34:	b29c      	uxth	r4, r3
 8002b36:	f084 0320 	eor.w	r3, r4, #32
 8002b3a:	b29c      	uxth	r4, r3
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	441a      	add	r2, r3
 8002b46:	4b5d      	ldr	r3, [pc, #372]	; (8002cbc <USB_ActivateEndpoint+0x2e0>)
 8002b48:	4323      	orrs	r3, r4
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	8013      	strh	r3, [r2, #0]
 8002b4e:	e22b      	b.n	8002fa8 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	881b      	ldrh	r3, [r3, #0]
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b66:	b29c      	uxth	r4, r3
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	441a      	add	r2, r3
 8002b72:	4b52      	ldr	r3, [pc, #328]	; (8002cbc <USB_ActivateEndpoint+0x2e0>)
 8002b74:	4323      	orrs	r3, r4
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	8013      	strh	r3, [r2, #0]
 8002b7a:	e215      	b.n	8002fa8 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002b7c:	687c      	ldr	r4, [r7, #4]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	441c      	add	r4, r3
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	4423      	add	r3, r4
 8002b90:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002b94:	461c      	mov	r4, r3
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	88db      	ldrh	r3, [r3, #6]
 8002b9a:	085b      	lsrs	r3, r3, #1
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002ba4:	687c      	ldr	r4, [r7, #4]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	441c      	add	r4, r3
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	4423      	add	r3, r4
 8002bb8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bbc:	461c      	mov	r4, r3
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10e      	bne.n	8002be4 <USB_ActivateEndpoint+0x208>
 8002bc6:	8823      	ldrh	r3, [r4, #0]
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	8023      	strh	r3, [r4, #0]
 8002bd2:	8823      	ldrh	r3, [r4, #0]
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	8023      	strh	r3, [r4, #0]
 8002be2:	e02d      	b.n	8002c40 <USB_ActivateEndpoint+0x264>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	2b3e      	cmp	r3, #62	; 0x3e
 8002bea:	d812      	bhi.n	8002c12 <USB_ActivateEndpoint+0x236>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	085b      	lsrs	r3, r3, #1
 8002bf2:	60bb      	str	r3, [r7, #8]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d002      	beq.n	8002c06 <USB_ActivateEndpoint+0x22a>
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	3301      	adds	r3, #1
 8002c04:	60bb      	str	r3, [r7, #8]
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	029b      	lsls	r3, r3, #10
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	8023      	strh	r3, [r4, #0]
 8002c10:	e016      	b.n	8002c40 <USB_ActivateEndpoint+0x264>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	095b      	lsrs	r3, r3, #5
 8002c18:	60bb      	str	r3, [r7, #8]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	f003 031f 	and.w	r3, r3, #31
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d102      	bne.n	8002c2c <USB_ActivateEndpoint+0x250>
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	60bb      	str	r3, [r7, #8]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	029b      	lsls	r3, r3, #10
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	881b      	ldrh	r3, [r3, #0]
 8002c4c:	b29c      	uxth	r4, r3
 8002c4e:	4623      	mov	r3, r4
 8002c50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d014      	beq.n	8002c82 <USB_ActivateEndpoint+0x2a6>
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6e:	b29c      	uxth	r4, r3
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	441a      	add	r2, r3
 8002c7a:	4b12      	ldr	r3, [pc, #72]	; (8002cc4 <USB_ActivateEndpoint+0x2e8>)
 8002c7c:	4323      	orrs	r3, r4
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	881b      	ldrh	r3, [r3, #0]
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c98:	b29c      	uxth	r4, r3
 8002c9a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002c9e:	b29c      	uxth	r4, r3
 8002ca0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002ca4:	b29c      	uxth	r4, r3
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	441a      	add	r2, r3
 8002cb0:	4b02      	ldr	r3, [pc, #8]	; (8002cbc <USB_ActivateEndpoint+0x2e0>)
 8002cb2:	4323      	orrs	r3, r4
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	8013      	strh	r3, [r2, #0]
 8002cb8:	e176      	b.n	8002fa8 <USB_ActivateEndpoint+0x5cc>
 8002cba:	bf00      	nop
 8002cbc:	ffff8080 	.word	0xffff8080
 8002cc0:	ffff80c0 	.word	0xffff80c0
 8002cc4:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	881b      	ldrh	r3, [r3, #0]
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cde:	b29c      	uxth	r4, r3
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	441a      	add	r2, r3
 8002cea:	4b96      	ldr	r3, [pc, #600]	; (8002f44 <USB_ActivateEndpoint+0x568>)
 8002cec:	4323      	orrs	r3, r4
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002cf2:	687c      	ldr	r4, [r7, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	441c      	add	r4, r3
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	4423      	add	r3, r4
 8002d06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d0a:	461c      	mov	r4, r3
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	891b      	ldrh	r3, [r3, #8]
 8002d10:	085b      	lsrs	r3, r3, #1
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	8023      	strh	r3, [r4, #0]
 8002d1a:	687c      	ldr	r4, [r7, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	441c      	add	r4, r3
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	4423      	add	r3, r4
 8002d2e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002d32:	461c      	mov	r4, r3
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	895b      	ldrh	r3, [r3, #10]
 8002d38:	085b      	lsrs	r3, r3, #1
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	785b      	ldrb	r3, [r3, #1]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f040 8088 	bne.w	8002e5c <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	b29c      	uxth	r4, r3
 8002d5a:	4623      	mov	r3, r4
 8002d5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d014      	beq.n	8002d8e <USB_ActivateEndpoint+0x3b2>
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d7a:	b29c      	uxth	r4, r3
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	441a      	add	r2, r3
 8002d86:	4b70      	ldr	r3, [pc, #448]	; (8002f48 <USB_ActivateEndpoint+0x56c>)
 8002d88:	4323      	orrs	r3, r4
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4413      	add	r3, r2
 8002d98:	881b      	ldrh	r3, [r3, #0]
 8002d9a:	b29c      	uxth	r4, r3
 8002d9c:	4623      	mov	r3, r4
 8002d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d014      	beq.n	8002dd0 <USB_ActivateEndpoint+0x3f4>
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dbc:	b29c      	uxth	r4, r3
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	441a      	add	r2, r3
 8002dc8:	4b60      	ldr	r3, [pc, #384]	; (8002f4c <USB_ActivateEndpoint+0x570>)
 8002dca:	4323      	orrs	r3, r4
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	881b      	ldrh	r3, [r3, #0]
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de6:	b29c      	uxth	r4, r3
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	441a      	add	r2, r3
 8002df2:	4b56      	ldr	r3, [pc, #344]	; (8002f4c <USB_ActivateEndpoint+0x570>)
 8002df4:	4323      	orrs	r3, r4
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	881b      	ldrh	r3, [r3, #0]
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e10:	b29c      	uxth	r4, r3
 8002e12:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002e16:	b29c      	uxth	r4, r3
 8002e18:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002e1c:	b29c      	uxth	r4, r3
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	441a      	add	r2, r3
 8002e28:	4b49      	ldr	r3, [pc, #292]	; (8002f50 <USB_ActivateEndpoint+0x574>)
 8002e2a:	4323      	orrs	r3, r4
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e46:	b29c      	uxth	r4, r3
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	441a      	add	r2, r3
 8002e52:	4b3f      	ldr	r3, [pc, #252]	; (8002f50 <USB_ActivateEndpoint+0x574>)
 8002e54:	4323      	orrs	r3, r4
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	8013      	strh	r3, [r2, #0]
 8002e5a:	e0a5      	b.n	8002fa8 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	881b      	ldrh	r3, [r3, #0]
 8002e68:	b29c      	uxth	r4, r3
 8002e6a:	4623      	mov	r3, r4
 8002e6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d014      	beq.n	8002e9e <USB_ActivateEndpoint+0x4c2>
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e8a:	b29c      	uxth	r4, r3
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	441a      	add	r2, r3
 8002e96:	4b2c      	ldr	r3, [pc, #176]	; (8002f48 <USB_ActivateEndpoint+0x56c>)
 8002e98:	4323      	orrs	r3, r4
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	881b      	ldrh	r3, [r3, #0]
 8002eaa:	b29c      	uxth	r4, r3
 8002eac:	4623      	mov	r3, r4
 8002eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d014      	beq.n	8002ee0 <USB_ActivateEndpoint+0x504>
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ecc:	b29c      	uxth	r4, r3
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	441a      	add	r2, r3
 8002ed8:	4b1c      	ldr	r3, [pc, #112]	; (8002f4c <USB_ActivateEndpoint+0x570>)
 8002eda:	4323      	orrs	r3, r4
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4413      	add	r3, r2
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef6:	b29c      	uxth	r4, r3
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	441a      	add	r2, r3
 8002f02:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <USB_ActivateEndpoint+0x56c>)
 8002f04:	4323      	orrs	r3, r4
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	78db      	ldrb	r3, [r3, #3]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d020      	beq.n	8002f54 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	881b      	ldrh	r3, [r3, #0]
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f28:	b29c      	uxth	r4, r3
 8002f2a:	f084 0320 	eor.w	r3, r4, #32
 8002f2e:	b29c      	uxth	r4, r3
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	441a      	add	r2, r3
 8002f3a:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <USB_ActivateEndpoint+0x574>)
 8002f3c:	4323      	orrs	r3, r4
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	8013      	strh	r3, [r2, #0]
 8002f42:	e01c      	b.n	8002f7e <USB_ActivateEndpoint+0x5a2>
 8002f44:	ffff8180 	.word	0xffff8180
 8002f48:	ffffc080 	.word	0xffffc080
 8002f4c:	ffff80c0 	.word	0xffff80c0
 8002f50:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f6a:	b29c      	uxth	r4, r3
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	441a      	add	r2, r3
 8002f76:	4b0f      	ldr	r3, [pc, #60]	; (8002fb4 <USB_ActivateEndpoint+0x5d8>)
 8002f78:	4323      	orrs	r3, r4
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f94:	b29c      	uxth	r4, r3
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	441a      	add	r2, r3
 8002fa0:	4b04      	ldr	r3, [pc, #16]	; (8002fb4 <USB_ActivateEndpoint+0x5d8>)
 8002fa2:	4323      	orrs	r3, r4
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc90      	pop	{r4, r7}
 8002fb2:	4770      	bx	lr
 8002fb4:	ffff8080 	.word	0xffff8080

08002fb8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002fb8:	b490      	push	{r4, r7}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	7b1b      	ldrb	r3, [r3, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d171      	bne.n	80030ae <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	785b      	ldrb	r3, [r3, #1]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d036      	beq.n	8003040 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	b29c      	uxth	r4, r3
 8002fe0:	4623      	mov	r3, r4
 8002fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d014      	beq.n	8003014 <USB_DeactivateEndpoint+0x5c>
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	881b      	ldrh	r3, [r3, #0]
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003000:	b29c      	uxth	r4, r3
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	441a      	add	r2, r3
 800300c:	4b6b      	ldr	r3, [pc, #428]	; (80031bc <USB_DeactivateEndpoint+0x204>)
 800300e:	4323      	orrs	r3, r4
 8003010:	b29b      	uxth	r3, r3
 8003012:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	b29b      	uxth	r3, r3
 8003022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800302a:	b29c      	uxth	r4, r3
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	441a      	add	r2, r3
 8003036:	4b62      	ldr	r3, [pc, #392]	; (80031c0 <USB_DeactivateEndpoint+0x208>)
 8003038:	4323      	orrs	r3, r4
 800303a:	b29b      	uxth	r3, r3
 800303c:	8013      	strh	r3, [r2, #0]
 800303e:	e144      	b.n	80032ca <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	b29c      	uxth	r4, r3
 800304e:	4623      	mov	r3, r4
 8003050:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d014      	beq.n	8003082 <USB_DeactivateEndpoint+0xca>
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	b29b      	uxth	r3, r3
 8003066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800306a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800306e:	b29c      	uxth	r4, r3
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	441a      	add	r2, r3
 800307a:	4b52      	ldr	r3, [pc, #328]	; (80031c4 <USB_DeactivateEndpoint+0x20c>)
 800307c:	4323      	orrs	r3, r4
 800307e:	b29b      	uxth	r3, r3
 8003080:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	881b      	ldrh	r3, [r3, #0]
 800308e:	b29b      	uxth	r3, r3
 8003090:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003098:	b29c      	uxth	r4, r3
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	441a      	add	r2, r3
 80030a4:	4b46      	ldr	r3, [pc, #280]	; (80031c0 <USB_DeactivateEndpoint+0x208>)
 80030a6:	4323      	orrs	r3, r4
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	8013      	strh	r3, [r2, #0]
 80030ac:	e10d      	b.n	80032ca <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	785b      	ldrb	r3, [r3, #1]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f040 8088 	bne.w	80031c8 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	b29c      	uxth	r4, r3
 80030c6:	4623      	mov	r3, r4
 80030c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d014      	beq.n	80030fa <USB_DeactivateEndpoint+0x142>
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	b29b      	uxth	r3, r3
 80030de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e6:	b29c      	uxth	r4, r3
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	441a      	add	r2, r3
 80030f2:	4b34      	ldr	r3, [pc, #208]	; (80031c4 <USB_DeactivateEndpoint+0x20c>)
 80030f4:	4323      	orrs	r3, r4
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	b29c      	uxth	r4, r3
 8003108:	4623      	mov	r3, r4
 800310a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310e:	2b00      	cmp	r3, #0
 8003110:	d014      	beq.n	800313c <USB_DeactivateEndpoint+0x184>
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	b29b      	uxth	r3, r3
 8003120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003128:	b29c      	uxth	r4, r3
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	441a      	add	r2, r3
 8003134:	4b21      	ldr	r3, [pc, #132]	; (80031bc <USB_DeactivateEndpoint+0x204>)
 8003136:	4323      	orrs	r3, r4
 8003138:	b29b      	uxth	r3, r3
 800313a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	b29b      	uxth	r3, r3
 800314a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800314e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003152:	b29c      	uxth	r4, r3
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	441a      	add	r2, r3
 800315e:	4b17      	ldr	r3, [pc, #92]	; (80031bc <USB_DeactivateEndpoint+0x204>)
 8003160:	4323      	orrs	r3, r4
 8003162:	b29b      	uxth	r3, r3
 8003164:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	881b      	ldrh	r3, [r3, #0]
 8003172:	b29b      	uxth	r3, r3
 8003174:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800317c:	b29c      	uxth	r4, r3
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	441a      	add	r2, r3
 8003188:	4b0d      	ldr	r3, [pc, #52]	; (80031c0 <USB_DeactivateEndpoint+0x208>)
 800318a:	4323      	orrs	r3, r4
 800318c:	b29b      	uxth	r3, r3
 800318e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	b29b      	uxth	r3, r3
 800319e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031a6:	b29c      	uxth	r4, r3
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	441a      	add	r2, r3
 80031b2:	4b03      	ldr	r3, [pc, #12]	; (80031c0 <USB_DeactivateEndpoint+0x208>)
 80031b4:	4323      	orrs	r3, r4
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	8013      	strh	r3, [r2, #0]
 80031ba:	e086      	b.n	80032ca <USB_DeactivateEndpoint+0x312>
 80031bc:	ffff80c0 	.word	0xffff80c0
 80031c0:	ffff8080 	.word	0xffff8080
 80031c4:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	881b      	ldrh	r3, [r3, #0]
 80031d4:	b29c      	uxth	r4, r3
 80031d6:	4623      	mov	r3, r4
 80031d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d014      	beq.n	800320a <USB_DeactivateEndpoint+0x252>
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f6:	b29c      	uxth	r4, r3
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	441a      	add	r2, r3
 8003202:	4b35      	ldr	r3, [pc, #212]	; (80032d8 <USB_DeactivateEndpoint+0x320>)
 8003204:	4323      	orrs	r3, r4
 8003206:	b29b      	uxth	r3, r3
 8003208:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	b29c      	uxth	r4, r3
 8003218:	4623      	mov	r3, r4
 800321a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321e:	2b00      	cmp	r3, #0
 8003220:	d014      	beq.n	800324c <USB_DeactivateEndpoint+0x294>
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	881b      	ldrh	r3, [r3, #0]
 800322e:	b29b      	uxth	r3, r3
 8003230:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003238:	b29c      	uxth	r4, r3
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	441a      	add	r2, r3
 8003244:	4b25      	ldr	r3, [pc, #148]	; (80032dc <USB_DeactivateEndpoint+0x324>)
 8003246:	4323      	orrs	r3, r4
 8003248:	b29b      	uxth	r3, r3
 800324a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	b29b      	uxth	r3, r3
 800325a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800325e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003262:	b29c      	uxth	r4, r3
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	441a      	add	r2, r3
 800326e:	4b1a      	ldr	r3, [pc, #104]	; (80032d8 <USB_DeactivateEndpoint+0x320>)
 8003270:	4323      	orrs	r3, r4
 8003272:	b29b      	uxth	r3, r3
 8003274:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	881b      	ldrh	r3, [r3, #0]
 8003282:	b29b      	uxth	r3, r3
 8003284:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003288:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800328c:	b29c      	uxth	r4, r3
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	441a      	add	r2, r3
 8003298:	4b11      	ldr	r3, [pc, #68]	; (80032e0 <USB_DeactivateEndpoint+0x328>)
 800329a:	4323      	orrs	r3, r4
 800329c:	b29b      	uxth	r3, r3
 800329e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	881b      	ldrh	r3, [r3, #0]
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b6:	b29c      	uxth	r4, r3
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	441a      	add	r2, r3
 80032c2:	4b07      	ldr	r3, [pc, #28]	; (80032e0 <USB_DeactivateEndpoint+0x328>)
 80032c4:	4323      	orrs	r3, r4
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc90      	pop	{r4, r7}
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	ffffc080 	.word	0xffffc080
 80032dc:	ffff80c0 	.word	0xffff80c0
 80032e0:	ffff8080 	.word	0xffff8080

080032e4 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80032e4:	b590      	push	{r4, r7, lr}
 80032e6:	b08d      	sub	sp, #52	; 0x34
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	785b      	ldrb	r3, [r3, #1]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	f040 8160 	bne.w	80035b8 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	699a      	ldr	r2, [r3, #24]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	429a      	cmp	r2, r3
 8003302:	d909      	bls.n	8003318 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	699a      	ldr	r2, [r3, #24]
 800330e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003310:	1ad2      	subs	r2, r2, r3
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	619a      	str	r2, [r3, #24]
 8003316:	e005      	b.n	8003324 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2200      	movs	r2, #0
 8003322:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	7b1b      	ldrb	r3, [r3, #12]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d119      	bne.n	8003360 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	6959      	ldr	r1, [r3, #20]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	88da      	ldrh	r2, [r3, #6]
 8003334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003336:	b29b      	uxth	r3, r3
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 fba2 	bl	8003a82 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800333e:	687c      	ldr	r4, [r7, #4]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003346:	b29b      	uxth	r3, r3
 8003348:	441c      	add	r4, r3
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	4423      	add	r3, r4
 8003352:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003356:	461c      	mov	r4, r3
 8003358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335a:	b29b      	uxth	r3, r3
 800335c:	8023      	strh	r3, [r4, #0]
 800335e:	e10f      	b.n	8003580 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	b29b      	uxth	r3, r3
 800336e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003372:	2b00      	cmp	r3, #0
 8003374:	d065      	beq.n	8003442 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003376:	687c      	ldr	r4, [r7, #4]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	785b      	ldrb	r3, [r3, #1]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d148      	bne.n	8003412 <USB_EPStartXfer+0x12e>
 8003380:	687c      	ldr	r4, [r7, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003388:	b29b      	uxth	r3, r3
 800338a:	441c      	add	r4, r3
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	4423      	add	r3, r4
 8003394:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003398:	461c      	mov	r4, r3
 800339a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10e      	bne.n	80033be <USB_EPStartXfer+0xda>
 80033a0:	8823      	ldrh	r3, [r4, #0]
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	8023      	strh	r3, [r4, #0]
 80033ac:	8823      	ldrh	r3, [r4, #0]
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	8023      	strh	r3, [r4, #0]
 80033bc:	e03d      	b.n	800343a <USB_EPStartXfer+0x156>
 80033be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c0:	2b3e      	cmp	r3, #62	; 0x3e
 80033c2:	d810      	bhi.n	80033e6 <USB_EPStartXfer+0x102>
 80033c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c6:	085b      	lsrs	r3, r3, #1
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
 80033ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d002      	beq.n	80033da <USB_EPStartXfer+0xf6>
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	3301      	adds	r3, #1
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	b29b      	uxth	r3, r3
 80033de:	029b      	lsls	r3, r3, #10
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	8023      	strh	r3, [r4, #0]
 80033e4:	e029      	b.n	800343a <USB_EPStartXfer+0x156>
 80033e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e8:	095b      	lsrs	r3, r3, #5
 80033ea:	627b      	str	r3, [r7, #36]	; 0x24
 80033ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ee:	f003 031f 	and.w	r3, r3, #31
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d102      	bne.n	80033fc <USB_EPStartXfer+0x118>
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	3b01      	subs	r3, #1
 80033fa:	627b      	str	r3, [r7, #36]	; 0x24
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	b29b      	uxth	r3, r3
 8003400:	029b      	lsls	r3, r3, #10
 8003402:	b29b      	uxth	r3, r3
 8003404:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003408:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800340c:	b29b      	uxth	r3, r3
 800340e:	8023      	strh	r3, [r4, #0]
 8003410:	e013      	b.n	800343a <USB_EPStartXfer+0x156>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	785b      	ldrb	r3, [r3, #1]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d10f      	bne.n	800343a <USB_EPStartXfer+0x156>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003420:	b29b      	uxth	r3, r3
 8003422:	441c      	add	r4, r3
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	4423      	add	r3, r4
 800342c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	895b      	ldrh	r3, [r3, #10]
 800343e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003440:	e063      	b.n	800350a <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	785b      	ldrb	r3, [r3, #1]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d148      	bne.n	80034dc <USB_EPStartXfer+0x1f8>
 800344a:	687c      	ldr	r4, [r7, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003452:	b29b      	uxth	r3, r3
 8003454:	441c      	add	r4, r3
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	4423      	add	r3, r4
 800345e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003462:	461c      	mov	r4, r3
 8003464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10e      	bne.n	8003488 <USB_EPStartXfer+0x1a4>
 800346a:	8823      	ldrh	r3, [r4, #0]
 800346c:	b29b      	uxth	r3, r3
 800346e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003472:	b29b      	uxth	r3, r3
 8003474:	8023      	strh	r3, [r4, #0]
 8003476:	8823      	ldrh	r3, [r4, #0]
 8003478:	b29b      	uxth	r3, r3
 800347a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800347e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003482:	b29b      	uxth	r3, r3
 8003484:	8023      	strh	r3, [r4, #0]
 8003486:	e03d      	b.n	8003504 <USB_EPStartXfer+0x220>
 8003488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348a:	2b3e      	cmp	r3, #62	; 0x3e
 800348c:	d810      	bhi.n	80034b0 <USB_EPStartXfer+0x1cc>
 800348e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003490:	085b      	lsrs	r3, r3, #1
 8003492:	623b      	str	r3, [r7, #32]
 8003494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <USB_EPStartXfer+0x1c0>
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	3301      	adds	r3, #1
 80034a2:	623b      	str	r3, [r7, #32]
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	029b      	lsls	r3, r3, #10
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	8023      	strh	r3, [r4, #0]
 80034ae:	e029      	b.n	8003504 <USB_EPStartXfer+0x220>
 80034b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b2:	095b      	lsrs	r3, r3, #5
 80034b4:	623b      	str	r3, [r7, #32]
 80034b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b8:	f003 031f 	and.w	r3, r3, #31
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d102      	bne.n	80034c6 <USB_EPStartXfer+0x1e2>
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	623b      	str	r3, [r7, #32]
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	029b      	lsls	r3, r3, #10
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	8023      	strh	r3, [r4, #0]
 80034da:	e013      	b.n	8003504 <USB_EPStartXfer+0x220>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	785b      	ldrb	r3, [r3, #1]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d10f      	bne.n	8003504 <USB_EPStartXfer+0x220>
 80034e4:	687c      	ldr	r4, [r7, #4]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	441c      	add	r4, r3
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	4423      	add	r3, r4
 80034f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80034fc:	461c      	mov	r4, r3
 80034fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003500:	b29b      	uxth	r3, r3
 8003502:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	891b      	ldrh	r3, [r3, #8]
 8003508:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	6959      	ldr	r1, [r3, #20]
 800350e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003510:	b29b      	uxth	r3, r3
 8003512:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 fab4 	bl	8003a82 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	785b      	ldrb	r3, [r3, #1]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d115      	bne.n	800354e <USB_EPStartXfer+0x26a>
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	b29b      	uxth	r3, r3
 8003530:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003538:	b29c      	uxth	r4, r3
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	441a      	add	r2, r3
 8003544:	4b9a      	ldr	r3, [pc, #616]	; (80037b0 <USB_EPStartXfer+0x4cc>)
 8003546:	4323      	orrs	r3, r4
 8003548:	b29b      	uxth	r3, r3
 800354a:	8013      	strh	r3, [r2, #0]
 800354c:	e018      	b.n	8003580 <USB_EPStartXfer+0x29c>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	785b      	ldrb	r3, [r3, #1]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d114      	bne.n	8003580 <USB_EPStartXfer+0x29c>
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	b29b      	uxth	r3, r3
 8003564:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800356c:	b29c      	uxth	r4, r3
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	441a      	add	r2, r3
 8003578:	4b8e      	ldr	r3, [pc, #568]	; (80037b4 <USB_EPStartXfer+0x4d0>)
 800357a:	4323      	orrs	r3, r4
 800357c:	b29b      	uxth	r3, r3
 800357e:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	881b      	ldrh	r3, [r3, #0]
 800358c:	b29b      	uxth	r3, r3
 800358e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003592:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003596:	b29c      	uxth	r4, r3
 8003598:	f084 0310 	eor.w	r3, r4, #16
 800359c:	b29c      	uxth	r4, r3
 800359e:	f084 0320 	eor.w	r3, r4, #32
 80035a2:	b29c      	uxth	r4, r3
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	441a      	add	r2, r3
 80035ae:	4b82      	ldr	r3, [pc, #520]	; (80037b8 <USB_EPStartXfer+0x4d4>)
 80035b0:	4323      	orrs	r3, r4
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	8013      	strh	r3, [r2, #0]
 80035b6:	e146      	b.n	8003846 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	699a      	ldr	r2, [r3, #24]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d909      	bls.n	80035d8 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	699a      	ldr	r2, [r3, #24]
 80035ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d0:	1ad2      	subs	r2, r2, r3
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	619a      	str	r2, [r3, #24]
 80035d6:	e005      	b.n	80035e4 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2200      	movs	r2, #0
 80035e2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	7b1b      	ldrb	r3, [r3, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d148      	bne.n	800367e <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80035ec:	687c      	ldr	r4, [r7, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	441c      	add	r4, r3
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	4423      	add	r3, r4
 8003600:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003604:	461c      	mov	r4, r3
 8003606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10e      	bne.n	800362a <USB_EPStartXfer+0x346>
 800360c:	8823      	ldrh	r3, [r4, #0]
 800360e:	b29b      	uxth	r3, r3
 8003610:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003614:	b29b      	uxth	r3, r3
 8003616:	8023      	strh	r3, [r4, #0]
 8003618:	8823      	ldrh	r3, [r4, #0]
 800361a:	b29b      	uxth	r3, r3
 800361c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003620:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003624:	b29b      	uxth	r3, r3
 8003626:	8023      	strh	r3, [r4, #0]
 8003628:	e0f2      	b.n	8003810 <USB_EPStartXfer+0x52c>
 800362a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362c:	2b3e      	cmp	r3, #62	; 0x3e
 800362e:	d810      	bhi.n	8003652 <USB_EPStartXfer+0x36e>
 8003630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003632:	085b      	lsrs	r3, r3, #1
 8003634:	61fb      	str	r3, [r7, #28]
 8003636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <USB_EPStartXfer+0x362>
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	3301      	adds	r3, #1
 8003644:	61fb      	str	r3, [r7, #28]
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	b29b      	uxth	r3, r3
 800364a:	029b      	lsls	r3, r3, #10
 800364c:	b29b      	uxth	r3, r3
 800364e:	8023      	strh	r3, [r4, #0]
 8003650:	e0de      	b.n	8003810 <USB_EPStartXfer+0x52c>
 8003652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003654:	095b      	lsrs	r3, r3, #5
 8003656:	61fb      	str	r3, [r7, #28]
 8003658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365a:	f003 031f 	and.w	r3, r3, #31
 800365e:	2b00      	cmp	r3, #0
 8003660:	d102      	bne.n	8003668 <USB_EPStartXfer+0x384>
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	3b01      	subs	r3, #1
 8003666:	61fb      	str	r3, [r7, #28]
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	b29b      	uxth	r3, r3
 800366c:	029b      	lsls	r3, r3, #10
 800366e:	b29b      	uxth	r3, r3
 8003670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003678:	b29b      	uxth	r3, r3
 800367a:	8023      	strh	r3, [r4, #0]
 800367c:	e0c8      	b.n	8003810 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	785b      	ldrb	r3, [r3, #1]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d148      	bne.n	8003718 <USB_EPStartXfer+0x434>
 8003686:	687c      	ldr	r4, [r7, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800368e:	b29b      	uxth	r3, r3
 8003690:	441c      	add	r4, r3
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	4423      	add	r3, r4
 800369a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800369e:	461c      	mov	r4, r3
 80036a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10e      	bne.n	80036c4 <USB_EPStartXfer+0x3e0>
 80036a6:	8823      	ldrh	r3, [r4, #0]
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	8023      	strh	r3, [r4, #0]
 80036b2:	8823      	ldrh	r3, [r4, #0]
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036be:	b29b      	uxth	r3, r3
 80036c0:	8023      	strh	r3, [r4, #0]
 80036c2:	e03d      	b.n	8003740 <USB_EPStartXfer+0x45c>
 80036c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c6:	2b3e      	cmp	r3, #62	; 0x3e
 80036c8:	d810      	bhi.n	80036ec <USB_EPStartXfer+0x408>
 80036ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036cc:	085b      	lsrs	r3, r3, #1
 80036ce:	61bb      	str	r3, [r7, #24]
 80036d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d002      	beq.n	80036e0 <USB_EPStartXfer+0x3fc>
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	3301      	adds	r3, #1
 80036de:	61bb      	str	r3, [r7, #24]
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	029b      	lsls	r3, r3, #10
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	8023      	strh	r3, [r4, #0]
 80036ea:	e029      	b.n	8003740 <USB_EPStartXfer+0x45c>
 80036ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ee:	095b      	lsrs	r3, r3, #5
 80036f0:	61bb      	str	r3, [r7, #24]
 80036f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f4:	f003 031f 	and.w	r3, r3, #31
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d102      	bne.n	8003702 <USB_EPStartXfer+0x41e>
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	3b01      	subs	r3, #1
 8003700:	61bb      	str	r3, [r7, #24]
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	b29b      	uxth	r3, r3
 8003706:	029b      	lsls	r3, r3, #10
 8003708:	b29b      	uxth	r3, r3
 800370a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800370e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003712:	b29b      	uxth	r3, r3
 8003714:	8023      	strh	r3, [r4, #0]
 8003716:	e013      	b.n	8003740 <USB_EPStartXfer+0x45c>
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	785b      	ldrb	r3, [r3, #1]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d10f      	bne.n	8003740 <USB_EPStartXfer+0x45c>
 8003720:	687c      	ldr	r4, [r7, #4]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003728:	b29b      	uxth	r3, r3
 800372a:	441c      	add	r4, r3
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	4423      	add	r3, r4
 8003734:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003738:	461c      	mov	r4, r3
 800373a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373c:	b29b      	uxth	r3, r3
 800373e:	8023      	strh	r3, [r4, #0]
 8003740:	687c      	ldr	r4, [r7, #4]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	785b      	ldrb	r3, [r3, #1]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d14e      	bne.n	80037e8 <USB_EPStartXfer+0x504>
 800374a:	687c      	ldr	r4, [r7, #4]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003752:	b29b      	uxth	r3, r3
 8003754:	441c      	add	r4, r3
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	4423      	add	r3, r4
 800375e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003762:	461c      	mov	r4, r3
 8003764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10e      	bne.n	8003788 <USB_EPStartXfer+0x4a4>
 800376a:	8823      	ldrh	r3, [r4, #0]
 800376c:	b29b      	uxth	r3, r3
 800376e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003772:	b29b      	uxth	r3, r3
 8003774:	8023      	strh	r3, [r4, #0]
 8003776:	8823      	ldrh	r3, [r4, #0]
 8003778:	b29b      	uxth	r3, r3
 800377a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800377e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003782:	b29b      	uxth	r3, r3
 8003784:	8023      	strh	r3, [r4, #0]
 8003786:	e043      	b.n	8003810 <USB_EPStartXfer+0x52c>
 8003788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378a:	2b3e      	cmp	r3, #62	; 0x3e
 800378c:	d816      	bhi.n	80037bc <USB_EPStartXfer+0x4d8>
 800378e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003790:	085b      	lsrs	r3, r3, #1
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d002      	beq.n	80037a4 <USB_EPStartXfer+0x4c0>
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	3301      	adds	r3, #1
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	029b      	lsls	r3, r3, #10
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	8023      	strh	r3, [r4, #0]
 80037ae:	e02f      	b.n	8003810 <USB_EPStartXfer+0x52c>
 80037b0:	ffff80c0 	.word	0xffff80c0
 80037b4:	ffffc080 	.word	0xffffc080
 80037b8:	ffff8080 	.word	0xffff8080
 80037bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037be:	095b      	lsrs	r3, r3, #5
 80037c0:	617b      	str	r3, [r7, #20]
 80037c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c4:	f003 031f 	and.w	r3, r3, #31
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d102      	bne.n	80037d2 <USB_EPStartXfer+0x4ee>
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	617b      	str	r3, [r7, #20]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	029b      	lsls	r3, r3, #10
 80037d8:	b29b      	uxth	r3, r3
 80037da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	8023      	strh	r3, [r4, #0]
 80037e6:	e013      	b.n	8003810 <USB_EPStartXfer+0x52c>
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	785b      	ldrb	r3, [r3, #1]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d10f      	bne.n	8003810 <USB_EPStartXfer+0x52c>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	441c      	add	r4, r3
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	4423      	add	r3, r4
 8003802:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003806:	613b      	str	r3, [r7, #16]
 8003808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380a:	b29a      	uxth	r2, r3
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	b29b      	uxth	r3, r3
 800381e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003826:	b29c      	uxth	r4, r3
 8003828:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800382c:	b29c      	uxth	r4, r3
 800382e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003832:	b29c      	uxth	r4, r3
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	441a      	add	r2, r3
 800383e:	4b04      	ldr	r3, [pc, #16]	; (8003850 <USB_EPStartXfer+0x56c>)
 8003840:	4323      	orrs	r3, r4
 8003842:	b29b      	uxth	r3, r3
 8003844:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3734      	adds	r7, #52	; 0x34
 800384c:	46bd      	mov	sp, r7
 800384e:	bd90      	pop	{r4, r7, pc}
 8003850:	ffff8080 	.word	0xffff8080

08003854 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003854:	b490      	push	{r4, r7}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	785b      	ldrb	r3, [r3, #1]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d018      	beq.n	8003898 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	881b      	ldrh	r3, [r3, #0]
 8003872:	b29b      	uxth	r3, r3
 8003874:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003878:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800387c:	b29c      	uxth	r4, r3
 800387e:	f084 0310 	eor.w	r3, r4, #16
 8003882:	b29c      	uxth	r4, r3
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	441a      	add	r2, r3
 800388e:	4b11      	ldr	r3, [pc, #68]	; (80038d4 <USB_EPSetStall+0x80>)
 8003890:	4323      	orrs	r3, r4
 8003892:	b29b      	uxth	r3, r3
 8003894:	8013      	strh	r3, [r2, #0]
 8003896:	e017      	b.n	80038c8 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	881b      	ldrh	r3, [r3, #0]
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ae:	b29c      	uxth	r4, r3
 80038b0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80038b4:	b29c      	uxth	r4, r3
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	441a      	add	r2, r3
 80038c0:	4b04      	ldr	r3, [pc, #16]	; (80038d4 <USB_EPSetStall+0x80>)
 80038c2:	4323      	orrs	r3, r4
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc90      	pop	{r4, r7}
 80038d2:	4770      	bx	lr
 80038d4:	ffff8080 	.word	0xffff8080

080038d8 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80038d8:	b490      	push	{r4, r7}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	7b1b      	ldrb	r3, [r3, #12]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d17d      	bne.n	80039e6 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	785b      	ldrb	r3, [r3, #1]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d03d      	beq.n	800396e <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	881b      	ldrh	r3, [r3, #0]
 80038fe:	b29c      	uxth	r4, r3
 8003900:	4623      	mov	r3, r4
 8003902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003906:	2b00      	cmp	r3, #0
 8003908:	d014      	beq.n	8003934 <USB_EPClearStall+0x5c>
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	b29b      	uxth	r3, r3
 8003918:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800391c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003920:	b29c      	uxth	r4, r3
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	441a      	add	r2, r3
 800392c:	4b31      	ldr	r3, [pc, #196]	; (80039f4 <USB_EPClearStall+0x11c>)
 800392e:	4323      	orrs	r3, r4
 8003930:	b29b      	uxth	r3, r3
 8003932:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	78db      	ldrb	r3, [r3, #3]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d054      	beq.n	80039e6 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	b29b      	uxth	r3, r3
 800394a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800394e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003952:	b29c      	uxth	r4, r3
 8003954:	f084 0320 	eor.w	r3, r4, #32
 8003958:	b29c      	uxth	r4, r3
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	441a      	add	r2, r3
 8003964:	4b24      	ldr	r3, [pc, #144]	; (80039f8 <USB_EPClearStall+0x120>)
 8003966:	4323      	orrs	r3, r4
 8003968:	b29b      	uxth	r3, r3
 800396a:	8013      	strh	r3, [r2, #0]
 800396c:	e03b      	b.n	80039e6 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	b29c      	uxth	r4, r3
 800397c:	4623      	mov	r3, r4
 800397e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d014      	beq.n	80039b0 <USB_EPClearStall+0xd8>
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	b29b      	uxth	r3, r3
 8003994:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399c:	b29c      	uxth	r4, r3
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	441a      	add	r2, r3
 80039a8:	4b14      	ldr	r3, [pc, #80]	; (80039fc <USB_EPClearStall+0x124>)
 80039aa:	4323      	orrs	r3, r4
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	881b      	ldrh	r3, [r3, #0]
 80039bc:	b29b      	uxth	r3, r3
 80039be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c6:	b29c      	uxth	r4, r3
 80039c8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80039cc:	b29c      	uxth	r4, r3
 80039ce:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80039d2:	b29c      	uxth	r4, r3
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	441a      	add	r2, r3
 80039de:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <USB_EPClearStall+0x120>)
 80039e0:	4323      	orrs	r3, r4
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bc90      	pop	{r4, r7}
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	ffff80c0 	.word	0xffff80c0
 80039f8:	ffff8080 	.word	0xffff8080
 80039fc:	ffffc080 	.word	0xffffc080

08003a00 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8003a0c:	78fb      	ldrb	r3, [r7, #3]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d103      	bne.n	8003a1a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2280      	movs	r2, #128	; 0x80
 8003a16:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr

08003a26 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bc80      	pop	{r7}
 8003a38:	4770      	bx	lr

08003a3a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bc80      	pop	{r7}
 8003a4c:	4770      	bx	lr

08003a4e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b085      	sub	sp, #20
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8003a60:	68fb      	ldr	r3, [r7, #12]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr

08003a6c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bc80      	pop	{r7}
 8003a80:	4770      	bx	lr

08003a82 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b08d      	sub	sp, #52	; 0x34
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	60f8      	str	r0, [r7, #12]
 8003a8a:	60b9      	str	r1, [r7, #8]
 8003a8c:	4611      	mov	r1, r2
 8003a8e:	461a      	mov	r2, r3
 8003a90:	460b      	mov	r3, r1
 8003a92:	80fb      	strh	r3, [r7, #6]
 8003a94:	4613      	mov	r3, r2
 8003a96:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003a98:	88bb      	ldrh	r3, [r7, #4]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	085b      	lsrs	r3, r3, #1
 8003a9e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003aa8:	88fb      	ldrh	r3, [r7, #6]
 8003aaa:	005a      	lsls	r2, r3, #1
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ab4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aba:	e01e      	b.n	8003afa <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	021b      	lsls	r3, r3, #8
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8003ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae4:	3302      	adds	r3, #2
 8003ae6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8003ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aea:	3302      	adds	r3, #2
 8003aec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	3301      	adds	r3, #1
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8003af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af6:	3b01      	subs	r3, #1
 8003af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1dd      	bne.n	8003abc <USB_WritePMA+0x3a>
  }
}
 8003b00:	bf00      	nop
 8003b02:	3734      	adds	r7, #52	; 0x34
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bc80      	pop	{r7}
 8003b08:	4770      	bx	lr

08003b0a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b08b      	sub	sp, #44	; 0x2c
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	4611      	mov	r1, r2
 8003b16:	461a      	mov	r2, r3
 8003b18:	460b      	mov	r3, r1
 8003b1a:	80fb      	strh	r3, [r7, #6]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003b20:	88bb      	ldrh	r3, [r7, #4]
 8003b22:	085b      	lsrs	r3, r3, #1
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003b30:	88fb      	ldrh	r3, [r7, #6]
 8003b32:	005a      	lsls	r2, r3, #1
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b3c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
 8003b42:	e01b      	b.n	8003b7c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	881b      	ldrh	r3, [r3, #0]
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	3302      	adds	r3, #2
 8003b50:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	0a1b      	lsrs	r3, r3, #8
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	3302      	adds	r3, #2
 8003b74:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1e0      	bne.n	8003b44 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003b82:	88bb      	ldrh	r3, [r7, #4]
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d007      	beq.n	8003b9e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	701a      	strb	r2, [r3, #0]
  }
}
 8003b9e:	bf00      	nop
 8003ba0:	372c      	adds	r7, #44	; 0x2c
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bc80      	pop	{r7}
 8003ba6:	4770      	bx	lr

08003ba8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	7c1b      	ldrb	r3, [r3, #16]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d115      	bne.n	8003bec <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003bc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	2181      	movs	r1, #129	; 0x81
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f001 fe6c 	bl	80058a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bd8:	2202      	movs	r2, #2
 8003bda:	2101      	movs	r1, #1
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f001 fe62 	bl	80058a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8003bea:	e012      	b.n	8003c12 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003bec:	2340      	movs	r3, #64	; 0x40
 8003bee:	2202      	movs	r2, #2
 8003bf0:	2181      	movs	r1, #129	; 0x81
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f001 fe57 	bl	80058a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003bfe:	2340      	movs	r3, #64	; 0x40
 8003c00:	2202      	movs	r2, #2
 8003c02:	2101      	movs	r1, #1
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f001 fe4e 	bl	80058a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003c12:	2308      	movs	r3, #8
 8003c14:	2203      	movs	r2, #3
 8003c16:	2182      	movs	r1, #130	; 0x82
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f001 fe44 	bl	80058a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003c24:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003c28:	f001 ff5e 	bl	8005ae8 <USBD_static_malloc>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d102      	bne.n	8003c44 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	73fb      	strb	r3, [r7, #15]
 8003c42:	e026      	b.n	8003c92 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003c4a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	7c1b      	ldrb	r3, [r3, #16]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d109      	bne.n	8003c82 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003c74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c78:	2101      	movs	r1, #1
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f001 fefd 	bl	8005a7a <USBD_LL_PrepareReceive>
 8003c80:	e007      	b.n	8003c92 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003c88:	2340      	movs	r3, #64	; 0x40
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f001 fef4 	bl	8005a7a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8003c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003cac:	2181      	movs	r1, #129	; 0x81
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f001 fe1f 	bl	80058f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003cba:	2101      	movs	r1, #1
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f001 fe18 	bl	80058f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003cca:	2182      	movs	r1, #130	; 0x82
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f001 fe10 	bl	80058f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00e      	beq.n	8003d00 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f001 ff04 	bl	8005b00 <USBD_static_free>
    pdev->pClassData = NULL;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b086      	sub	sp, #24
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003d1a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8003d20:	2300      	movs	r3, #0
 8003d22:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8003d24:	2300      	movs	r3, #0
 8003d26:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d039      	beq.n	8003da8 <USBD_CDC_Setup+0x9e>
 8003d34:	2b20      	cmp	r3, #32
 8003d36:	d17c      	bne.n	8003e32 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	88db      	ldrh	r3, [r3, #6]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d029      	beq.n	8003d94 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	b25b      	sxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	da11      	bge.n	8003d6e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8003d56:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	88d2      	ldrh	r2, [r2, #6]
 8003d5c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003d5e:	6939      	ldr	r1, [r7, #16]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	88db      	ldrh	r3, [r3, #6]
 8003d64:	461a      	mov	r2, r3
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f001 f9f6 	bl	8005158 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8003d6c:	e068      	b.n	8003e40 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	785a      	ldrb	r2, [r3, #1]
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	88db      	ldrh	r3, [r3, #6]
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003d84:	6939      	ldr	r1, [r7, #16]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	88db      	ldrh	r3, [r3, #6]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f001 fa11 	bl	80051b4 <USBD_CtlPrepareRx>
      break;
 8003d92:	e055      	b.n	8003e40 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	7850      	ldrb	r0, [r2, #1]
 8003da0:	2200      	movs	r2, #0
 8003da2:	6839      	ldr	r1, [r7, #0]
 8003da4:	4798      	blx	r3
      break;
 8003da6:	e04b      	b.n	8003e40 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	785b      	ldrb	r3, [r3, #1]
 8003dac:	2b0a      	cmp	r3, #10
 8003dae:	d017      	beq.n	8003de0 <USBD_CDC_Setup+0xd6>
 8003db0:	2b0b      	cmp	r3, #11
 8003db2:	d029      	beq.n	8003e08 <USBD_CDC_Setup+0xfe>
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d133      	bne.n	8003e20 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003dbe:	2b03      	cmp	r3, #3
 8003dc0:	d107      	bne.n	8003dd2 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003dc2:	f107 030c 	add.w	r3, r7, #12
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	4619      	mov	r1, r3
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f001 f9c4 	bl	8005158 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003dd0:	e02e      	b.n	8003e30 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8003dd2:	6839      	ldr	r1, [r7, #0]
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f001 f955 	bl	8005084 <USBD_CtlError>
            ret = USBD_FAIL;
 8003dda:	2302      	movs	r3, #2
 8003ddc:	75fb      	strb	r3, [r7, #23]
          break;
 8003dde:	e027      	b.n	8003e30 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003de6:	2b03      	cmp	r3, #3
 8003de8:	d107      	bne.n	8003dfa <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8003dea:	f107 030f 	add.w	r3, r7, #15
 8003dee:	2201      	movs	r2, #1
 8003df0:	4619      	mov	r1, r3
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f001 f9b0 	bl	8005158 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003df8:	e01a      	b.n	8003e30 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8003dfa:	6839      	ldr	r1, [r7, #0]
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f001 f941 	bl	8005084 <USBD_CtlError>
            ret = USBD_FAIL;
 8003e02:	2302      	movs	r3, #2
 8003e04:	75fb      	strb	r3, [r7, #23]
          break;
 8003e06:	e013      	b.n	8003e30 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	d00d      	beq.n	8003e2e <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8003e12:	6839      	ldr	r1, [r7, #0]
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f001 f935 	bl	8005084 <USBD_CtlError>
            ret = USBD_FAIL;
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8003e1e:	e006      	b.n	8003e2e <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8003e20:	6839      	ldr	r1, [r7, #0]
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f001 f92e 	bl	8005084 <USBD_CtlError>
          ret = USBD_FAIL;
 8003e28:	2302      	movs	r3, #2
 8003e2a:	75fb      	strb	r3, [r7, #23]
          break;
 8003e2c:	e000      	b.n	8003e30 <USBD_CDC_Setup+0x126>
          break;
 8003e2e:	bf00      	nop
      }
      break;
 8003e30:	e006      	b.n	8003e40 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8003e32:	6839      	ldr	r1, [r7, #0]
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f001 f925 	bl	8005084 <USBD_CtlError>
      ret = USBD_FAIL;
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	75fb      	strb	r3, [r7, #23]
      break;
 8003e3e:	bf00      	nop
  }

  return ret;
 8003e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3718      	adds	r7, #24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b084      	sub	sp, #16
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
 8003e52:	460b      	mov	r3, r1
 8003e54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003e5c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003e64:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d037      	beq.n	8003ee0 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003e70:	78fa      	ldrb	r2, [r7, #3]
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	4613      	mov	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	331c      	adds	r3, #28
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d026      	beq.n	8003ed4 <USBD_CDC_DataIn+0x8a>
 8003e86:	78fa      	ldrb	r2, [r7, #3]
 8003e88:	6879      	ldr	r1, [r7, #4]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	440b      	add	r3, r1
 8003e94:	331c      	adds	r3, #28
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	78fa      	ldrb	r2, [r7, #3]
 8003e9a:	68b9      	ldr	r1, [r7, #8]
 8003e9c:	0152      	lsls	r2, r2, #5
 8003e9e:	440a      	add	r2, r1
 8003ea0:	3238      	adds	r2, #56	; 0x38
 8003ea2:	6812      	ldr	r2, [r2, #0]
 8003ea4:	fbb3 f1f2 	udiv	r1, r3, r2
 8003ea8:	fb02 f201 	mul.w	r2, r2, r1
 8003eac:	1a9b      	subs	r3, r3, r2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d110      	bne.n	8003ed4 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8003eb2:	78fa      	ldrb	r2, [r7, #3]
 8003eb4:	6879      	ldr	r1, [r7, #4]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	440b      	add	r3, r1
 8003ec0:	331c      	adds	r3, #28
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003ec6:	78f9      	ldrb	r1, [r7, #3]
 8003ec8:	2300      	movs	r3, #0
 8003eca:	2200      	movs	r2, #0
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f001 fdb1 	bl	8005a34 <USBD_LL_Transmit>
 8003ed2:	e003      	b.n	8003edc <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8003edc:	2300      	movs	r3, #0
 8003ede:	e000      	b.n	8003ee2 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8003ee0:	2302      	movs	r3, #2
  }
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b084      	sub	sp, #16
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003efc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003efe:	78fb      	ldrb	r3, [r7, #3]
 8003f00:	4619      	mov	r1, r3
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f001 fddc 	bl	8005ac0 <USBD_LL_GetRxDataSize>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00d      	beq.n	8003f36 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8003f2e:	4611      	mov	r1, r2
 8003f30:	4798      	blx	r3

    return USBD_OK;
 8003f32:	2300      	movs	r3, #0
 8003f34:	e000      	b.n	8003f38 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8003f36:	2302      	movs	r3, #2
  }
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003f4e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d015      	beq.n	8003f86 <USBD_CDC_EP0_RxReady+0x46>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003f60:	2bff      	cmp	r3, #255	; 0xff
 8003f62:	d010      	beq.n	8003f86 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8003f72:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003f7a:	b292      	uxth	r2, r2
 8003f7c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	22ff      	movs	r2, #255	; 0xff
 8003f82:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2243      	movs	r2, #67	; 0x43
 8003f9c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8003f9e:	4b03      	ldr	r3, [pc, #12]	; (8003fac <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bc80      	pop	{r7}
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	20000094 	.word	0x20000094

08003fb0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2243      	movs	r2, #67	; 0x43
 8003fbc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8003fbe:	4b03      	ldr	r3, [pc, #12]	; (8003fcc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bc80      	pop	{r7}
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	20000050 	.word	0x20000050

08003fd0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2243      	movs	r2, #67	; 0x43
 8003fdc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8003fde:	4b03      	ldr	r3, [pc, #12]	; (8003fec <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bc80      	pop	{r7}
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	200000d8 	.word	0x200000d8

08003ff0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	220a      	movs	r2, #10
 8003ffc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8003ffe:	4b03      	ldr	r3, [pc, #12]	; (800400c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004000:	4618      	mov	r0, r3
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	bc80      	pop	{r7}
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	2000000c 	.word	0x2000000c

08004010 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800401a:	2302      	movs	r3, #2
 800401c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d005      	beq.n	8004030 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800402c:	2300      	movs	r3, #0
 800402e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004030:	7bfb      	ldrb	r3, [r7, #15]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	bc80      	pop	{r7}
 800403a:	4770      	bx	lr

0800403c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800403c:	b480      	push	{r7}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	4613      	mov	r3, r2
 8004048:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004050:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800405a:	88fa      	ldrh	r2, [r7, #6]
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	371c      	adds	r7, #28
 8004068:	46bd      	mov	sp, r7
 800406a:	bc80      	pop	{r7}
 800406c:	4770      	bx	lr

0800406e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800406e:	b480      	push	{r7}
 8004070:	b085      	sub	sp, #20
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
 8004076:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800407e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	bc80      	pop	{r7}
 8004092:	4770      	bx	lr

08004094 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80040a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d01c      	beq.n	80040e8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d115      	bne.n	80040e4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	2181      	movs	r1, #129	; 0x81
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f001 fcaa 	bl	8005a34 <USBD_LL_Transmit>

      return USBD_OK;
 80040e0:	2300      	movs	r3, #0
 80040e2:	e002      	b.n	80040ea <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e000      	b.n	80040ea <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80040e8:	2302      	movs	r3, #2
  }
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b084      	sub	sp, #16
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004100:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004108:	2b00      	cmp	r3, #0
 800410a:	d017      	beq.n	800413c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	7c1b      	ldrb	r3, [r3, #16]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d109      	bne.n	8004128 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800411a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800411e:	2101      	movs	r1, #1
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f001 fcaa 	bl	8005a7a <USBD_LL_PrepareReceive>
 8004126:	e007      	b.n	8004138 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800412e:	2340      	movs	r3, #64	; 0x40
 8004130:	2101      	movs	r1, #1
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f001 fca1 	bl	8005a7a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004138:	2300      	movs	r3, #0
 800413a:	e000      	b.n	800413e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800413c:	2302      	movs	r3, #2
  }
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b084      	sub	sp, #16
 800414a:	af00      	add	r7, sp, #0
 800414c:	60f8      	str	r0, [r7, #12]
 800414e:	60b9      	str	r1, [r7, #8]
 8004150:	4613      	mov	r3, r2
 8004152:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800415a:	2302      	movs	r3, #2
 800415c:	e01a      	b.n	8004194 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	79fa      	ldrb	r2, [r7, #7]
 800418a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f001 fb15 	bl	80057bc <USBD_LL_Init>

  return USBD_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80041a6:	2300      	movs	r3, #0
 80041a8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d006      	beq.n	80041be <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80041b8:	2300      	movs	r3, #0
 80041ba:	73fb      	strb	r3, [r7, #15]
 80041bc:	e001      	b.n	80041c2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80041be:	2302      	movs	r3, #2
 80041c0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bc80      	pop	{r7}
 80041cc:	4770      	bx	lr

080041ce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b082      	sub	sp, #8
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f001 fb4a 	bl	8005870 <USBD_LL_Start>

  return USBD_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bc80      	pop	{r7}
 80041f8:	4770      	bx	lr

080041fa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b084      	sub	sp, #16
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
 8004202:	460b      	mov	r3, r1
 8004204:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004206:	2302      	movs	r3, #2
 8004208:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00c      	beq.n	800422e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	78fa      	ldrb	r2, [r7, #3]
 800421e:	4611      	mov	r1, r2
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	4798      	blx	r3
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800422e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004230:	4618      	mov	r0, r3
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	460b      	mov	r3, r1
 8004242:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	78fa      	ldrb	r2, [r7, #3]
 800424e:	4611      	mov	r1, r2
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	4798      	blx	r3

  return USBD_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b082      	sub	sp, #8
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
 8004266:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800426e:	6839      	ldr	r1, [r7, #0]
 8004270:	4618      	mov	r0, r3
 8004272:	f000 fecb 	bl	800500c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004284:	461a      	mov	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004292:	f003 031f 	and.w	r3, r3, #31
 8004296:	2b01      	cmp	r3, #1
 8004298:	d00c      	beq.n	80042b4 <USBD_LL_SetupStage+0x56>
 800429a:	2b01      	cmp	r3, #1
 800429c:	d302      	bcc.n	80042a4 <USBD_LL_SetupStage+0x46>
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d010      	beq.n	80042c4 <USBD_LL_SetupStage+0x66>
 80042a2:	e017      	b.n	80042d4 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80042aa:	4619      	mov	r1, r3
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 f9cb 	bl	8004648 <USBD_StdDevReq>
      break;
 80042b2:	e01a      	b.n	80042ea <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80042ba:	4619      	mov	r1, r3
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 fa2d 	bl	800471c <USBD_StdItfReq>
      break;
 80042c2:	e012      	b.n	80042ea <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80042ca:	4619      	mov	r1, r3
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 fa6b 	bl	80047a8 <USBD_StdEPReq>
      break;
 80042d2:	e00a      	b.n	80042ea <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80042da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	4619      	mov	r1, r3
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f001 fb24 	bl	8005930 <USBD_LL_StallEP>
      break;
 80042e8:	bf00      	nop
  }

  return USBD_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	460b      	mov	r3, r1
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004302:	7afb      	ldrb	r3, [r7, #11]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d14b      	bne.n	80043a0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800430e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004316:	2b03      	cmp	r3, #3
 8004318:	d134      	bne.n	8004384 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	429a      	cmp	r2, r3
 8004324:	d919      	bls.n	800435a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	1ad2      	subs	r2, r2, r3
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800433c:	429a      	cmp	r2, r3
 800433e:	d203      	bcs.n	8004348 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8004344:	b29b      	uxth	r3, r3
 8004346:	e002      	b.n	800434e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800434c:	b29b      	uxth	r3, r3
 800434e:	461a      	mov	r2, r3
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 ff4c 	bl	80051f0 <USBD_CtlContinueRx>
 8004358:	e038      	b.n	80043cc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800436c:	2b03      	cmp	r3, #3
 800436e:	d105      	bne.n	800437c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 ff49 	bl	8005214 <USBD_CtlSendStatus>
 8004382:	e023      	b.n	80043cc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800438a:	2b05      	cmp	r3, #5
 800438c:	d11e      	bne.n	80043cc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004396:	2100      	movs	r1, #0
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f001 fac9 	bl	8005930 <USBD_LL_StallEP>
 800439e:	e015      	b.n	80043cc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00d      	beq.n	80043c8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80043b2:	2b03      	cmp	r3, #3
 80043b4:	d108      	bne.n	80043c8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	7afa      	ldrb	r2, [r7, #11]
 80043c0:	4611      	mov	r1, r2
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	4798      	blx	r3
 80043c6:	e001      	b.n	80043cc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80043c8:	2302      	movs	r3, #2
 80043ca:	e000      	b.n	80043ce <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3718      	adds	r7, #24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b086      	sub	sp, #24
 80043da:	af00      	add	r7, sp, #0
 80043dc:	60f8      	str	r0, [r7, #12]
 80043de:	460b      	mov	r3, r1
 80043e0:	607a      	str	r2, [r7, #4]
 80043e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80043e4:	7afb      	ldrb	r3, [r7, #11]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d17f      	bne.n	80044ea <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	3314      	adds	r3, #20
 80043ee:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d15c      	bne.n	80044b4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	68da      	ldr	r2, [r3, #12]
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	429a      	cmp	r2, r3
 8004404:	d915      	bls.n	8004432 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	68da      	ldr	r2, [r3, #12]
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	1ad2      	subs	r2, r2, r3
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	b29b      	uxth	r3, r3
 800441a:	461a      	mov	r2, r3
 800441c:	6879      	ldr	r1, [r7, #4]
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 feb6 	bl	8005190 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004424:	2300      	movs	r3, #0
 8004426:	2200      	movs	r2, #0
 8004428:	2100      	movs	r1, #0
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f001 fb25 	bl	8005a7a <USBD_LL_PrepareReceive>
 8004430:	e04e      	b.n	80044d0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	6912      	ldr	r2, [r2, #16]
 800443a:	fbb3 f1f2 	udiv	r1, r3, r2
 800443e:	fb02 f201 	mul.w	r2, r2, r1
 8004442:	1a9b      	subs	r3, r3, r2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d11c      	bne.n	8004482 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004450:	429a      	cmp	r2, r3
 8004452:	d316      	bcc.n	8004482 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	689a      	ldr	r2, [r3, #8]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800445e:	429a      	cmp	r2, r3
 8004460:	d20f      	bcs.n	8004482 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004462:	2200      	movs	r2, #0
 8004464:	2100      	movs	r1, #0
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f000 fe92 	bl	8005190 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004474:	2300      	movs	r3, #0
 8004476:	2200      	movs	r2, #0
 8004478:	2100      	movs	r1, #0
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f001 fafd 	bl	8005a7a <USBD_LL_PrepareReceive>
 8004480:	e026      	b.n	80044d0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00a      	beq.n	80044a4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004494:	2b03      	cmp	r3, #3
 8004496:	d105      	bne.n	80044a4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80044a4:	2180      	movs	r1, #128	; 0x80
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f001 fa42 	bl	8005930 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f000 fec4 	bl	800523a <USBD_CtlReceiveStatus>
 80044b2:	e00d      	b.n	80044d0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d004      	beq.n	80044c8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d103      	bne.n	80044d0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80044c8:	2180      	movs	r1, #128	; 0x80
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f001 fa30 	bl	8005930 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d11d      	bne.n	8004516 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f7ff fe83 	bl	80041e6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80044e8:	e015      	b.n	8004516 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00d      	beq.n	8004512 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80044fc:	2b03      	cmp	r3, #3
 80044fe:	d108      	bne.n	8004512 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	7afa      	ldrb	r2, [r7, #11]
 800450a:	4611      	mov	r1, r2
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	4798      	blx	r3
 8004510:	e001      	b.n	8004516 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004512:	2302      	movs	r3, #2
 8004514:	e000      	b.n	8004518 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3718      	adds	r7, #24
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004528:	2340      	movs	r3, #64	; 0x40
 800452a:	2200      	movs	r2, #0
 800452c:	2100      	movs	r1, #0
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f001 f9b9 	bl	80058a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2240      	movs	r2, #64	; 0x40
 8004540:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004544:	2340      	movs	r3, #64	; 0x40
 8004546:	2200      	movs	r2, #0
 8004548:	2180      	movs	r1, #128	; 0x80
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f001 f9ab 	bl	80058a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2240      	movs	r2, #64	; 0x40
 800455a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004580:	2b00      	cmp	r3, #0
 8004582:	d009      	beq.n	8004598 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6852      	ldr	r2, [r2, #4]
 8004590:	b2d2      	uxtb	r2, r2
 8004592:	4611      	mov	r1, r2
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	4798      	blx	r3
  }

  return USBD_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
 80045aa:	460b      	mov	r3, r1
 80045ac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	78fa      	ldrb	r2, [r7, #3]
 80045b2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bc80      	pop	{r7}
 80045be:	4770      	bx	lr

080045c0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2204      	movs	r2, #4
 80045d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bc80      	pop	{r7}
 80045e6:	4770      	bx	lr

080045e8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	d105      	bne.n	8004606 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	bc80      	pop	{r7}
 8004610:	4770      	bx	lr

08004612 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004620:	2b03      	cmp	r3, #3
 8004622:	d10b      	bne.n	800463c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d005      	beq.n	800463c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004636:	69db      	ldr	r3, [r3, #28]
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
	...

08004648 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004652:	2300      	movs	r3, #0
 8004654:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800465e:	2b20      	cmp	r3, #32
 8004660:	d004      	beq.n	800466c <USBD_StdDevReq+0x24>
 8004662:	2b40      	cmp	r3, #64	; 0x40
 8004664:	d002      	beq.n	800466c <USBD_StdDevReq+0x24>
 8004666:	2b00      	cmp	r3, #0
 8004668:	d008      	beq.n	800467c <USBD_StdDevReq+0x34>
 800466a:	e04c      	b.n	8004706 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	6839      	ldr	r1, [r7, #0]
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	4798      	blx	r3
      break;
 800467a:	e049      	b.n	8004710 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	785b      	ldrb	r3, [r3, #1]
 8004680:	2b09      	cmp	r3, #9
 8004682:	d83a      	bhi.n	80046fa <USBD_StdDevReq+0xb2>
 8004684:	a201      	add	r2, pc, #4	; (adr r2, 800468c <USBD_StdDevReq+0x44>)
 8004686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468a:	bf00      	nop
 800468c:	080046dd 	.word	0x080046dd
 8004690:	080046f1 	.word	0x080046f1
 8004694:	080046fb 	.word	0x080046fb
 8004698:	080046e7 	.word	0x080046e7
 800469c:	080046fb 	.word	0x080046fb
 80046a0:	080046bf 	.word	0x080046bf
 80046a4:	080046b5 	.word	0x080046b5
 80046a8:	080046fb 	.word	0x080046fb
 80046ac:	080046d3 	.word	0x080046d3
 80046b0:	080046c9 	.word	0x080046c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80046b4:	6839      	ldr	r1, [r7, #0]
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f9d4 	bl	8004a64 <USBD_GetDescriptor>
          break;
 80046bc:	e022      	b.n	8004704 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80046be:	6839      	ldr	r1, [r7, #0]
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 fb37 	bl	8004d34 <USBD_SetAddress>
          break;
 80046c6:	e01d      	b.n	8004704 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80046c8:	6839      	ldr	r1, [r7, #0]
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 fb74 	bl	8004db8 <USBD_SetConfig>
          break;
 80046d0:	e018      	b.n	8004704 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80046d2:	6839      	ldr	r1, [r7, #0]
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 fbfd 	bl	8004ed4 <USBD_GetConfig>
          break;
 80046da:	e013      	b.n	8004704 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80046dc:	6839      	ldr	r1, [r7, #0]
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 fc2c 	bl	8004f3c <USBD_GetStatus>
          break;
 80046e4:	e00e      	b.n	8004704 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80046e6:	6839      	ldr	r1, [r7, #0]
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 fc5a 	bl	8004fa2 <USBD_SetFeature>
          break;
 80046ee:	e009      	b.n	8004704 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80046f0:	6839      	ldr	r1, [r7, #0]
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 fc69 	bl	8004fca <USBD_ClrFeature>
          break;
 80046f8:	e004      	b.n	8004704 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80046fa:	6839      	ldr	r1, [r7, #0]
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 fcc1 	bl	8005084 <USBD_CtlError>
          break;
 8004702:	bf00      	nop
      }
      break;
 8004704:	e004      	b.n	8004710 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8004706:	6839      	ldr	r1, [r7, #0]
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 fcbb 	bl	8005084 <USBD_CtlError>
      break;
 800470e:	bf00      	nop
  }

  return ret;
 8004710:	7bfb      	ldrb	r3, [r7, #15]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop

0800471c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004726:	2300      	movs	r3, #0
 8004728:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004732:	2b20      	cmp	r3, #32
 8004734:	d003      	beq.n	800473e <USBD_StdItfReq+0x22>
 8004736:	2b40      	cmp	r3, #64	; 0x40
 8004738:	d001      	beq.n	800473e <USBD_StdItfReq+0x22>
 800473a:	2b00      	cmp	r3, #0
 800473c:	d12a      	bne.n	8004794 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004744:	3b01      	subs	r3, #1
 8004746:	2b02      	cmp	r3, #2
 8004748:	d81d      	bhi.n	8004786 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	889b      	ldrh	r3, [r3, #4]
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b01      	cmp	r3, #1
 8004752:	d813      	bhi.n	800477c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	6839      	ldr	r1, [r7, #0]
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	4798      	blx	r3
 8004762:	4603      	mov	r3, r0
 8004764:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	88db      	ldrh	r3, [r3, #6]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d110      	bne.n	8004790 <USBD_StdItfReq+0x74>
 800476e:	7bfb      	ldrb	r3, [r7, #15]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10d      	bne.n	8004790 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 fd4d 	bl	8005214 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800477a:	e009      	b.n	8004790 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800477c:	6839      	ldr	r1, [r7, #0]
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 fc80 	bl	8005084 <USBD_CtlError>
          break;
 8004784:	e004      	b.n	8004790 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8004786:	6839      	ldr	r1, [r7, #0]
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 fc7b 	bl	8005084 <USBD_CtlError>
          break;
 800478e:	e000      	b.n	8004792 <USBD_StdItfReq+0x76>
          break;
 8004790:	bf00      	nop
      }
      break;
 8004792:	e004      	b.n	800479e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8004794:	6839      	ldr	r1, [r7, #0]
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 fc74 	bl	8005084 <USBD_CtlError>
      break;
 800479c:	bf00      	nop
  }

  return USBD_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80047b2:	2300      	movs	r3, #0
 80047b4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	889b      	ldrh	r3, [r3, #4]
 80047ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80047c4:	2b20      	cmp	r3, #32
 80047c6:	d004      	beq.n	80047d2 <USBD_StdEPReq+0x2a>
 80047c8:	2b40      	cmp	r3, #64	; 0x40
 80047ca:	d002      	beq.n	80047d2 <USBD_StdEPReq+0x2a>
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d008      	beq.n	80047e2 <USBD_StdEPReq+0x3a>
 80047d0:	e13d      	b.n	8004a4e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	6839      	ldr	r1, [r7, #0]
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	4798      	blx	r3
      break;
 80047e0:	e13a      	b.n	8004a58 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80047ea:	2b20      	cmp	r3, #32
 80047ec:	d10a      	bne.n	8004804 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	6839      	ldr	r1, [r7, #0]
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	4798      	blx	r3
 80047fc:	4603      	mov	r3, r0
 80047fe:	73fb      	strb	r3, [r7, #15]

        return ret;
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	e12a      	b.n	8004a5a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	785b      	ldrb	r3, [r3, #1]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d03e      	beq.n	800488a <USBD_StdEPReq+0xe2>
 800480c:	2b03      	cmp	r3, #3
 800480e:	d002      	beq.n	8004816 <USBD_StdEPReq+0x6e>
 8004810:	2b00      	cmp	r3, #0
 8004812:	d070      	beq.n	80048f6 <USBD_StdEPReq+0x14e>
 8004814:	e115      	b.n	8004a42 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800481c:	2b02      	cmp	r3, #2
 800481e:	d002      	beq.n	8004826 <USBD_StdEPReq+0x7e>
 8004820:	2b03      	cmp	r3, #3
 8004822:	d015      	beq.n	8004850 <USBD_StdEPReq+0xa8>
 8004824:	e02b      	b.n	800487e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004826:	7bbb      	ldrb	r3, [r7, #14]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00c      	beq.n	8004846 <USBD_StdEPReq+0x9e>
 800482c:	7bbb      	ldrb	r3, [r7, #14]
 800482e:	2b80      	cmp	r3, #128	; 0x80
 8004830:	d009      	beq.n	8004846 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004832:	7bbb      	ldrb	r3, [r7, #14]
 8004834:	4619      	mov	r1, r3
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f001 f87a 	bl	8005930 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800483c:	2180      	movs	r1, #128	; 0x80
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f001 f876 	bl	8005930 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004844:	e020      	b.n	8004888 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8004846:	6839      	ldr	r1, [r7, #0]
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 fc1b 	bl	8005084 <USBD_CtlError>
              break;
 800484e:	e01b      	b.n	8004888 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	885b      	ldrh	r3, [r3, #2]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10e      	bne.n	8004876 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8004858:	7bbb      	ldrb	r3, [r7, #14]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00b      	beq.n	8004876 <USBD_StdEPReq+0xce>
 800485e:	7bbb      	ldrb	r3, [r7, #14]
 8004860:	2b80      	cmp	r3, #128	; 0x80
 8004862:	d008      	beq.n	8004876 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	88db      	ldrh	r3, [r3, #6]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d104      	bne.n	8004876 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800486c:	7bbb      	ldrb	r3, [r7, #14]
 800486e:	4619      	mov	r1, r3
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f001 f85d 	bl	8005930 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 fccc 	bl	8005214 <USBD_CtlSendStatus>

              break;
 800487c:	e004      	b.n	8004888 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800487e:	6839      	ldr	r1, [r7, #0]
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 fbff 	bl	8005084 <USBD_CtlError>
              break;
 8004886:	bf00      	nop
          }
          break;
 8004888:	e0e0      	b.n	8004a4c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004890:	2b02      	cmp	r3, #2
 8004892:	d002      	beq.n	800489a <USBD_StdEPReq+0xf2>
 8004894:	2b03      	cmp	r3, #3
 8004896:	d015      	beq.n	80048c4 <USBD_StdEPReq+0x11c>
 8004898:	e026      	b.n	80048e8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800489a:	7bbb      	ldrb	r3, [r7, #14]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00c      	beq.n	80048ba <USBD_StdEPReq+0x112>
 80048a0:	7bbb      	ldrb	r3, [r7, #14]
 80048a2:	2b80      	cmp	r3, #128	; 0x80
 80048a4:	d009      	beq.n	80048ba <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80048a6:	7bbb      	ldrb	r3, [r7, #14]
 80048a8:	4619      	mov	r1, r3
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f001 f840 	bl	8005930 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80048b0:	2180      	movs	r1, #128	; 0x80
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f001 f83c 	bl	8005930 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80048b8:	e01c      	b.n	80048f4 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80048ba:	6839      	ldr	r1, [r7, #0]
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 fbe1 	bl	8005084 <USBD_CtlError>
              break;
 80048c2:	e017      	b.n	80048f4 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	885b      	ldrh	r3, [r3, #2]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d112      	bne.n	80048f2 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80048cc:	7bbb      	ldrb	r3, [r7, #14]
 80048ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d004      	beq.n	80048e0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80048d6:	7bbb      	ldrb	r3, [r7, #14]
 80048d8:	4619      	mov	r1, r3
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f001 f847 	bl	800596e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 fc97 	bl	8005214 <USBD_CtlSendStatus>
              }
              break;
 80048e6:	e004      	b.n	80048f2 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80048e8:	6839      	ldr	r1, [r7, #0]
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 fbca 	bl	8005084 <USBD_CtlError>
              break;
 80048f0:	e000      	b.n	80048f4 <USBD_StdEPReq+0x14c>
              break;
 80048f2:	bf00      	nop
          }
          break;
 80048f4:	e0aa      	b.n	8004a4c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d002      	beq.n	8004906 <USBD_StdEPReq+0x15e>
 8004900:	2b03      	cmp	r3, #3
 8004902:	d032      	beq.n	800496a <USBD_StdEPReq+0x1c2>
 8004904:	e097      	b.n	8004a36 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004906:	7bbb      	ldrb	r3, [r7, #14]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d007      	beq.n	800491c <USBD_StdEPReq+0x174>
 800490c:	7bbb      	ldrb	r3, [r7, #14]
 800490e:	2b80      	cmp	r3, #128	; 0x80
 8004910:	d004      	beq.n	800491c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8004912:	6839      	ldr	r1, [r7, #0]
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 fbb5 	bl	8005084 <USBD_CtlError>
                break;
 800491a:	e091      	b.n	8004a40 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800491c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004920:	2b00      	cmp	r3, #0
 8004922:	da0b      	bge.n	800493c <USBD_StdEPReq+0x194>
 8004924:	7bbb      	ldrb	r3, [r7, #14]
 8004926:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800492a:	4613      	mov	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	3310      	adds	r3, #16
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	4413      	add	r3, r2
 8004938:	3304      	adds	r3, #4
 800493a:	e00b      	b.n	8004954 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800493c:	7bbb      	ldrb	r3, [r7, #14]
 800493e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004942:	4613      	mov	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	4413      	add	r3, r2
 8004952:	3304      	adds	r3, #4
 8004954:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2202      	movs	r2, #2
 8004960:	4619      	mov	r1, r3
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fbf8 	bl	8005158 <USBD_CtlSendData>
              break;
 8004968:	e06a      	b.n	8004a40 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800496a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800496e:	2b00      	cmp	r3, #0
 8004970:	da11      	bge.n	8004996 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004972:	7bbb      	ldrb	r3, [r7, #14]
 8004974:	f003 020f 	and.w	r2, r3, #15
 8004978:	6879      	ldr	r1, [r7, #4]
 800497a:	4613      	mov	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	440b      	add	r3, r1
 8004984:	3318      	adds	r3, #24
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d117      	bne.n	80049bc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800498c:	6839      	ldr	r1, [r7, #0]
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 fb78 	bl	8005084 <USBD_CtlError>
                  break;
 8004994:	e054      	b.n	8004a40 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004996:	7bbb      	ldrb	r3, [r7, #14]
 8004998:	f003 020f 	and.w	r2, r3, #15
 800499c:	6879      	ldr	r1, [r7, #4]
 800499e:	4613      	mov	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	440b      	add	r3, r1
 80049a8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d104      	bne.n	80049bc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80049b2:	6839      	ldr	r1, [r7, #0]
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 fb65 	bl	8005084 <USBD_CtlError>
                  break;
 80049ba:	e041      	b.n	8004a40 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80049bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	da0b      	bge.n	80049dc <USBD_StdEPReq+0x234>
 80049c4:	7bbb      	ldrb	r3, [r7, #14]
 80049c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049ca:	4613      	mov	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	3310      	adds	r3, #16
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	4413      	add	r3, r2
 80049d8:	3304      	adds	r3, #4
 80049da:	e00b      	b.n	80049f4 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80049dc:	7bbb      	ldrb	r3, [r7, #14]
 80049de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80049e2:	4613      	mov	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	4413      	add	r3, r2
 80049f2:	3304      	adds	r3, #4
 80049f4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80049f6:	7bbb      	ldrb	r3, [r7, #14]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <USBD_StdEPReq+0x25a>
 80049fc:	7bbb      	ldrb	r3, [r7, #14]
 80049fe:	2b80      	cmp	r3, #128	; 0x80
 8004a00:	d103      	bne.n	8004a0a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	2200      	movs	r2, #0
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	e00e      	b.n	8004a28 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8004a0a:	7bbb      	ldrb	r3, [r7, #14]
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 ffcc 	bl	80059ac <USBD_LL_IsStallEP>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	e002      	b.n	8004a28 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2200      	movs	r2, #0
 8004a26:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 fb92 	bl	8005158 <USBD_CtlSendData>
              break;
 8004a34:	e004      	b.n	8004a40 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8004a36:	6839      	ldr	r1, [r7, #0]
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 fb23 	bl	8005084 <USBD_CtlError>
              break;
 8004a3e:	bf00      	nop
          }
          break;
 8004a40:	e004      	b.n	8004a4c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8004a42:	6839      	ldr	r1, [r7, #0]
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 fb1d 	bl	8005084 <USBD_CtlError>
          break;
 8004a4a:	bf00      	nop
      }
      break;
 8004a4c:	e004      	b.n	8004a58 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8004a4e:	6839      	ldr	r1, [r7, #0]
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 fb17 	bl	8005084 <USBD_CtlError>
      break;
 8004a56:	bf00      	nop
  }

  return ret;
 8004a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
	...

08004a64 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8004a72:	2300      	movs	r3, #0
 8004a74:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	885b      	ldrh	r3, [r3, #2]
 8004a7e:	0a1b      	lsrs	r3, r3, #8
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	3b01      	subs	r3, #1
 8004a84:	2b06      	cmp	r3, #6
 8004a86:	f200 8128 	bhi.w	8004cda <USBD_GetDescriptor+0x276>
 8004a8a:	a201      	add	r2, pc, #4	; (adr r2, 8004a90 <USBD_GetDescriptor+0x2c>)
 8004a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a90:	08004aad 	.word	0x08004aad
 8004a94:	08004ac5 	.word	0x08004ac5
 8004a98:	08004b05 	.word	0x08004b05
 8004a9c:	08004cdb 	.word	0x08004cdb
 8004aa0:	08004cdb 	.word	0x08004cdb
 8004aa4:	08004c7b 	.word	0x08004c7b
 8004aa8:	08004ca7 	.word	0x08004ca7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	7c12      	ldrb	r2, [r2, #16]
 8004ab8:	f107 0108 	add.w	r1, r7, #8
 8004abc:	4610      	mov	r0, r2
 8004abe:	4798      	blx	r3
 8004ac0:	60f8      	str	r0, [r7, #12]
      break;
 8004ac2:	e112      	b.n	8004cea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	7c1b      	ldrb	r3, [r3, #16]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10d      	bne.n	8004ae8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad4:	f107 0208 	add.w	r2, r7, #8
 8004ad8:	4610      	mov	r0, r2
 8004ada:	4798      	blx	r3
 8004adc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8004ae6:	e100      	b.n	8004cea <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af0:	f107 0208 	add.w	r2, r7, #8
 8004af4:	4610      	mov	r0, r2
 8004af6:	4798      	blx	r3
 8004af8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	3301      	adds	r3, #1
 8004afe:	2202      	movs	r2, #2
 8004b00:	701a      	strb	r2, [r3, #0]
      break;
 8004b02:	e0f2      	b.n	8004cea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	885b      	ldrh	r3, [r3, #2]
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b05      	cmp	r3, #5
 8004b0c:	f200 80ac 	bhi.w	8004c68 <USBD_GetDescriptor+0x204>
 8004b10:	a201      	add	r2, pc, #4	; (adr r2, 8004b18 <USBD_GetDescriptor+0xb4>)
 8004b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b16:	bf00      	nop
 8004b18:	08004b31 	.word	0x08004b31
 8004b1c:	08004b65 	.word	0x08004b65
 8004b20:	08004b99 	.word	0x08004b99
 8004b24:	08004bcd 	.word	0x08004bcd
 8004b28:	08004c01 	.word	0x08004c01
 8004b2c:	08004c35 	.word	0x08004c35
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00b      	beq.n	8004b54 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	7c12      	ldrb	r2, [r2, #16]
 8004b48:	f107 0108 	add.w	r1, r7, #8
 8004b4c:	4610      	mov	r0, r2
 8004b4e:	4798      	blx	r3
 8004b50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004b52:	e091      	b.n	8004c78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004b54:	6839      	ldr	r1, [r7, #0]
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 fa94 	bl	8005084 <USBD_CtlError>
            err++;
 8004b5c:	7afb      	ldrb	r3, [r7, #11]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	72fb      	strb	r3, [r7, #11]
          break;
 8004b62:	e089      	b.n	8004c78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00b      	beq.n	8004b88 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	7c12      	ldrb	r2, [r2, #16]
 8004b7c:	f107 0108 	add.w	r1, r7, #8
 8004b80:	4610      	mov	r0, r2
 8004b82:	4798      	blx	r3
 8004b84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004b86:	e077      	b.n	8004c78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004b88:	6839      	ldr	r1, [r7, #0]
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 fa7a 	bl	8005084 <USBD_CtlError>
            err++;
 8004b90:	7afb      	ldrb	r3, [r7, #11]
 8004b92:	3301      	adds	r3, #1
 8004b94:	72fb      	strb	r3, [r7, #11]
          break;
 8004b96:	e06f      	b.n	8004c78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00b      	beq.n	8004bbc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	7c12      	ldrb	r2, [r2, #16]
 8004bb0:	f107 0108 	add.w	r1, r7, #8
 8004bb4:	4610      	mov	r0, r2
 8004bb6:	4798      	blx	r3
 8004bb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004bba:	e05d      	b.n	8004c78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004bbc:	6839      	ldr	r1, [r7, #0]
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 fa60 	bl	8005084 <USBD_CtlError>
            err++;
 8004bc4:	7afb      	ldrb	r3, [r7, #11]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	72fb      	strb	r3, [r7, #11]
          break;
 8004bca:	e055      	b.n	8004c78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00b      	beq.n	8004bf0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	7c12      	ldrb	r2, [r2, #16]
 8004be4:	f107 0108 	add.w	r1, r7, #8
 8004be8:	4610      	mov	r0, r2
 8004bea:	4798      	blx	r3
 8004bec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004bee:	e043      	b.n	8004c78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004bf0:	6839      	ldr	r1, [r7, #0]
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 fa46 	bl	8005084 <USBD_CtlError>
            err++;
 8004bf8:	7afb      	ldrb	r3, [r7, #11]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	72fb      	strb	r3, [r7, #11]
          break;
 8004bfe:	e03b      	b.n	8004c78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00b      	beq.n	8004c24 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	7c12      	ldrb	r2, [r2, #16]
 8004c18:	f107 0108 	add.w	r1, r7, #8
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	4798      	blx	r3
 8004c20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004c22:	e029      	b.n	8004c78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004c24:	6839      	ldr	r1, [r7, #0]
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 fa2c 	bl	8005084 <USBD_CtlError>
            err++;
 8004c2c:	7afb      	ldrb	r3, [r7, #11]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	72fb      	strb	r3, [r7, #11]
          break;
 8004c32:	e021      	b.n	8004c78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00b      	beq.n	8004c58 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	7c12      	ldrb	r2, [r2, #16]
 8004c4c:	f107 0108 	add.w	r1, r7, #8
 8004c50:	4610      	mov	r0, r2
 8004c52:	4798      	blx	r3
 8004c54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004c56:	e00f      	b.n	8004c78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004c58:	6839      	ldr	r1, [r7, #0]
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 fa12 	bl	8005084 <USBD_CtlError>
            err++;
 8004c60:	7afb      	ldrb	r3, [r7, #11]
 8004c62:	3301      	adds	r3, #1
 8004c64:	72fb      	strb	r3, [r7, #11]
          break;
 8004c66:	e007      	b.n	8004c78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8004c68:	6839      	ldr	r1, [r7, #0]
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 fa0a 	bl	8005084 <USBD_CtlError>
          err++;
 8004c70:	7afb      	ldrb	r3, [r7, #11]
 8004c72:	3301      	adds	r3, #1
 8004c74:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8004c76:	e038      	b.n	8004cea <USBD_GetDescriptor+0x286>
 8004c78:	e037      	b.n	8004cea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	7c1b      	ldrb	r3, [r3, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d109      	bne.n	8004c96 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c8a:	f107 0208 	add.w	r2, r7, #8
 8004c8e:	4610      	mov	r0, r2
 8004c90:	4798      	blx	r3
 8004c92:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004c94:	e029      	b.n	8004cea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8004c96:	6839      	ldr	r1, [r7, #0]
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 f9f3 	bl	8005084 <USBD_CtlError>
        err++;
 8004c9e:	7afb      	ldrb	r3, [r7, #11]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	72fb      	strb	r3, [r7, #11]
      break;
 8004ca4:	e021      	b.n	8004cea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	7c1b      	ldrb	r3, [r3, #16]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10d      	bne.n	8004cca <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb6:	f107 0208 	add.w	r2, r7, #8
 8004cba:	4610      	mov	r0, r2
 8004cbc:	4798      	blx	r3
 8004cbe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	2207      	movs	r2, #7
 8004cc6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004cc8:	e00f      	b.n	8004cea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8004cca:	6839      	ldr	r1, [r7, #0]
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f9d9 	bl	8005084 <USBD_CtlError>
        err++;
 8004cd2:	7afb      	ldrb	r3, [r7, #11]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	72fb      	strb	r3, [r7, #11]
      break;
 8004cd8:	e007      	b.n	8004cea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8004cda:	6839      	ldr	r1, [r7, #0]
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f9d1 	bl	8005084 <USBD_CtlError>
      err++;
 8004ce2:	7afb      	ldrb	r3, [r7, #11]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	72fb      	strb	r3, [r7, #11]
      break;
 8004ce8:	bf00      	nop
  }

  if (err != 0U)
 8004cea:	7afb      	ldrb	r3, [r7, #11]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d11c      	bne.n	8004d2a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8004cf0:	893b      	ldrh	r3, [r7, #8]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d011      	beq.n	8004d1a <USBD_GetDescriptor+0x2b6>
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	88db      	ldrh	r3, [r3, #6]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00d      	beq.n	8004d1a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	88da      	ldrh	r2, [r3, #6]
 8004d02:	893b      	ldrh	r3, [r7, #8]
 8004d04:	4293      	cmp	r3, r2
 8004d06:	bf28      	it	cs
 8004d08:	4613      	movcs	r3, r2
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004d0e:	893b      	ldrh	r3, [r7, #8]
 8004d10:	461a      	mov	r2, r3
 8004d12:	68f9      	ldr	r1, [r7, #12]
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 fa1f 	bl	8005158 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	88db      	ldrh	r3, [r3, #6]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d104      	bne.n	8004d2c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 fa76 	bl	8005214 <USBD_CtlSendStatus>
 8004d28:	e000      	b.n	8004d2c <USBD_GetDescriptor+0x2c8>
    return;
 8004d2a:	bf00      	nop
    }
  }
}
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop

08004d34 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	889b      	ldrh	r3, [r3, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d130      	bne.n	8004da8 <USBD_SetAddress+0x74>
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	88db      	ldrh	r3, [r3, #6]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d12c      	bne.n	8004da8 <USBD_SetAddress+0x74>
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	885b      	ldrh	r3, [r3, #2]
 8004d52:	2b7f      	cmp	r3, #127	; 0x7f
 8004d54:	d828      	bhi.n	8004da8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	885b      	ldrh	r3, [r3, #2]
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d60:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d68:	2b03      	cmp	r3, #3
 8004d6a:	d104      	bne.n	8004d76 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8004d6c:	6839      	ldr	r1, [r7, #0]
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f988 	bl	8005084 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d74:	e01c      	b.n	8004db0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	7bfa      	ldrb	r2, [r7, #15]
 8004d7a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004d7e:	7bfb      	ldrb	r3, [r7, #15]
 8004d80:	4619      	mov	r1, r3
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 fe37 	bl	80059f6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 fa43 	bl	8005214 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8004d8e:	7bfb      	ldrb	r3, [r7, #15]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d004      	beq.n	8004d9e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2202      	movs	r2, #2
 8004d98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d9c:	e008      	b.n	8004db0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004da6:	e003      	b.n	8004db0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8004da8:	6839      	ldr	r1, [r7, #0]
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f96a 	bl	8005084 <USBD_CtlError>
  }
}
 8004db0:	bf00      	nop
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	885b      	ldrh	r3, [r3, #2]
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	4b41      	ldr	r3, [pc, #260]	; (8004ed0 <USBD_SetConfig+0x118>)
 8004dca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004dcc:	4b40      	ldr	r3, [pc, #256]	; (8004ed0 <USBD_SetConfig+0x118>)
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d904      	bls.n	8004dde <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8004dd4:	6839      	ldr	r1, [r7, #0]
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f954 	bl	8005084 <USBD_CtlError>
 8004ddc:	e075      	b.n	8004eca <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d002      	beq.n	8004dee <USBD_SetConfig+0x36>
 8004de8:	2b03      	cmp	r3, #3
 8004dea:	d023      	beq.n	8004e34 <USBD_SetConfig+0x7c>
 8004dec:	e062      	b.n	8004eb4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8004dee:	4b38      	ldr	r3, [pc, #224]	; (8004ed0 <USBD_SetConfig+0x118>)
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d01a      	beq.n	8004e2c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8004df6:	4b36      	ldr	r3, [pc, #216]	; (8004ed0 <USBD_SetConfig+0x118>)
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2203      	movs	r2, #3
 8004e04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004e08:	4b31      	ldr	r3, [pc, #196]	; (8004ed0 <USBD_SetConfig+0x118>)
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7ff f9f3 	bl	80041fa <USBD_SetClassConfig>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d104      	bne.n	8004e24 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8004e1a:	6839      	ldr	r1, [r7, #0]
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 f931 	bl	8005084 <USBD_CtlError>
            return;
 8004e22:	e052      	b.n	8004eca <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 f9f5 	bl	8005214 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8004e2a:	e04e      	b.n	8004eca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f9f1 	bl	8005214 <USBD_CtlSendStatus>
        break;
 8004e32:	e04a      	b.n	8004eca <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8004e34:	4b26      	ldr	r3, [pc, #152]	; (8004ed0 <USBD_SetConfig+0x118>)
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d112      	bne.n	8004e62 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8004e44:	4b22      	ldr	r3, [pc, #136]	; (8004ed0 <USBD_SetConfig+0x118>)
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	461a      	mov	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8004e4e:	4b20      	ldr	r3, [pc, #128]	; (8004ed0 <USBD_SetConfig+0x118>)
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	4619      	mov	r1, r3
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f7ff f9ef 	bl	8004238 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f9da 	bl	8005214 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8004e60:	e033      	b.n	8004eca <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8004e62:	4b1b      	ldr	r3, [pc, #108]	; (8004ed0 <USBD_SetConfig+0x118>)
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	461a      	mov	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d01d      	beq.n	8004eac <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	4619      	mov	r1, r3
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7ff f9dd 	bl	8004238 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8004e7e:	4b14      	ldr	r3, [pc, #80]	; (8004ed0 <USBD_SetConfig+0x118>)
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	461a      	mov	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004e88:	4b11      	ldr	r3, [pc, #68]	; (8004ed0 <USBD_SetConfig+0x118>)
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7ff f9b3 	bl	80041fa <USBD_SetClassConfig>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d104      	bne.n	8004ea4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8004e9a:	6839      	ldr	r1, [r7, #0]
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f8f1 	bl	8005084 <USBD_CtlError>
            return;
 8004ea2:	e012      	b.n	8004eca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 f9b5 	bl	8005214 <USBD_CtlSendStatus>
        break;
 8004eaa:	e00e      	b.n	8004eca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f9b1 	bl	8005214 <USBD_CtlSendStatus>
        break;
 8004eb2:	e00a      	b.n	8004eca <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8004eb4:	6839      	ldr	r1, [r7, #0]
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f8e4 	bl	8005084 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8004ebc:	4b04      	ldr	r3, [pc, #16]	; (8004ed0 <USBD_SetConfig+0x118>)
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7ff f9b8 	bl	8004238 <USBD_ClrClassConfig>
        break;
 8004ec8:	bf00      	nop
    }
  }
}
 8004eca:	3708      	adds	r7, #8
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	20000200 	.word	0x20000200

08004ed4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	88db      	ldrh	r3, [r3, #6]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d004      	beq.n	8004ef0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8004ee6:	6839      	ldr	r1, [r7, #0]
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 f8cb 	bl	8005084 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8004eee:	e021      	b.n	8004f34 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	db17      	blt.n	8004f2a <USBD_GetConfig+0x56>
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	dd02      	ble.n	8004f04 <USBD_GetConfig+0x30>
 8004efe:	2b03      	cmp	r3, #3
 8004f00:	d00b      	beq.n	8004f1a <USBD_GetConfig+0x46>
 8004f02:	e012      	b.n	8004f2a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	3308      	adds	r3, #8
 8004f0e:	2201      	movs	r2, #1
 8004f10:	4619      	mov	r1, r3
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f920 	bl	8005158 <USBD_CtlSendData>
        break;
 8004f18:	e00c      	b.n	8004f34 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	2201      	movs	r2, #1
 8004f20:	4619      	mov	r1, r3
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f918 	bl	8005158 <USBD_CtlSendData>
        break;
 8004f28:	e004      	b.n	8004f34 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8004f2a:	6839      	ldr	r1, [r7, #0]
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f8a9 	bl	8005084 <USBD_CtlError>
        break;
 8004f32:	bf00      	nop
}
 8004f34:	bf00      	nop
 8004f36:	3708      	adds	r7, #8
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d81e      	bhi.n	8004f90 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	88db      	ldrh	r3, [r3, #6]
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d004      	beq.n	8004f64 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8004f5a:	6839      	ldr	r1, [r7, #0]
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f891 	bl	8005084 <USBD_CtlError>
        break;
 8004f62:	e01a      	b.n	8004f9a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d005      	beq.n	8004f80 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f043 0202 	orr.w	r2, r3, #2
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	330c      	adds	r3, #12
 8004f84:	2202      	movs	r2, #2
 8004f86:	4619      	mov	r1, r3
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 f8e5 	bl	8005158 <USBD_CtlSendData>
      break;
 8004f8e:	e004      	b.n	8004f9a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8004f90:	6839      	ldr	r1, [r7, #0]
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f876 	bl	8005084 <USBD_CtlError>
      break;
 8004f98:	bf00      	nop
  }
}
 8004f9a:	bf00      	nop
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b082      	sub	sp, #8
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
 8004faa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	885b      	ldrh	r3, [r3, #2]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d106      	bne.n	8004fc2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f929 	bl	8005214 <USBD_CtlSendStatus>
  }
}
 8004fc2:	bf00      	nop
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b082      	sub	sp, #8
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
 8004fd2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d80b      	bhi.n	8004ff8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	885b      	ldrh	r3, [r3, #2]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d10c      	bne.n	8005002 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f90f 	bl	8005214 <USBD_CtlSendStatus>
      }
      break;
 8004ff6:	e004      	b.n	8005002 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8004ff8:	6839      	ldr	r1, [r7, #0]
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f842 	bl	8005084 <USBD_CtlError>
      break;
 8005000:	e000      	b.n	8005004 <USBD_ClrFeature+0x3a>
      break;
 8005002:	bf00      	nop
  }
}
 8005004:	bf00      	nop
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	781a      	ldrb	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	785a      	ldrb	r2, [r3, #1]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	3302      	adds	r3, #2
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	b29a      	uxth	r2, r3
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	3303      	adds	r3, #3
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	b29b      	uxth	r3, r3
 8005036:	021b      	lsls	r3, r3, #8
 8005038:	b29b      	uxth	r3, r3
 800503a:	4413      	add	r3, r2
 800503c:	b29a      	uxth	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	3304      	adds	r3, #4
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	b29a      	uxth	r2, r3
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	3305      	adds	r3, #5
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	b29b      	uxth	r3, r3
 8005052:	021b      	lsls	r3, r3, #8
 8005054:	b29b      	uxth	r3, r3
 8005056:	4413      	add	r3, r2
 8005058:	b29a      	uxth	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	3306      	adds	r3, #6
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	b29a      	uxth	r2, r3
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	3307      	adds	r3, #7
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	b29b      	uxth	r3, r3
 800506e:	021b      	lsls	r3, r3, #8
 8005070:	b29b      	uxth	r3, r3
 8005072:	4413      	add	r3, r2
 8005074:	b29a      	uxth	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	80da      	strh	r2, [r3, #6]

}
 800507a:	bf00      	nop
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	bc80      	pop	{r7}
 8005082:	4770      	bx	lr

08005084 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800508e:	2180      	movs	r1, #128	; 0x80
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 fc4d 	bl	8005930 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005096:	2100      	movs	r1, #0
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 fc49 	bl	8005930 <USBD_LL_StallEP>
}
 800509e:	bf00      	nop
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b086      	sub	sp, #24
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	60f8      	str	r0, [r7, #12]
 80050ae:	60b9      	str	r1, [r7, #8]
 80050b0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80050b2:	2300      	movs	r3, #0
 80050b4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d032      	beq.n	8005122 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 f834 	bl	800512a <USBD_GetLen>
 80050c2:	4603      	mov	r3, r0
 80050c4:	3301      	adds	r3, #1
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80050d0:	7dfb      	ldrb	r3, [r7, #23]
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	75fa      	strb	r2, [r7, #23]
 80050d6:	461a      	mov	r2, r3
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	4413      	add	r3, r2
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	7812      	ldrb	r2, [r2, #0]
 80050e0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80050e2:	7dfb      	ldrb	r3, [r7, #23]
 80050e4:	1c5a      	adds	r2, r3, #1
 80050e6:	75fa      	strb	r2, [r7, #23]
 80050e8:	461a      	mov	r2, r3
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	4413      	add	r3, r2
 80050ee:	2203      	movs	r2, #3
 80050f0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80050f2:	e012      	b.n	800511a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	1c5a      	adds	r2, r3, #1
 80050f8:	60fa      	str	r2, [r7, #12]
 80050fa:	7dfa      	ldrb	r2, [r7, #23]
 80050fc:	1c51      	adds	r1, r2, #1
 80050fe:	75f9      	strb	r1, [r7, #23]
 8005100:	4611      	mov	r1, r2
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	440a      	add	r2, r1
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800510a:	7dfb      	ldrb	r3, [r7, #23]
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	75fa      	strb	r2, [r7, #23]
 8005110:	461a      	mov	r2, r3
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	4413      	add	r3, r2
 8005116:	2200      	movs	r2, #0
 8005118:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1e8      	bne.n	80050f4 <USBD_GetString+0x4e>
    }
  }
}
 8005122:	bf00      	nop
 8005124:	3718      	adds	r7, #24
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800512a:	b480      	push	{r7}
 800512c:	b085      	sub	sp, #20
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005132:	2300      	movs	r3, #0
 8005134:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8005136:	e005      	b.n	8005144 <USBD_GetLen+0x1a>
  {
    len++;
 8005138:	7bfb      	ldrb	r3, [r7, #15]
 800513a:	3301      	adds	r3, #1
 800513c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	3301      	adds	r3, #1
 8005142:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1f5      	bne.n	8005138 <USBD_GetLen+0xe>
  }

  return len;
 800514c:	7bfb      	ldrb	r3, [r7, #15]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3714      	adds	r7, #20
 8005152:	46bd      	mov	sp, r7
 8005154:	bc80      	pop	{r7}
 8005156:	4770      	bx	lr

08005158 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	4613      	mov	r3, r2
 8005164:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2202      	movs	r2, #2
 800516a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800516e:	88fa      	ldrh	r2, [r7, #6]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005174:	88fa      	ldrh	r2, [r7, #6]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800517a:	88fb      	ldrh	r3, [r7, #6]
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	2100      	movs	r1, #0
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f000 fc57 	bl	8005a34 <USBD_LL_Transmit>

  return USBD_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	4613      	mov	r3, r2
 800519c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800519e:	88fb      	ldrh	r3, [r7, #6]
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	2100      	movs	r1, #0
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f000 fc45 	bl	8005a34 <USBD_LL_Transmit>

  return USBD_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	4613      	mov	r3, r2
 80051c0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2203      	movs	r2, #3
 80051c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80051ca:	88fa      	ldrh	r2, [r7, #6]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80051d2:	88fa      	ldrh	r2, [r7, #6]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80051da:	88fb      	ldrh	r3, [r7, #6]
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	2100      	movs	r1, #0
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f000 fc4a 	bl	8005a7a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	4613      	mov	r3, r2
 80051fc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80051fe:	88fb      	ldrh	r3, [r7, #6]
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	2100      	movs	r1, #0
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f000 fc38 	bl	8005a7a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2204      	movs	r2, #4
 8005220:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005224:	2300      	movs	r3, #0
 8005226:	2200      	movs	r2, #0
 8005228:	2100      	movs	r1, #0
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 fc02 	bl	8005a34 <USBD_LL_Transmit>

  return USBD_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b082      	sub	sp, #8
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2205      	movs	r2, #5
 8005246:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800524a:	2300      	movs	r3, #0
 800524c:	2200      	movs	r2, #0
 800524e:	2100      	movs	r1, #0
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 fc12 	bl	8005a7a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005264:	2200      	movs	r2, #0
 8005266:	4912      	ldr	r1, [pc, #72]	; (80052b0 <MX_USB_DEVICE_Init+0x50>)
 8005268:	4812      	ldr	r0, [pc, #72]	; (80052b4 <MX_USB_DEVICE_Init+0x54>)
 800526a:	f7fe ff6c 	bl	8004146 <USBD_Init>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005274:	f7fb f8b8 	bl	80003e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005278:	490f      	ldr	r1, [pc, #60]	; (80052b8 <MX_USB_DEVICE_Init+0x58>)
 800527a:	480e      	ldr	r0, [pc, #56]	; (80052b4 <MX_USB_DEVICE_Init+0x54>)
 800527c:	f7fe ff8e 	bl	800419c <USBD_RegisterClass>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005286:	f7fb f8af 	bl	80003e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800528a:	490c      	ldr	r1, [pc, #48]	; (80052bc <MX_USB_DEVICE_Init+0x5c>)
 800528c:	4809      	ldr	r0, [pc, #36]	; (80052b4 <MX_USB_DEVICE_Init+0x54>)
 800528e:	f7fe febf 	bl	8004010 <USBD_CDC_RegisterInterface>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d001      	beq.n	800529c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005298:	f7fb f8a6 	bl	80003e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800529c:	4805      	ldr	r0, [pc, #20]	; (80052b4 <MX_USB_DEVICE_Init+0x54>)
 800529e:	f7fe ff96 	bl	80041ce <USBD_Start>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d001      	beq.n	80052ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80052a8:	f7fb f89e 	bl	80003e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80052ac:	bf00      	nop
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	2000012c 	.word	0x2000012c
 80052b4:	200004c8 	.word	0x200004c8
 80052b8:	20000018 	.word	0x20000018
 80052bc:	2000011c 	.word	0x2000011c

080052c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80052c4:	2200      	movs	r2, #0
 80052c6:	4905      	ldr	r1, [pc, #20]	; (80052dc <CDC_Init_FS+0x1c>)
 80052c8:	4805      	ldr	r0, [pc, #20]	; (80052e0 <CDC_Init_FS+0x20>)
 80052ca:	f7fe feb7 	bl	800403c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80052ce:	4905      	ldr	r1, [pc, #20]	; (80052e4 <CDC_Init_FS+0x24>)
 80052d0:	4803      	ldr	r0, [pc, #12]	; (80052e0 <CDC_Init_FS+0x20>)
 80052d2:	f7fe fecc 	bl	800406e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80052d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80052d8:	4618      	mov	r0, r3
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	20000b74 	.word	0x20000b74
 80052e0:	200004c8 	.word	0x200004c8
 80052e4:	2000078c 	.word	0x2000078c

080052e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80052ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bc80      	pop	{r7}
 80052f4:	4770      	bx	lr
	...

080052f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	4603      	mov	r3, r0
 8005300:	6039      	str	r1, [r7, #0]
 8005302:	71fb      	strb	r3, [r7, #7]
 8005304:	4613      	mov	r3, r2
 8005306:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005308:	79fb      	ldrb	r3, [r7, #7]
 800530a:	2b23      	cmp	r3, #35	; 0x23
 800530c:	d84a      	bhi.n	80053a4 <CDC_Control_FS+0xac>
 800530e:	a201      	add	r2, pc, #4	; (adr r2, 8005314 <CDC_Control_FS+0x1c>)
 8005310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005314:	080053a5 	.word	0x080053a5
 8005318:	080053a5 	.word	0x080053a5
 800531c:	080053a5 	.word	0x080053a5
 8005320:	080053a5 	.word	0x080053a5
 8005324:	080053a5 	.word	0x080053a5
 8005328:	080053a5 	.word	0x080053a5
 800532c:	080053a5 	.word	0x080053a5
 8005330:	080053a5 	.word	0x080053a5
 8005334:	080053a5 	.word	0x080053a5
 8005338:	080053a5 	.word	0x080053a5
 800533c:	080053a5 	.word	0x080053a5
 8005340:	080053a5 	.word	0x080053a5
 8005344:	080053a5 	.word	0x080053a5
 8005348:	080053a5 	.word	0x080053a5
 800534c:	080053a5 	.word	0x080053a5
 8005350:	080053a5 	.word	0x080053a5
 8005354:	080053a5 	.word	0x080053a5
 8005358:	080053a5 	.word	0x080053a5
 800535c:	080053a5 	.word	0x080053a5
 8005360:	080053a5 	.word	0x080053a5
 8005364:	080053a5 	.word	0x080053a5
 8005368:	080053a5 	.word	0x080053a5
 800536c:	080053a5 	.word	0x080053a5
 8005370:	080053a5 	.word	0x080053a5
 8005374:	080053a5 	.word	0x080053a5
 8005378:	080053a5 	.word	0x080053a5
 800537c:	080053a5 	.word	0x080053a5
 8005380:	080053a5 	.word	0x080053a5
 8005384:	080053a5 	.word	0x080053a5
 8005388:	080053a5 	.word	0x080053a5
 800538c:	080053a5 	.word	0x080053a5
 8005390:	080053a5 	.word	0x080053a5
 8005394:	080053a5 	.word	0x080053a5
 8005398:	080053a5 	.word	0x080053a5
 800539c:	080053a5 	.word	0x080053a5
 80053a0:	080053a5 	.word	0x080053a5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80053a4:	bf00      	nop
  }

  return (USBD_OK);
 80053a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bc80      	pop	{r7}
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop

080053b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80053be:	6879      	ldr	r1, [r7, #4]
 80053c0:	4805      	ldr	r0, [pc, #20]	; (80053d8 <CDC_Receive_FS+0x24>)
 80053c2:	f7fe fe54 	bl	800406e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80053c6:	4804      	ldr	r0, [pc, #16]	; (80053d8 <CDC_Receive_FS+0x24>)
 80053c8:	f7fe fe93 	bl	80040f2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80053cc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	200004c8 	.word	0x200004c8

080053dc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	460b      	mov	r3, r1
 80053e6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80053e8:	2300      	movs	r3, #0
 80053ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80053ec:	4b0d      	ldr	r3, [pc, #52]	; (8005424 <CDC_Transmit_FS+0x48>)
 80053ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053f2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80053fe:	2301      	movs	r3, #1
 8005400:	e00b      	b.n	800541a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005402:	887b      	ldrh	r3, [r7, #2]
 8005404:	461a      	mov	r2, r3
 8005406:	6879      	ldr	r1, [r7, #4]
 8005408:	4806      	ldr	r0, [pc, #24]	; (8005424 <CDC_Transmit_FS+0x48>)
 800540a:	f7fe fe17 	bl	800403c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800540e:	4805      	ldr	r0, [pc, #20]	; (8005424 <CDC_Transmit_FS+0x48>)
 8005410:	f7fe fe40 	bl	8004094 <USBD_CDC_TransmitPacket>
 8005414:	4603      	mov	r3, r0
 8005416:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005418:	7bfb      	ldrb	r3, [r7, #15]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	200004c8 	.word	0x200004c8

08005428 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	4603      	mov	r3, r0
 8005430:	6039      	str	r1, [r7, #0]
 8005432:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	2212      	movs	r2, #18
 8005438:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800543a:	4b03      	ldr	r3, [pc, #12]	; (8005448 <USBD_FS_DeviceDescriptor+0x20>)
}
 800543c:	4618      	mov	r0, r3
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	bc80      	pop	{r7}
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	20000148 	.word	0x20000148

0800544c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	4603      	mov	r3, r0
 8005454:	6039      	str	r1, [r7, #0]
 8005456:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	2204      	movs	r2, #4
 800545c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800545e:	4b03      	ldr	r3, [pc, #12]	; (800546c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005460:	4618      	mov	r0, r3
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	bc80      	pop	{r7}
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	2000015c 	.word	0x2000015c

08005470 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	4603      	mov	r3, r0
 8005478:	6039      	str	r1, [r7, #0]
 800547a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800547c:	79fb      	ldrb	r3, [r7, #7]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d105      	bne.n	800548e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	4907      	ldr	r1, [pc, #28]	; (80054a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8005486:	4808      	ldr	r0, [pc, #32]	; (80054a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8005488:	f7ff fe0d 	bl	80050a6 <USBD_GetString>
 800548c:	e004      	b.n	8005498 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	4904      	ldr	r1, [pc, #16]	; (80054a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8005492:	4805      	ldr	r0, [pc, #20]	; (80054a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8005494:	f7ff fe07 	bl	80050a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005498:	4b02      	ldr	r3, [pc, #8]	; (80054a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800549a:	4618      	mov	r0, r3
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	20000f5c 	.word	0x20000f5c
 80054a8:	08006454 	.word	0x08006454

080054ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	4603      	mov	r3, r0
 80054b4:	6039      	str	r1, [r7, #0]
 80054b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	4904      	ldr	r1, [pc, #16]	; (80054cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80054bc:	4804      	ldr	r0, [pc, #16]	; (80054d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80054be:	f7ff fdf2 	bl	80050a6 <USBD_GetString>
  return USBD_StrDesc;
 80054c2:	4b02      	ldr	r3, [pc, #8]	; (80054cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3708      	adds	r7, #8
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	20000f5c 	.word	0x20000f5c
 80054d0:	0800646c 	.word	0x0800646c

080054d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	4603      	mov	r3, r0
 80054dc:	6039      	str	r1, [r7, #0]
 80054de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	221a      	movs	r2, #26
 80054e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80054e6:	f000 f843 	bl	8005570 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80054ea:	4b02      	ldr	r3, [pc, #8]	; (80054f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3708      	adds	r7, #8
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	20000160 	.word	0x20000160

080054f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	4603      	mov	r3, r0
 8005500:	6039      	str	r1, [r7, #0]
 8005502:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005504:	79fb      	ldrb	r3, [r7, #7]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d105      	bne.n	8005516 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800550a:	683a      	ldr	r2, [r7, #0]
 800550c:	4907      	ldr	r1, [pc, #28]	; (800552c <USBD_FS_ConfigStrDescriptor+0x34>)
 800550e:	4808      	ldr	r0, [pc, #32]	; (8005530 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005510:	f7ff fdc9 	bl	80050a6 <USBD_GetString>
 8005514:	e004      	b.n	8005520 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005516:	683a      	ldr	r2, [r7, #0]
 8005518:	4904      	ldr	r1, [pc, #16]	; (800552c <USBD_FS_ConfigStrDescriptor+0x34>)
 800551a:	4805      	ldr	r0, [pc, #20]	; (8005530 <USBD_FS_ConfigStrDescriptor+0x38>)
 800551c:	f7ff fdc3 	bl	80050a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005520:	4b02      	ldr	r3, [pc, #8]	; (800552c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005522:	4618      	mov	r0, r3
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20000f5c 	.word	0x20000f5c
 8005530:	08006480 	.word	0x08006480

08005534 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	4603      	mov	r3, r0
 800553c:	6039      	str	r1, [r7, #0]
 800553e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005540:	79fb      	ldrb	r3, [r7, #7]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d105      	bne.n	8005552 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005546:	683a      	ldr	r2, [r7, #0]
 8005548:	4907      	ldr	r1, [pc, #28]	; (8005568 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800554a:	4808      	ldr	r0, [pc, #32]	; (800556c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800554c:	f7ff fdab 	bl	80050a6 <USBD_GetString>
 8005550:	e004      	b.n	800555c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	4904      	ldr	r1, [pc, #16]	; (8005568 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005556:	4805      	ldr	r0, [pc, #20]	; (800556c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005558:	f7ff fda5 	bl	80050a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800555c:	4b02      	ldr	r3, [pc, #8]	; (8005568 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800555e:	4618      	mov	r0, r3
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	20000f5c 	.word	0x20000f5c
 800556c:	0800648c 	.word	0x0800648c

08005570 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005576:	4b0f      	ldr	r3, [pc, #60]	; (80055b4 <Get_SerialNum+0x44>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800557c:	4b0e      	ldr	r3, [pc, #56]	; (80055b8 <Get_SerialNum+0x48>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005582:	4b0e      	ldr	r3, [pc, #56]	; (80055bc <Get_SerialNum+0x4c>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4413      	add	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d009      	beq.n	80055aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005596:	2208      	movs	r2, #8
 8005598:	4909      	ldr	r1, [pc, #36]	; (80055c0 <Get_SerialNum+0x50>)
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f000 f814 	bl	80055c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80055a0:	2204      	movs	r2, #4
 80055a2:	4908      	ldr	r1, [pc, #32]	; (80055c4 <Get_SerialNum+0x54>)
 80055a4:	68b8      	ldr	r0, [r7, #8]
 80055a6:	f000 f80f 	bl	80055c8 <IntToUnicode>
  }
}
 80055aa:	bf00      	nop
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	1ffff7e8 	.word	0x1ffff7e8
 80055b8:	1ffff7ec 	.word	0x1ffff7ec
 80055bc:	1ffff7f0 	.word	0x1ffff7f0
 80055c0:	20000162 	.word	0x20000162
 80055c4:	20000172 	.word	0x20000172

080055c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	4613      	mov	r3, r2
 80055d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80055d6:	2300      	movs	r3, #0
 80055d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80055da:	2300      	movs	r3, #0
 80055dc:	75fb      	strb	r3, [r7, #23]
 80055de:	e027      	b.n	8005630 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	0f1b      	lsrs	r3, r3, #28
 80055e4:	2b09      	cmp	r3, #9
 80055e6:	d80b      	bhi.n	8005600 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	0f1b      	lsrs	r3, r3, #28
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	7dfb      	ldrb	r3, [r7, #23]
 80055f0:	005b      	lsls	r3, r3, #1
 80055f2:	4619      	mov	r1, r3
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	440b      	add	r3, r1
 80055f8:	3230      	adds	r2, #48	; 0x30
 80055fa:	b2d2      	uxtb	r2, r2
 80055fc:	701a      	strb	r2, [r3, #0]
 80055fe:	e00a      	b.n	8005616 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	0f1b      	lsrs	r3, r3, #28
 8005604:	b2da      	uxtb	r2, r3
 8005606:	7dfb      	ldrb	r3, [r7, #23]
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	4619      	mov	r1, r3
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	440b      	add	r3, r1
 8005610:	3237      	adds	r2, #55	; 0x37
 8005612:	b2d2      	uxtb	r2, r2
 8005614:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	011b      	lsls	r3, r3, #4
 800561a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800561c:	7dfb      	ldrb	r3, [r7, #23]
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	3301      	adds	r3, #1
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	4413      	add	r3, r2
 8005626:	2200      	movs	r2, #0
 8005628:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800562a:	7dfb      	ldrb	r3, [r7, #23]
 800562c:	3301      	adds	r3, #1
 800562e:	75fb      	strb	r3, [r7, #23]
 8005630:	7dfa      	ldrb	r2, [r7, #23]
 8005632:	79fb      	ldrb	r3, [r7, #7]
 8005634:	429a      	cmp	r2, r3
 8005636:	d3d3      	bcc.n	80055e0 <IntToUnicode+0x18>
  }
}
 8005638:	bf00      	nop
 800563a:	371c      	adds	r7, #28
 800563c:	46bd      	mov	sp, r7
 800563e:	bc80      	pop	{r7}
 8005640:	4770      	bx	lr
	...

08005644 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a0d      	ldr	r2, [pc, #52]	; (8005688 <HAL_PCD_MspInit+0x44>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d113      	bne.n	800567e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8005656:	4b0d      	ldr	r3, [pc, #52]	; (800568c <HAL_PCD_MspInit+0x48>)
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	4a0c      	ldr	r2, [pc, #48]	; (800568c <HAL_PCD_MspInit+0x48>)
 800565c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005660:	61d3      	str	r3, [r2, #28]
 8005662:	4b0a      	ldr	r3, [pc, #40]	; (800568c <HAL_PCD_MspInit+0x48>)
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800566e:	2200      	movs	r2, #0
 8005670:	2100      	movs	r1, #0
 8005672:	2014      	movs	r0, #20
 8005674:	f7fb f955 	bl	8000922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005678:	2014      	movs	r0, #20
 800567a:	f7fb f96e 	bl	800095a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800567e:	bf00      	nop
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	40005c00 	.word	0x40005c00
 800568c:	40021000 	.word	0x40021000

08005690 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80056a4:	4619      	mov	r1, r3
 80056a6:	4610      	mov	r0, r2
 80056a8:	f7fe fdd9 	bl	800425e <USBD_LL_SetupStage>
}
 80056ac:	bf00      	nop
 80056ae:	3708      	adds	r7, #8
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	460b      	mov	r3, r1
 80056be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80056c6:	78fb      	ldrb	r3, [r7, #3]
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	015b      	lsls	r3, r3, #5
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	78fb      	ldrb	r3, [r7, #3]
 80056d6:	4619      	mov	r1, r3
 80056d8:	f7fe fe0c 	bl	80042f4 <USBD_LL_DataOutStage>
}
 80056dc:	bf00      	nop
 80056de:	3708      	adds	r7, #8
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	460b      	mov	r3, r1
 80056ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80056f6:	78fb      	ldrb	r3, [r7, #3]
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	015b      	lsls	r3, r3, #5
 80056fc:	4413      	add	r3, r2
 80056fe:	333c      	adds	r3, #60	; 0x3c
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	78fb      	ldrb	r3, [r7, #3]
 8005704:	4619      	mov	r1, r3
 8005706:	f7fe fe66 	bl	80043d6 <USBD_LL_DataInStage>
}
 800570a:	bf00      	nop
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b082      	sub	sp, #8
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005720:	4618      	mov	r0, r3
 8005722:	f7fe ff76 	bl	8004612 <USBD_LL_SOF>
}
 8005726:	bf00      	nop
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800572e:	b580      	push	{r7, lr}
 8005730:	b084      	sub	sp, #16
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005736:	2301      	movs	r3, #1
 8005738:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	2b02      	cmp	r3, #2
 8005740:	d001      	beq.n	8005746 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8005742:	f7fa fe51 	bl	80003e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800574c:	7bfa      	ldrb	r2, [r7, #15]
 800574e:	4611      	mov	r1, r2
 8005750:	4618      	mov	r0, r3
 8005752:	f7fe ff26 	bl	80045a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800575c:	4618      	mov	r0, r3
 800575e:	f7fe fedf 	bl	8004520 <USBD_LL_Reset>
}
 8005762:	bf00      	nop
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
	...

0800576c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800577a:	4618      	mov	r0, r3
 800577c:	f7fe ff20 	bl	80045c0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d005      	beq.n	8005794 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005788:	4b04      	ldr	r3, [pc, #16]	; (800579c <HAL_PCD_SuspendCallback+0x30>)
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	4a03      	ldr	r2, [pc, #12]	; (800579c <HAL_PCD_SuspendCallback+0x30>)
 800578e:	f043 0306 	orr.w	r3, r3, #6
 8005792:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005794:	bf00      	nop
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	e000ed00 	.word	0xe000ed00

080057a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7fe ff1a 	bl	80045e8 <USBD_LL_Resume>
}
 80057b4:	bf00      	nop
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80057c4:	4a28      	ldr	r2, [pc, #160]	; (8005868 <USBD_LL_Init+0xac>)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a26      	ldr	r2, [pc, #152]	; (8005868 <USBD_LL_Init+0xac>)
 80057d0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80057d4:	4b24      	ldr	r3, [pc, #144]	; (8005868 <USBD_LL_Init+0xac>)
 80057d6:	4a25      	ldr	r2, [pc, #148]	; (800586c <USBD_LL_Init+0xb0>)
 80057d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80057da:	4b23      	ldr	r3, [pc, #140]	; (8005868 <USBD_LL_Init+0xac>)
 80057dc:	2208      	movs	r2, #8
 80057de:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80057e0:	4b21      	ldr	r3, [pc, #132]	; (8005868 <USBD_LL_Init+0xac>)
 80057e2:	2202      	movs	r2, #2
 80057e4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80057e6:	4b20      	ldr	r3, [pc, #128]	; (8005868 <USBD_LL_Init+0xac>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80057ec:	4b1e      	ldr	r3, [pc, #120]	; (8005868 <USBD_LL_Init+0xac>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80057f2:	4b1d      	ldr	r3, [pc, #116]	; (8005868 <USBD_LL_Init+0xac>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80057f8:	481b      	ldr	r0, [pc, #108]	; (8005868 <USBD_LL_Init+0xac>)
 80057fa:	f7fb fcdc 	bl	80011b6 <HAL_PCD_Init>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8005804:	f7fa fdf0 	bl	80003e8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800580e:	2318      	movs	r3, #24
 8005810:	2200      	movs	r2, #0
 8005812:	2100      	movs	r1, #0
 8005814:	f7fc fb74 	bl	8001f00 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800581e:	2358      	movs	r3, #88	; 0x58
 8005820:	2200      	movs	r2, #0
 8005822:	2180      	movs	r1, #128	; 0x80
 8005824:	f7fc fb6c 	bl	8001f00 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800582e:	23c0      	movs	r3, #192	; 0xc0
 8005830:	2200      	movs	r2, #0
 8005832:	2181      	movs	r1, #129	; 0x81
 8005834:	f7fc fb64 	bl	8001f00 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800583e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005842:	2200      	movs	r2, #0
 8005844:	2101      	movs	r1, #1
 8005846:	f7fc fb5b 	bl	8001f00 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005850:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005854:	2200      	movs	r2, #0
 8005856:	2182      	movs	r1, #130	; 0x82
 8005858:	f7fc fb52 	bl	8001f00 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3708      	adds	r7, #8
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	2000115c 	.word	0x2000115c
 800586c:	40005c00 	.word	0x40005c00

08005870 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005878:	2300      	movs	r3, #0
 800587a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800587c:	2300      	movs	r3, #0
 800587e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005886:	4618      	mov	r0, r3
 8005888:	f7fb fd76 	bl	8001378 <HAL_PCD_Start>
 800588c:	4603      	mov	r3, r0
 800588e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005890:	7bfb      	ldrb	r3, [r7, #15]
 8005892:	4618      	mov	r0, r3
 8005894:	f000 f948 	bl	8005b28 <USBD_Get_USB_Status>
 8005898:	4603      	mov	r3, r0
 800589a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800589c:	7bbb      	ldrb	r3, [r7, #14]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b084      	sub	sp, #16
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	4608      	mov	r0, r1
 80058b0:	4611      	mov	r1, r2
 80058b2:	461a      	mov	r2, r3
 80058b4:	4603      	mov	r3, r0
 80058b6:	70fb      	strb	r3, [r7, #3]
 80058b8:	460b      	mov	r3, r1
 80058ba:	70bb      	strb	r3, [r7, #2]
 80058bc:	4613      	mov	r3, r2
 80058be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80058c0:	2300      	movs	r3, #0
 80058c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80058c4:	2300      	movs	r3, #0
 80058c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80058ce:	78bb      	ldrb	r3, [r7, #2]
 80058d0:	883a      	ldrh	r2, [r7, #0]
 80058d2:	78f9      	ldrb	r1, [r7, #3]
 80058d4:	f7fb fea9 	bl	800162a <HAL_PCD_EP_Open>
 80058d8:	4603      	mov	r3, r0
 80058da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80058dc:	7bfb      	ldrb	r3, [r7, #15]
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 f922 	bl	8005b28 <USBD_Get_USB_Status>
 80058e4:	4603      	mov	r3, r0
 80058e6:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80058e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b084      	sub	sp, #16
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
 80058fa:	460b      	mov	r3, r1
 80058fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80058fe:	2300      	movs	r3, #0
 8005900:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005902:	2300      	movs	r3, #0
 8005904:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800590c:	78fa      	ldrb	r2, [r7, #3]
 800590e:	4611      	mov	r1, r2
 8005910:	4618      	mov	r0, r3
 8005912:	f7fb feea 	bl	80016ea <HAL_PCD_EP_Close>
 8005916:	4603      	mov	r3, r0
 8005918:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800591a:	7bfb      	ldrb	r3, [r7, #15]
 800591c:	4618      	mov	r0, r3
 800591e:	f000 f903 	bl	8005b28 <USBD_Get_USB_Status>
 8005922:	4603      	mov	r3, r0
 8005924:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8005926:	7bbb      	ldrb	r3, [r7, #14]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	460b      	mov	r3, r1
 800593a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800593c:	2300      	movs	r3, #0
 800593e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005940:	2300      	movs	r3, #0
 8005942:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800594a:	78fa      	ldrb	r2, [r7, #3]
 800594c:	4611      	mov	r1, r2
 800594e:	4618      	mov	r0, r3
 8005950:	f7fb ff94 	bl	800187c <HAL_PCD_EP_SetStall>
 8005954:	4603      	mov	r3, r0
 8005956:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005958:	7bfb      	ldrb	r3, [r7, #15]
 800595a:	4618      	mov	r0, r3
 800595c:	f000 f8e4 	bl	8005b28 <USBD_Get_USB_Status>
 8005960:	4603      	mov	r3, r0
 8005962:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005964:	7bbb      	ldrb	r3, [r7, #14]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b084      	sub	sp, #16
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
 8005976:	460b      	mov	r3, r1
 8005978:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800597a:	2300      	movs	r3, #0
 800597c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800597e:	2300      	movs	r3, #0
 8005980:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005988:	78fa      	ldrb	r2, [r7, #3]
 800598a:	4611      	mov	r1, r2
 800598c:	4618      	mov	r0, r3
 800598e:	f7fb ffcf 	bl	8001930 <HAL_PCD_EP_ClrStall>
 8005992:	4603      	mov	r3, r0
 8005994:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005996:	7bfb      	ldrb	r3, [r7, #15]
 8005998:	4618      	mov	r0, r3
 800599a:	f000 f8c5 	bl	8005b28 <USBD_Get_USB_Status>
 800599e:	4603      	mov	r3, r0
 80059a0:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 80059a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	460b      	mov	r3, r1
 80059b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059be:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80059c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	da08      	bge.n	80059da <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80059c8:	78fb      	ldrb	r3, [r7, #3]
 80059ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	015b      	lsls	r3, r3, #5
 80059d2:	4413      	add	r3, r2
 80059d4:	332a      	adds	r3, #42	; 0x2a
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	e008      	b.n	80059ec <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80059da:	78fb      	ldrb	r3, [r7, #3]
 80059dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	015b      	lsls	r3, r3, #5
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80059ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bc80      	pop	{r7}
 80059f4:	4770      	bx	lr

080059f6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b084      	sub	sp, #16
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	460b      	mov	r3, r1
 8005a00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005a02:	2300      	movs	r3, #0
 8005a04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005a06:	2300      	movs	r3, #0
 8005a08:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a10:	78fa      	ldrb	r2, [r7, #3]
 8005a12:	4611      	mov	r1, r2
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7fb fde3 	bl	80015e0 <HAL_PCD_SetAddress>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005a1e:	7bfb      	ldrb	r3, [r7, #15]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f000 f881 	bl	8005b28 <USBD_Get_USB_Status>
 8005a26:	4603      	mov	r3, r0
 8005a28:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005a2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	607a      	str	r2, [r7, #4]
 8005a3e:	461a      	mov	r2, r3
 8005a40:	460b      	mov	r3, r1
 8005a42:	72fb      	strb	r3, [r7, #11]
 8005a44:	4613      	mov	r3, r2
 8005a46:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005a56:	893b      	ldrh	r3, [r7, #8]
 8005a58:	7af9      	ldrb	r1, [r7, #11]
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	f7fb fed5 	bl	800180a <HAL_PCD_EP_Transmit>
 8005a60:	4603      	mov	r3, r0
 8005a62:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005a64:	7dfb      	ldrb	r3, [r7, #23]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 f85e 	bl	8005b28 <USBD_Get_USB_Status>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8005a70:	7dbb      	ldrb	r3, [r7, #22]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3718      	adds	r7, #24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b086      	sub	sp, #24
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	60f8      	str	r0, [r7, #12]
 8005a82:	607a      	str	r2, [r7, #4]
 8005a84:	461a      	mov	r2, r3
 8005a86:	460b      	mov	r3, r1
 8005a88:	72fb      	strb	r3, [r7, #11]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005a92:	2300      	movs	r3, #0
 8005a94:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005a9c:	893b      	ldrh	r3, [r7, #8]
 8005a9e:	7af9      	ldrb	r1, [r7, #11]
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	f7fb fe64 	bl	800176e <HAL_PCD_EP_Receive>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005aaa:	7dfb      	ldrb	r3, [r7, #23]
 8005aac:	4618      	mov	r0, r3
 8005aae:	f000 f83b 	bl	8005b28 <USBD_Get_USB_Status>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8005ab6:	7dbb      	ldrb	r3, [r7, #22]
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3718      	adds	r7, #24
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	460b      	mov	r3, r1
 8005aca:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ad2:	78fa      	ldrb	r2, [r7, #3]
 8005ad4:	4611      	mov	r1, r2
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7fb fe83 	bl	80017e2 <HAL_PCD_EP_GetRxCount>
 8005adc:	4603      	mov	r3, r0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3708      	adds	r7, #8
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
	...

08005ae8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8005af0:	4b02      	ldr	r3, [pc, #8]	; (8005afc <USBD_static_malloc+0x14>)
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bc80      	pop	{r7}
 8005afa:	4770      	bx	lr
 8005afc:	20000204 	.word	0x20000204

08005b00 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]

}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bc80      	pop	{r7}
 8005b10:	4770      	bx	lr

08005b12 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b12:	b480      	push	{r7}
 8005b14:	b083      	sub	sp, #12
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8005b1e:	bf00      	nop
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bc80      	pop	{r7}
 8005b26:	4770      	bx	lr

08005b28 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	4603      	mov	r3, r0
 8005b30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005b32:	2300      	movs	r3, #0
 8005b34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005b36:	79fb      	ldrb	r3, [r7, #7]
 8005b38:	2b03      	cmp	r3, #3
 8005b3a:	d817      	bhi.n	8005b6c <USBD_Get_USB_Status+0x44>
 8005b3c:	a201      	add	r2, pc, #4	; (adr r2, 8005b44 <USBD_Get_USB_Status+0x1c>)
 8005b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b42:	bf00      	nop
 8005b44:	08005b55 	.word	0x08005b55
 8005b48:	08005b5b 	.word	0x08005b5b
 8005b4c:	08005b61 	.word	0x08005b61
 8005b50:	08005b67 	.word	0x08005b67
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005b54:	2300      	movs	r3, #0
 8005b56:	73fb      	strb	r3, [r7, #15]
    break;
 8005b58:	e00b      	b.n	8005b72 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005b5a:	2302      	movs	r3, #2
 8005b5c:	73fb      	strb	r3, [r7, #15]
    break;
 8005b5e:	e008      	b.n	8005b72 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005b60:	2301      	movs	r3, #1
 8005b62:	73fb      	strb	r3, [r7, #15]
    break;
 8005b64:	e005      	b.n	8005b72 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005b66:	2302      	movs	r3, #2
 8005b68:	73fb      	strb	r3, [r7, #15]
    break;
 8005b6a:	e002      	b.n	8005b72 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	73fb      	strb	r3, [r7, #15]
    break;
 8005b70:	bf00      	nop
  }
  return usb_status;
 8005b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3714      	adds	r7, #20
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bc80      	pop	{r7}
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop

08005b80 <__errno>:
 8005b80:	4b01      	ldr	r3, [pc, #4]	; (8005b88 <__errno+0x8>)
 8005b82:	6818      	ldr	r0, [r3, #0]
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	2000017c 	.word	0x2000017c

08005b8c <__libc_init_array>:
 8005b8c:	b570      	push	{r4, r5, r6, lr}
 8005b8e:	2500      	movs	r5, #0
 8005b90:	4e0c      	ldr	r6, [pc, #48]	; (8005bc4 <__libc_init_array+0x38>)
 8005b92:	4c0d      	ldr	r4, [pc, #52]	; (8005bc8 <__libc_init_array+0x3c>)
 8005b94:	1ba4      	subs	r4, r4, r6
 8005b96:	10a4      	asrs	r4, r4, #2
 8005b98:	42a5      	cmp	r5, r4
 8005b9a:	d109      	bne.n	8005bb0 <__libc_init_array+0x24>
 8005b9c:	f000 fc34 	bl	8006408 <_init>
 8005ba0:	2500      	movs	r5, #0
 8005ba2:	4e0a      	ldr	r6, [pc, #40]	; (8005bcc <__libc_init_array+0x40>)
 8005ba4:	4c0a      	ldr	r4, [pc, #40]	; (8005bd0 <__libc_init_array+0x44>)
 8005ba6:	1ba4      	subs	r4, r4, r6
 8005ba8:	10a4      	asrs	r4, r4, #2
 8005baa:	42a5      	cmp	r5, r4
 8005bac:	d105      	bne.n	8005bba <__libc_init_array+0x2e>
 8005bae:	bd70      	pop	{r4, r5, r6, pc}
 8005bb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bb4:	4798      	blx	r3
 8005bb6:	3501      	adds	r5, #1
 8005bb8:	e7ee      	b.n	8005b98 <__libc_init_array+0xc>
 8005bba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bbe:	4798      	blx	r3
 8005bc0:	3501      	adds	r5, #1
 8005bc2:	e7f2      	b.n	8005baa <__libc_init_array+0x1e>
 8005bc4:	080064e8 	.word	0x080064e8
 8005bc8:	080064e8 	.word	0x080064e8
 8005bcc:	080064e8 	.word	0x080064e8
 8005bd0:	080064ec 	.word	0x080064ec

08005bd4 <memset>:
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	4402      	add	r2, r0
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d100      	bne.n	8005bde <memset+0xa>
 8005bdc:	4770      	bx	lr
 8005bde:	f803 1b01 	strb.w	r1, [r3], #1
 8005be2:	e7f9      	b.n	8005bd8 <memset+0x4>

08005be4 <siprintf>:
 8005be4:	b40e      	push	{r1, r2, r3}
 8005be6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005bea:	b500      	push	{lr}
 8005bec:	b09c      	sub	sp, #112	; 0x70
 8005bee:	ab1d      	add	r3, sp, #116	; 0x74
 8005bf0:	9002      	str	r0, [sp, #8]
 8005bf2:	9006      	str	r0, [sp, #24]
 8005bf4:	9107      	str	r1, [sp, #28]
 8005bf6:	9104      	str	r1, [sp, #16]
 8005bf8:	4808      	ldr	r0, [pc, #32]	; (8005c1c <siprintf+0x38>)
 8005bfa:	4909      	ldr	r1, [pc, #36]	; (8005c20 <siprintf+0x3c>)
 8005bfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c00:	9105      	str	r1, [sp, #20]
 8005c02:	6800      	ldr	r0, [r0, #0]
 8005c04:	a902      	add	r1, sp, #8
 8005c06:	9301      	str	r3, [sp, #4]
 8005c08:	f000 f866 	bl	8005cd8 <_svfiprintf_r>
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	9b02      	ldr	r3, [sp, #8]
 8005c10:	701a      	strb	r2, [r3, #0]
 8005c12:	b01c      	add	sp, #112	; 0x70
 8005c14:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c18:	b003      	add	sp, #12
 8005c1a:	4770      	bx	lr
 8005c1c:	2000017c 	.word	0x2000017c
 8005c20:	ffff0208 	.word	0xffff0208

08005c24 <__ssputs_r>:
 8005c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c28:	688e      	ldr	r6, [r1, #8]
 8005c2a:	4682      	mov	sl, r0
 8005c2c:	429e      	cmp	r6, r3
 8005c2e:	460c      	mov	r4, r1
 8005c30:	4690      	mov	r8, r2
 8005c32:	4699      	mov	r9, r3
 8005c34:	d837      	bhi.n	8005ca6 <__ssputs_r+0x82>
 8005c36:	898a      	ldrh	r2, [r1, #12]
 8005c38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c3c:	d031      	beq.n	8005ca2 <__ssputs_r+0x7e>
 8005c3e:	2302      	movs	r3, #2
 8005c40:	6825      	ldr	r5, [r4, #0]
 8005c42:	6909      	ldr	r1, [r1, #16]
 8005c44:	1a6f      	subs	r7, r5, r1
 8005c46:	6965      	ldr	r5, [r4, #20]
 8005c48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c4c:	fb95 f5f3 	sdiv	r5, r5, r3
 8005c50:	f109 0301 	add.w	r3, r9, #1
 8005c54:	443b      	add	r3, r7
 8005c56:	429d      	cmp	r5, r3
 8005c58:	bf38      	it	cc
 8005c5a:	461d      	movcc	r5, r3
 8005c5c:	0553      	lsls	r3, r2, #21
 8005c5e:	d530      	bpl.n	8005cc2 <__ssputs_r+0x9e>
 8005c60:	4629      	mov	r1, r5
 8005c62:	f000 fb37 	bl	80062d4 <_malloc_r>
 8005c66:	4606      	mov	r6, r0
 8005c68:	b950      	cbnz	r0, 8005c80 <__ssputs_r+0x5c>
 8005c6a:	230c      	movs	r3, #12
 8005c6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c70:	f8ca 3000 	str.w	r3, [sl]
 8005c74:	89a3      	ldrh	r3, [r4, #12]
 8005c76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c7a:	81a3      	strh	r3, [r4, #12]
 8005c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c80:	463a      	mov	r2, r7
 8005c82:	6921      	ldr	r1, [r4, #16]
 8005c84:	f000 fab6 	bl	80061f4 <memcpy>
 8005c88:	89a3      	ldrh	r3, [r4, #12]
 8005c8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c92:	81a3      	strh	r3, [r4, #12]
 8005c94:	6126      	str	r6, [r4, #16]
 8005c96:	443e      	add	r6, r7
 8005c98:	6026      	str	r6, [r4, #0]
 8005c9a:	464e      	mov	r6, r9
 8005c9c:	6165      	str	r5, [r4, #20]
 8005c9e:	1bed      	subs	r5, r5, r7
 8005ca0:	60a5      	str	r5, [r4, #8]
 8005ca2:	454e      	cmp	r6, r9
 8005ca4:	d900      	bls.n	8005ca8 <__ssputs_r+0x84>
 8005ca6:	464e      	mov	r6, r9
 8005ca8:	4632      	mov	r2, r6
 8005caa:	4641      	mov	r1, r8
 8005cac:	6820      	ldr	r0, [r4, #0]
 8005cae:	f000 faac 	bl	800620a <memmove>
 8005cb2:	68a3      	ldr	r3, [r4, #8]
 8005cb4:	2000      	movs	r0, #0
 8005cb6:	1b9b      	subs	r3, r3, r6
 8005cb8:	60a3      	str	r3, [r4, #8]
 8005cba:	6823      	ldr	r3, [r4, #0]
 8005cbc:	441e      	add	r6, r3
 8005cbe:	6026      	str	r6, [r4, #0]
 8005cc0:	e7dc      	b.n	8005c7c <__ssputs_r+0x58>
 8005cc2:	462a      	mov	r2, r5
 8005cc4:	f000 fb60 	bl	8006388 <_realloc_r>
 8005cc8:	4606      	mov	r6, r0
 8005cca:	2800      	cmp	r0, #0
 8005ccc:	d1e2      	bne.n	8005c94 <__ssputs_r+0x70>
 8005cce:	6921      	ldr	r1, [r4, #16]
 8005cd0:	4650      	mov	r0, sl
 8005cd2:	f000 fab3 	bl	800623c <_free_r>
 8005cd6:	e7c8      	b.n	8005c6a <__ssputs_r+0x46>

08005cd8 <_svfiprintf_r>:
 8005cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cdc:	461d      	mov	r5, r3
 8005cde:	898b      	ldrh	r3, [r1, #12]
 8005ce0:	b09d      	sub	sp, #116	; 0x74
 8005ce2:	061f      	lsls	r7, r3, #24
 8005ce4:	4680      	mov	r8, r0
 8005ce6:	460c      	mov	r4, r1
 8005ce8:	4616      	mov	r6, r2
 8005cea:	d50f      	bpl.n	8005d0c <_svfiprintf_r+0x34>
 8005cec:	690b      	ldr	r3, [r1, #16]
 8005cee:	b96b      	cbnz	r3, 8005d0c <_svfiprintf_r+0x34>
 8005cf0:	2140      	movs	r1, #64	; 0x40
 8005cf2:	f000 faef 	bl	80062d4 <_malloc_r>
 8005cf6:	6020      	str	r0, [r4, #0]
 8005cf8:	6120      	str	r0, [r4, #16]
 8005cfa:	b928      	cbnz	r0, 8005d08 <_svfiprintf_r+0x30>
 8005cfc:	230c      	movs	r3, #12
 8005cfe:	f8c8 3000 	str.w	r3, [r8]
 8005d02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d06:	e0c8      	b.n	8005e9a <_svfiprintf_r+0x1c2>
 8005d08:	2340      	movs	r3, #64	; 0x40
 8005d0a:	6163      	str	r3, [r4, #20]
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	9309      	str	r3, [sp, #36]	; 0x24
 8005d10:	2320      	movs	r3, #32
 8005d12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d16:	2330      	movs	r3, #48	; 0x30
 8005d18:	f04f 0b01 	mov.w	fp, #1
 8005d1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d20:	9503      	str	r5, [sp, #12]
 8005d22:	4637      	mov	r7, r6
 8005d24:	463d      	mov	r5, r7
 8005d26:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005d2a:	b10b      	cbz	r3, 8005d30 <_svfiprintf_r+0x58>
 8005d2c:	2b25      	cmp	r3, #37	; 0x25
 8005d2e:	d13e      	bne.n	8005dae <_svfiprintf_r+0xd6>
 8005d30:	ebb7 0a06 	subs.w	sl, r7, r6
 8005d34:	d00b      	beq.n	8005d4e <_svfiprintf_r+0x76>
 8005d36:	4653      	mov	r3, sl
 8005d38:	4632      	mov	r2, r6
 8005d3a:	4621      	mov	r1, r4
 8005d3c:	4640      	mov	r0, r8
 8005d3e:	f7ff ff71 	bl	8005c24 <__ssputs_r>
 8005d42:	3001      	adds	r0, #1
 8005d44:	f000 80a4 	beq.w	8005e90 <_svfiprintf_r+0x1b8>
 8005d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d4a:	4453      	add	r3, sl
 8005d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d4e:	783b      	ldrb	r3, [r7, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f000 809d 	beq.w	8005e90 <_svfiprintf_r+0x1b8>
 8005d56:	2300      	movs	r3, #0
 8005d58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d60:	9304      	str	r3, [sp, #16]
 8005d62:	9307      	str	r3, [sp, #28]
 8005d64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d68:	931a      	str	r3, [sp, #104]	; 0x68
 8005d6a:	462f      	mov	r7, r5
 8005d6c:	2205      	movs	r2, #5
 8005d6e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005d72:	4850      	ldr	r0, [pc, #320]	; (8005eb4 <_svfiprintf_r+0x1dc>)
 8005d74:	f000 fa30 	bl	80061d8 <memchr>
 8005d78:	9b04      	ldr	r3, [sp, #16]
 8005d7a:	b9d0      	cbnz	r0, 8005db2 <_svfiprintf_r+0xda>
 8005d7c:	06d9      	lsls	r1, r3, #27
 8005d7e:	bf44      	itt	mi
 8005d80:	2220      	movmi	r2, #32
 8005d82:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d86:	071a      	lsls	r2, r3, #28
 8005d88:	bf44      	itt	mi
 8005d8a:	222b      	movmi	r2, #43	; 0x2b
 8005d8c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d90:	782a      	ldrb	r2, [r5, #0]
 8005d92:	2a2a      	cmp	r2, #42	; 0x2a
 8005d94:	d015      	beq.n	8005dc2 <_svfiprintf_r+0xea>
 8005d96:	462f      	mov	r7, r5
 8005d98:	2000      	movs	r0, #0
 8005d9a:	250a      	movs	r5, #10
 8005d9c:	9a07      	ldr	r2, [sp, #28]
 8005d9e:	4639      	mov	r1, r7
 8005da0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005da4:	3b30      	subs	r3, #48	; 0x30
 8005da6:	2b09      	cmp	r3, #9
 8005da8:	d94d      	bls.n	8005e46 <_svfiprintf_r+0x16e>
 8005daa:	b1b8      	cbz	r0, 8005ddc <_svfiprintf_r+0x104>
 8005dac:	e00f      	b.n	8005dce <_svfiprintf_r+0xf6>
 8005dae:	462f      	mov	r7, r5
 8005db0:	e7b8      	b.n	8005d24 <_svfiprintf_r+0x4c>
 8005db2:	4a40      	ldr	r2, [pc, #256]	; (8005eb4 <_svfiprintf_r+0x1dc>)
 8005db4:	463d      	mov	r5, r7
 8005db6:	1a80      	subs	r0, r0, r2
 8005db8:	fa0b f000 	lsl.w	r0, fp, r0
 8005dbc:	4318      	orrs	r0, r3
 8005dbe:	9004      	str	r0, [sp, #16]
 8005dc0:	e7d3      	b.n	8005d6a <_svfiprintf_r+0x92>
 8005dc2:	9a03      	ldr	r2, [sp, #12]
 8005dc4:	1d11      	adds	r1, r2, #4
 8005dc6:	6812      	ldr	r2, [r2, #0]
 8005dc8:	9103      	str	r1, [sp, #12]
 8005dca:	2a00      	cmp	r2, #0
 8005dcc:	db01      	blt.n	8005dd2 <_svfiprintf_r+0xfa>
 8005dce:	9207      	str	r2, [sp, #28]
 8005dd0:	e004      	b.n	8005ddc <_svfiprintf_r+0x104>
 8005dd2:	4252      	negs	r2, r2
 8005dd4:	f043 0302 	orr.w	r3, r3, #2
 8005dd8:	9207      	str	r2, [sp, #28]
 8005dda:	9304      	str	r3, [sp, #16]
 8005ddc:	783b      	ldrb	r3, [r7, #0]
 8005dde:	2b2e      	cmp	r3, #46	; 0x2e
 8005de0:	d10c      	bne.n	8005dfc <_svfiprintf_r+0x124>
 8005de2:	787b      	ldrb	r3, [r7, #1]
 8005de4:	2b2a      	cmp	r3, #42	; 0x2a
 8005de6:	d133      	bne.n	8005e50 <_svfiprintf_r+0x178>
 8005de8:	9b03      	ldr	r3, [sp, #12]
 8005dea:	3702      	adds	r7, #2
 8005dec:	1d1a      	adds	r2, r3, #4
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	9203      	str	r2, [sp, #12]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	bfb8      	it	lt
 8005df6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005dfa:	9305      	str	r3, [sp, #20]
 8005dfc:	4d2e      	ldr	r5, [pc, #184]	; (8005eb8 <_svfiprintf_r+0x1e0>)
 8005dfe:	2203      	movs	r2, #3
 8005e00:	7839      	ldrb	r1, [r7, #0]
 8005e02:	4628      	mov	r0, r5
 8005e04:	f000 f9e8 	bl	80061d8 <memchr>
 8005e08:	b138      	cbz	r0, 8005e1a <_svfiprintf_r+0x142>
 8005e0a:	2340      	movs	r3, #64	; 0x40
 8005e0c:	1b40      	subs	r0, r0, r5
 8005e0e:	fa03 f000 	lsl.w	r0, r3, r0
 8005e12:	9b04      	ldr	r3, [sp, #16]
 8005e14:	3701      	adds	r7, #1
 8005e16:	4303      	orrs	r3, r0
 8005e18:	9304      	str	r3, [sp, #16]
 8005e1a:	7839      	ldrb	r1, [r7, #0]
 8005e1c:	2206      	movs	r2, #6
 8005e1e:	4827      	ldr	r0, [pc, #156]	; (8005ebc <_svfiprintf_r+0x1e4>)
 8005e20:	1c7e      	adds	r6, r7, #1
 8005e22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e26:	f000 f9d7 	bl	80061d8 <memchr>
 8005e2a:	2800      	cmp	r0, #0
 8005e2c:	d038      	beq.n	8005ea0 <_svfiprintf_r+0x1c8>
 8005e2e:	4b24      	ldr	r3, [pc, #144]	; (8005ec0 <_svfiprintf_r+0x1e8>)
 8005e30:	bb13      	cbnz	r3, 8005e78 <_svfiprintf_r+0x1a0>
 8005e32:	9b03      	ldr	r3, [sp, #12]
 8005e34:	3307      	adds	r3, #7
 8005e36:	f023 0307 	bic.w	r3, r3, #7
 8005e3a:	3308      	adds	r3, #8
 8005e3c:	9303      	str	r3, [sp, #12]
 8005e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e40:	444b      	add	r3, r9
 8005e42:	9309      	str	r3, [sp, #36]	; 0x24
 8005e44:	e76d      	b.n	8005d22 <_svfiprintf_r+0x4a>
 8005e46:	fb05 3202 	mla	r2, r5, r2, r3
 8005e4a:	2001      	movs	r0, #1
 8005e4c:	460f      	mov	r7, r1
 8005e4e:	e7a6      	b.n	8005d9e <_svfiprintf_r+0xc6>
 8005e50:	2300      	movs	r3, #0
 8005e52:	250a      	movs	r5, #10
 8005e54:	4619      	mov	r1, r3
 8005e56:	3701      	adds	r7, #1
 8005e58:	9305      	str	r3, [sp, #20]
 8005e5a:	4638      	mov	r0, r7
 8005e5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e60:	3a30      	subs	r2, #48	; 0x30
 8005e62:	2a09      	cmp	r2, #9
 8005e64:	d903      	bls.n	8005e6e <_svfiprintf_r+0x196>
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d0c8      	beq.n	8005dfc <_svfiprintf_r+0x124>
 8005e6a:	9105      	str	r1, [sp, #20]
 8005e6c:	e7c6      	b.n	8005dfc <_svfiprintf_r+0x124>
 8005e6e:	fb05 2101 	mla	r1, r5, r1, r2
 8005e72:	2301      	movs	r3, #1
 8005e74:	4607      	mov	r7, r0
 8005e76:	e7f0      	b.n	8005e5a <_svfiprintf_r+0x182>
 8005e78:	ab03      	add	r3, sp, #12
 8005e7a:	9300      	str	r3, [sp, #0]
 8005e7c:	4622      	mov	r2, r4
 8005e7e:	4b11      	ldr	r3, [pc, #68]	; (8005ec4 <_svfiprintf_r+0x1ec>)
 8005e80:	a904      	add	r1, sp, #16
 8005e82:	4640      	mov	r0, r8
 8005e84:	f3af 8000 	nop.w
 8005e88:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005e8c:	4681      	mov	r9, r0
 8005e8e:	d1d6      	bne.n	8005e3e <_svfiprintf_r+0x166>
 8005e90:	89a3      	ldrh	r3, [r4, #12]
 8005e92:	065b      	lsls	r3, r3, #25
 8005e94:	f53f af35 	bmi.w	8005d02 <_svfiprintf_r+0x2a>
 8005e98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e9a:	b01d      	add	sp, #116	; 0x74
 8005e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ea0:	ab03      	add	r3, sp, #12
 8005ea2:	9300      	str	r3, [sp, #0]
 8005ea4:	4622      	mov	r2, r4
 8005ea6:	4b07      	ldr	r3, [pc, #28]	; (8005ec4 <_svfiprintf_r+0x1ec>)
 8005ea8:	a904      	add	r1, sp, #16
 8005eaa:	4640      	mov	r0, r8
 8005eac:	f000 f882 	bl	8005fb4 <_printf_i>
 8005eb0:	e7ea      	b.n	8005e88 <_svfiprintf_r+0x1b0>
 8005eb2:	bf00      	nop
 8005eb4:	080064b4 	.word	0x080064b4
 8005eb8:	080064ba 	.word	0x080064ba
 8005ebc:	080064be 	.word	0x080064be
 8005ec0:	00000000 	.word	0x00000000
 8005ec4:	08005c25 	.word	0x08005c25

08005ec8 <_printf_common>:
 8005ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ecc:	4691      	mov	r9, r2
 8005ece:	461f      	mov	r7, r3
 8005ed0:	688a      	ldr	r2, [r1, #8]
 8005ed2:	690b      	ldr	r3, [r1, #16]
 8005ed4:	4606      	mov	r6, r0
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	bfb8      	it	lt
 8005eda:	4613      	movlt	r3, r2
 8005edc:	f8c9 3000 	str.w	r3, [r9]
 8005ee0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ee4:	460c      	mov	r4, r1
 8005ee6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005eea:	b112      	cbz	r2, 8005ef2 <_printf_common+0x2a>
 8005eec:	3301      	adds	r3, #1
 8005eee:	f8c9 3000 	str.w	r3, [r9]
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	0699      	lsls	r1, r3, #26
 8005ef6:	bf42      	ittt	mi
 8005ef8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005efc:	3302      	addmi	r3, #2
 8005efe:	f8c9 3000 	strmi.w	r3, [r9]
 8005f02:	6825      	ldr	r5, [r4, #0]
 8005f04:	f015 0506 	ands.w	r5, r5, #6
 8005f08:	d107      	bne.n	8005f1a <_printf_common+0x52>
 8005f0a:	f104 0a19 	add.w	sl, r4, #25
 8005f0e:	68e3      	ldr	r3, [r4, #12]
 8005f10:	f8d9 2000 	ldr.w	r2, [r9]
 8005f14:	1a9b      	subs	r3, r3, r2
 8005f16:	42ab      	cmp	r3, r5
 8005f18:	dc29      	bgt.n	8005f6e <_printf_common+0xa6>
 8005f1a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005f1e:	6822      	ldr	r2, [r4, #0]
 8005f20:	3300      	adds	r3, #0
 8005f22:	bf18      	it	ne
 8005f24:	2301      	movne	r3, #1
 8005f26:	0692      	lsls	r2, r2, #26
 8005f28:	d42e      	bmi.n	8005f88 <_printf_common+0xc0>
 8005f2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f2e:	4639      	mov	r1, r7
 8005f30:	4630      	mov	r0, r6
 8005f32:	47c0      	blx	r8
 8005f34:	3001      	adds	r0, #1
 8005f36:	d021      	beq.n	8005f7c <_printf_common+0xb4>
 8005f38:	6823      	ldr	r3, [r4, #0]
 8005f3a:	68e5      	ldr	r5, [r4, #12]
 8005f3c:	f003 0306 	and.w	r3, r3, #6
 8005f40:	2b04      	cmp	r3, #4
 8005f42:	bf18      	it	ne
 8005f44:	2500      	movne	r5, #0
 8005f46:	f8d9 2000 	ldr.w	r2, [r9]
 8005f4a:	f04f 0900 	mov.w	r9, #0
 8005f4e:	bf08      	it	eq
 8005f50:	1aad      	subeq	r5, r5, r2
 8005f52:	68a3      	ldr	r3, [r4, #8]
 8005f54:	6922      	ldr	r2, [r4, #16]
 8005f56:	bf08      	it	eq
 8005f58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	bfc4      	itt	gt
 8005f60:	1a9b      	subgt	r3, r3, r2
 8005f62:	18ed      	addgt	r5, r5, r3
 8005f64:	341a      	adds	r4, #26
 8005f66:	454d      	cmp	r5, r9
 8005f68:	d11a      	bne.n	8005fa0 <_printf_common+0xd8>
 8005f6a:	2000      	movs	r0, #0
 8005f6c:	e008      	b.n	8005f80 <_printf_common+0xb8>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	4652      	mov	r2, sl
 8005f72:	4639      	mov	r1, r7
 8005f74:	4630      	mov	r0, r6
 8005f76:	47c0      	blx	r8
 8005f78:	3001      	adds	r0, #1
 8005f7a:	d103      	bne.n	8005f84 <_printf_common+0xbc>
 8005f7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f84:	3501      	adds	r5, #1
 8005f86:	e7c2      	b.n	8005f0e <_printf_common+0x46>
 8005f88:	2030      	movs	r0, #48	; 0x30
 8005f8a:	18e1      	adds	r1, r4, r3
 8005f8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f90:	1c5a      	adds	r2, r3, #1
 8005f92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f96:	4422      	add	r2, r4
 8005f98:	3302      	adds	r3, #2
 8005f9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f9e:	e7c4      	b.n	8005f2a <_printf_common+0x62>
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	4622      	mov	r2, r4
 8005fa4:	4639      	mov	r1, r7
 8005fa6:	4630      	mov	r0, r6
 8005fa8:	47c0      	blx	r8
 8005faa:	3001      	adds	r0, #1
 8005fac:	d0e6      	beq.n	8005f7c <_printf_common+0xb4>
 8005fae:	f109 0901 	add.w	r9, r9, #1
 8005fb2:	e7d8      	b.n	8005f66 <_printf_common+0x9e>

08005fb4 <_printf_i>:
 8005fb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005fb8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005fbc:	460c      	mov	r4, r1
 8005fbe:	7e09      	ldrb	r1, [r1, #24]
 8005fc0:	b085      	sub	sp, #20
 8005fc2:	296e      	cmp	r1, #110	; 0x6e
 8005fc4:	4617      	mov	r7, r2
 8005fc6:	4606      	mov	r6, r0
 8005fc8:	4698      	mov	r8, r3
 8005fca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fcc:	f000 80b3 	beq.w	8006136 <_printf_i+0x182>
 8005fd0:	d822      	bhi.n	8006018 <_printf_i+0x64>
 8005fd2:	2963      	cmp	r1, #99	; 0x63
 8005fd4:	d036      	beq.n	8006044 <_printf_i+0x90>
 8005fd6:	d80a      	bhi.n	8005fee <_printf_i+0x3a>
 8005fd8:	2900      	cmp	r1, #0
 8005fda:	f000 80b9 	beq.w	8006150 <_printf_i+0x19c>
 8005fde:	2958      	cmp	r1, #88	; 0x58
 8005fe0:	f000 8083 	beq.w	80060ea <_printf_i+0x136>
 8005fe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fe8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005fec:	e032      	b.n	8006054 <_printf_i+0xa0>
 8005fee:	2964      	cmp	r1, #100	; 0x64
 8005ff0:	d001      	beq.n	8005ff6 <_printf_i+0x42>
 8005ff2:	2969      	cmp	r1, #105	; 0x69
 8005ff4:	d1f6      	bne.n	8005fe4 <_printf_i+0x30>
 8005ff6:	6820      	ldr	r0, [r4, #0]
 8005ff8:	6813      	ldr	r3, [r2, #0]
 8005ffa:	0605      	lsls	r5, r0, #24
 8005ffc:	f103 0104 	add.w	r1, r3, #4
 8006000:	d52a      	bpl.n	8006058 <_printf_i+0xa4>
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6011      	str	r1, [r2, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	da03      	bge.n	8006012 <_printf_i+0x5e>
 800600a:	222d      	movs	r2, #45	; 0x2d
 800600c:	425b      	negs	r3, r3
 800600e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006012:	486f      	ldr	r0, [pc, #444]	; (80061d0 <_printf_i+0x21c>)
 8006014:	220a      	movs	r2, #10
 8006016:	e039      	b.n	800608c <_printf_i+0xd8>
 8006018:	2973      	cmp	r1, #115	; 0x73
 800601a:	f000 809d 	beq.w	8006158 <_printf_i+0x1a4>
 800601e:	d808      	bhi.n	8006032 <_printf_i+0x7e>
 8006020:	296f      	cmp	r1, #111	; 0x6f
 8006022:	d020      	beq.n	8006066 <_printf_i+0xb2>
 8006024:	2970      	cmp	r1, #112	; 0x70
 8006026:	d1dd      	bne.n	8005fe4 <_printf_i+0x30>
 8006028:	6823      	ldr	r3, [r4, #0]
 800602a:	f043 0320 	orr.w	r3, r3, #32
 800602e:	6023      	str	r3, [r4, #0]
 8006030:	e003      	b.n	800603a <_printf_i+0x86>
 8006032:	2975      	cmp	r1, #117	; 0x75
 8006034:	d017      	beq.n	8006066 <_printf_i+0xb2>
 8006036:	2978      	cmp	r1, #120	; 0x78
 8006038:	d1d4      	bne.n	8005fe4 <_printf_i+0x30>
 800603a:	2378      	movs	r3, #120	; 0x78
 800603c:	4865      	ldr	r0, [pc, #404]	; (80061d4 <_printf_i+0x220>)
 800603e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006042:	e055      	b.n	80060f0 <_printf_i+0x13c>
 8006044:	6813      	ldr	r3, [r2, #0]
 8006046:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800604a:	1d19      	adds	r1, r3, #4
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6011      	str	r1, [r2, #0]
 8006050:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006054:	2301      	movs	r3, #1
 8006056:	e08c      	b.n	8006172 <_printf_i+0x1be>
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800605e:	6011      	str	r1, [r2, #0]
 8006060:	bf18      	it	ne
 8006062:	b21b      	sxthne	r3, r3
 8006064:	e7cf      	b.n	8006006 <_printf_i+0x52>
 8006066:	6813      	ldr	r3, [r2, #0]
 8006068:	6825      	ldr	r5, [r4, #0]
 800606a:	1d18      	adds	r0, r3, #4
 800606c:	6010      	str	r0, [r2, #0]
 800606e:	0628      	lsls	r0, r5, #24
 8006070:	d501      	bpl.n	8006076 <_printf_i+0xc2>
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	e002      	b.n	800607c <_printf_i+0xc8>
 8006076:	0668      	lsls	r0, r5, #25
 8006078:	d5fb      	bpl.n	8006072 <_printf_i+0xbe>
 800607a:	881b      	ldrh	r3, [r3, #0]
 800607c:	296f      	cmp	r1, #111	; 0x6f
 800607e:	bf14      	ite	ne
 8006080:	220a      	movne	r2, #10
 8006082:	2208      	moveq	r2, #8
 8006084:	4852      	ldr	r0, [pc, #328]	; (80061d0 <_printf_i+0x21c>)
 8006086:	2100      	movs	r1, #0
 8006088:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800608c:	6865      	ldr	r5, [r4, #4]
 800608e:	2d00      	cmp	r5, #0
 8006090:	60a5      	str	r5, [r4, #8]
 8006092:	f2c0 8095 	blt.w	80061c0 <_printf_i+0x20c>
 8006096:	6821      	ldr	r1, [r4, #0]
 8006098:	f021 0104 	bic.w	r1, r1, #4
 800609c:	6021      	str	r1, [r4, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d13d      	bne.n	800611e <_printf_i+0x16a>
 80060a2:	2d00      	cmp	r5, #0
 80060a4:	f040 808e 	bne.w	80061c4 <_printf_i+0x210>
 80060a8:	4665      	mov	r5, ip
 80060aa:	2a08      	cmp	r2, #8
 80060ac:	d10b      	bne.n	80060c6 <_printf_i+0x112>
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	07db      	lsls	r3, r3, #31
 80060b2:	d508      	bpl.n	80060c6 <_printf_i+0x112>
 80060b4:	6923      	ldr	r3, [r4, #16]
 80060b6:	6862      	ldr	r2, [r4, #4]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	bfde      	ittt	le
 80060bc:	2330      	movle	r3, #48	; 0x30
 80060be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80060c2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80060c6:	ebac 0305 	sub.w	r3, ip, r5
 80060ca:	6123      	str	r3, [r4, #16]
 80060cc:	f8cd 8000 	str.w	r8, [sp]
 80060d0:	463b      	mov	r3, r7
 80060d2:	aa03      	add	r2, sp, #12
 80060d4:	4621      	mov	r1, r4
 80060d6:	4630      	mov	r0, r6
 80060d8:	f7ff fef6 	bl	8005ec8 <_printf_common>
 80060dc:	3001      	adds	r0, #1
 80060de:	d14d      	bne.n	800617c <_printf_i+0x1c8>
 80060e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060e4:	b005      	add	sp, #20
 80060e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80060ea:	4839      	ldr	r0, [pc, #228]	; (80061d0 <_printf_i+0x21c>)
 80060ec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80060f0:	6813      	ldr	r3, [r2, #0]
 80060f2:	6821      	ldr	r1, [r4, #0]
 80060f4:	1d1d      	adds	r5, r3, #4
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6015      	str	r5, [r2, #0]
 80060fa:	060a      	lsls	r2, r1, #24
 80060fc:	d50b      	bpl.n	8006116 <_printf_i+0x162>
 80060fe:	07ca      	lsls	r2, r1, #31
 8006100:	bf44      	itt	mi
 8006102:	f041 0120 	orrmi.w	r1, r1, #32
 8006106:	6021      	strmi	r1, [r4, #0]
 8006108:	b91b      	cbnz	r3, 8006112 <_printf_i+0x15e>
 800610a:	6822      	ldr	r2, [r4, #0]
 800610c:	f022 0220 	bic.w	r2, r2, #32
 8006110:	6022      	str	r2, [r4, #0]
 8006112:	2210      	movs	r2, #16
 8006114:	e7b7      	b.n	8006086 <_printf_i+0xd2>
 8006116:	064d      	lsls	r5, r1, #25
 8006118:	bf48      	it	mi
 800611a:	b29b      	uxthmi	r3, r3
 800611c:	e7ef      	b.n	80060fe <_printf_i+0x14a>
 800611e:	4665      	mov	r5, ip
 8006120:	fbb3 f1f2 	udiv	r1, r3, r2
 8006124:	fb02 3311 	mls	r3, r2, r1, r3
 8006128:	5cc3      	ldrb	r3, [r0, r3]
 800612a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800612e:	460b      	mov	r3, r1
 8006130:	2900      	cmp	r1, #0
 8006132:	d1f5      	bne.n	8006120 <_printf_i+0x16c>
 8006134:	e7b9      	b.n	80060aa <_printf_i+0xf6>
 8006136:	6813      	ldr	r3, [r2, #0]
 8006138:	6825      	ldr	r5, [r4, #0]
 800613a:	1d18      	adds	r0, r3, #4
 800613c:	6961      	ldr	r1, [r4, #20]
 800613e:	6010      	str	r0, [r2, #0]
 8006140:	0628      	lsls	r0, r5, #24
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	d501      	bpl.n	800614a <_printf_i+0x196>
 8006146:	6019      	str	r1, [r3, #0]
 8006148:	e002      	b.n	8006150 <_printf_i+0x19c>
 800614a:	066a      	lsls	r2, r5, #25
 800614c:	d5fb      	bpl.n	8006146 <_printf_i+0x192>
 800614e:	8019      	strh	r1, [r3, #0]
 8006150:	2300      	movs	r3, #0
 8006152:	4665      	mov	r5, ip
 8006154:	6123      	str	r3, [r4, #16]
 8006156:	e7b9      	b.n	80060cc <_printf_i+0x118>
 8006158:	6813      	ldr	r3, [r2, #0]
 800615a:	1d19      	adds	r1, r3, #4
 800615c:	6011      	str	r1, [r2, #0]
 800615e:	681d      	ldr	r5, [r3, #0]
 8006160:	6862      	ldr	r2, [r4, #4]
 8006162:	2100      	movs	r1, #0
 8006164:	4628      	mov	r0, r5
 8006166:	f000 f837 	bl	80061d8 <memchr>
 800616a:	b108      	cbz	r0, 8006170 <_printf_i+0x1bc>
 800616c:	1b40      	subs	r0, r0, r5
 800616e:	6060      	str	r0, [r4, #4]
 8006170:	6863      	ldr	r3, [r4, #4]
 8006172:	6123      	str	r3, [r4, #16]
 8006174:	2300      	movs	r3, #0
 8006176:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800617a:	e7a7      	b.n	80060cc <_printf_i+0x118>
 800617c:	6923      	ldr	r3, [r4, #16]
 800617e:	462a      	mov	r2, r5
 8006180:	4639      	mov	r1, r7
 8006182:	4630      	mov	r0, r6
 8006184:	47c0      	blx	r8
 8006186:	3001      	adds	r0, #1
 8006188:	d0aa      	beq.n	80060e0 <_printf_i+0x12c>
 800618a:	6823      	ldr	r3, [r4, #0]
 800618c:	079b      	lsls	r3, r3, #30
 800618e:	d413      	bmi.n	80061b8 <_printf_i+0x204>
 8006190:	68e0      	ldr	r0, [r4, #12]
 8006192:	9b03      	ldr	r3, [sp, #12]
 8006194:	4298      	cmp	r0, r3
 8006196:	bfb8      	it	lt
 8006198:	4618      	movlt	r0, r3
 800619a:	e7a3      	b.n	80060e4 <_printf_i+0x130>
 800619c:	2301      	movs	r3, #1
 800619e:	464a      	mov	r2, r9
 80061a0:	4639      	mov	r1, r7
 80061a2:	4630      	mov	r0, r6
 80061a4:	47c0      	blx	r8
 80061a6:	3001      	adds	r0, #1
 80061a8:	d09a      	beq.n	80060e0 <_printf_i+0x12c>
 80061aa:	3501      	adds	r5, #1
 80061ac:	68e3      	ldr	r3, [r4, #12]
 80061ae:	9a03      	ldr	r2, [sp, #12]
 80061b0:	1a9b      	subs	r3, r3, r2
 80061b2:	42ab      	cmp	r3, r5
 80061b4:	dcf2      	bgt.n	800619c <_printf_i+0x1e8>
 80061b6:	e7eb      	b.n	8006190 <_printf_i+0x1dc>
 80061b8:	2500      	movs	r5, #0
 80061ba:	f104 0919 	add.w	r9, r4, #25
 80061be:	e7f5      	b.n	80061ac <_printf_i+0x1f8>
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1ac      	bne.n	800611e <_printf_i+0x16a>
 80061c4:	7803      	ldrb	r3, [r0, #0]
 80061c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061ce:	e76c      	b.n	80060aa <_printf_i+0xf6>
 80061d0:	080064c5 	.word	0x080064c5
 80061d4:	080064d6 	.word	0x080064d6

080061d8 <memchr>:
 80061d8:	b510      	push	{r4, lr}
 80061da:	b2c9      	uxtb	r1, r1
 80061dc:	4402      	add	r2, r0
 80061de:	4290      	cmp	r0, r2
 80061e0:	4603      	mov	r3, r0
 80061e2:	d101      	bne.n	80061e8 <memchr+0x10>
 80061e4:	2300      	movs	r3, #0
 80061e6:	e003      	b.n	80061f0 <memchr+0x18>
 80061e8:	781c      	ldrb	r4, [r3, #0]
 80061ea:	3001      	adds	r0, #1
 80061ec:	428c      	cmp	r4, r1
 80061ee:	d1f6      	bne.n	80061de <memchr+0x6>
 80061f0:	4618      	mov	r0, r3
 80061f2:	bd10      	pop	{r4, pc}

080061f4 <memcpy>:
 80061f4:	b510      	push	{r4, lr}
 80061f6:	1e43      	subs	r3, r0, #1
 80061f8:	440a      	add	r2, r1
 80061fa:	4291      	cmp	r1, r2
 80061fc:	d100      	bne.n	8006200 <memcpy+0xc>
 80061fe:	bd10      	pop	{r4, pc}
 8006200:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006204:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006208:	e7f7      	b.n	80061fa <memcpy+0x6>

0800620a <memmove>:
 800620a:	4288      	cmp	r0, r1
 800620c:	b510      	push	{r4, lr}
 800620e:	eb01 0302 	add.w	r3, r1, r2
 8006212:	d807      	bhi.n	8006224 <memmove+0x1a>
 8006214:	1e42      	subs	r2, r0, #1
 8006216:	4299      	cmp	r1, r3
 8006218:	d00a      	beq.n	8006230 <memmove+0x26>
 800621a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800621e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006222:	e7f8      	b.n	8006216 <memmove+0xc>
 8006224:	4283      	cmp	r3, r0
 8006226:	d9f5      	bls.n	8006214 <memmove+0xa>
 8006228:	1881      	adds	r1, r0, r2
 800622a:	1ad2      	subs	r2, r2, r3
 800622c:	42d3      	cmn	r3, r2
 800622e:	d100      	bne.n	8006232 <memmove+0x28>
 8006230:	bd10      	pop	{r4, pc}
 8006232:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006236:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800623a:	e7f7      	b.n	800622c <memmove+0x22>

0800623c <_free_r>:
 800623c:	b538      	push	{r3, r4, r5, lr}
 800623e:	4605      	mov	r5, r0
 8006240:	2900      	cmp	r1, #0
 8006242:	d043      	beq.n	80062cc <_free_r+0x90>
 8006244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006248:	1f0c      	subs	r4, r1, #4
 800624a:	2b00      	cmp	r3, #0
 800624c:	bfb8      	it	lt
 800624e:	18e4      	addlt	r4, r4, r3
 8006250:	f000 f8d0 	bl	80063f4 <__malloc_lock>
 8006254:	4a1e      	ldr	r2, [pc, #120]	; (80062d0 <_free_r+0x94>)
 8006256:	6813      	ldr	r3, [r2, #0]
 8006258:	4610      	mov	r0, r2
 800625a:	b933      	cbnz	r3, 800626a <_free_r+0x2e>
 800625c:	6063      	str	r3, [r4, #4]
 800625e:	6014      	str	r4, [r2, #0]
 8006260:	4628      	mov	r0, r5
 8006262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006266:	f000 b8c6 	b.w	80063f6 <__malloc_unlock>
 800626a:	42a3      	cmp	r3, r4
 800626c:	d90b      	bls.n	8006286 <_free_r+0x4a>
 800626e:	6821      	ldr	r1, [r4, #0]
 8006270:	1862      	adds	r2, r4, r1
 8006272:	4293      	cmp	r3, r2
 8006274:	bf01      	itttt	eq
 8006276:	681a      	ldreq	r2, [r3, #0]
 8006278:	685b      	ldreq	r3, [r3, #4]
 800627a:	1852      	addeq	r2, r2, r1
 800627c:	6022      	streq	r2, [r4, #0]
 800627e:	6063      	str	r3, [r4, #4]
 8006280:	6004      	str	r4, [r0, #0]
 8006282:	e7ed      	b.n	8006260 <_free_r+0x24>
 8006284:	4613      	mov	r3, r2
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	b10a      	cbz	r2, 800628e <_free_r+0x52>
 800628a:	42a2      	cmp	r2, r4
 800628c:	d9fa      	bls.n	8006284 <_free_r+0x48>
 800628e:	6819      	ldr	r1, [r3, #0]
 8006290:	1858      	adds	r0, r3, r1
 8006292:	42a0      	cmp	r0, r4
 8006294:	d10b      	bne.n	80062ae <_free_r+0x72>
 8006296:	6820      	ldr	r0, [r4, #0]
 8006298:	4401      	add	r1, r0
 800629a:	1858      	adds	r0, r3, r1
 800629c:	4282      	cmp	r2, r0
 800629e:	6019      	str	r1, [r3, #0]
 80062a0:	d1de      	bne.n	8006260 <_free_r+0x24>
 80062a2:	6810      	ldr	r0, [r2, #0]
 80062a4:	6852      	ldr	r2, [r2, #4]
 80062a6:	4401      	add	r1, r0
 80062a8:	6019      	str	r1, [r3, #0]
 80062aa:	605a      	str	r2, [r3, #4]
 80062ac:	e7d8      	b.n	8006260 <_free_r+0x24>
 80062ae:	d902      	bls.n	80062b6 <_free_r+0x7a>
 80062b0:	230c      	movs	r3, #12
 80062b2:	602b      	str	r3, [r5, #0]
 80062b4:	e7d4      	b.n	8006260 <_free_r+0x24>
 80062b6:	6820      	ldr	r0, [r4, #0]
 80062b8:	1821      	adds	r1, r4, r0
 80062ba:	428a      	cmp	r2, r1
 80062bc:	bf01      	itttt	eq
 80062be:	6811      	ldreq	r1, [r2, #0]
 80062c0:	6852      	ldreq	r2, [r2, #4]
 80062c2:	1809      	addeq	r1, r1, r0
 80062c4:	6021      	streq	r1, [r4, #0]
 80062c6:	6062      	str	r2, [r4, #4]
 80062c8:	605c      	str	r4, [r3, #4]
 80062ca:	e7c9      	b.n	8006260 <_free_r+0x24>
 80062cc:	bd38      	pop	{r3, r4, r5, pc}
 80062ce:	bf00      	nop
 80062d0:	20000424 	.word	0x20000424

080062d4 <_malloc_r>:
 80062d4:	b570      	push	{r4, r5, r6, lr}
 80062d6:	1ccd      	adds	r5, r1, #3
 80062d8:	f025 0503 	bic.w	r5, r5, #3
 80062dc:	3508      	adds	r5, #8
 80062de:	2d0c      	cmp	r5, #12
 80062e0:	bf38      	it	cc
 80062e2:	250c      	movcc	r5, #12
 80062e4:	2d00      	cmp	r5, #0
 80062e6:	4606      	mov	r6, r0
 80062e8:	db01      	blt.n	80062ee <_malloc_r+0x1a>
 80062ea:	42a9      	cmp	r1, r5
 80062ec:	d903      	bls.n	80062f6 <_malloc_r+0x22>
 80062ee:	230c      	movs	r3, #12
 80062f0:	6033      	str	r3, [r6, #0]
 80062f2:	2000      	movs	r0, #0
 80062f4:	bd70      	pop	{r4, r5, r6, pc}
 80062f6:	f000 f87d 	bl	80063f4 <__malloc_lock>
 80062fa:	4a21      	ldr	r2, [pc, #132]	; (8006380 <_malloc_r+0xac>)
 80062fc:	6814      	ldr	r4, [r2, #0]
 80062fe:	4621      	mov	r1, r4
 8006300:	b991      	cbnz	r1, 8006328 <_malloc_r+0x54>
 8006302:	4c20      	ldr	r4, [pc, #128]	; (8006384 <_malloc_r+0xb0>)
 8006304:	6823      	ldr	r3, [r4, #0]
 8006306:	b91b      	cbnz	r3, 8006310 <_malloc_r+0x3c>
 8006308:	4630      	mov	r0, r6
 800630a:	f000 f863 	bl	80063d4 <_sbrk_r>
 800630e:	6020      	str	r0, [r4, #0]
 8006310:	4629      	mov	r1, r5
 8006312:	4630      	mov	r0, r6
 8006314:	f000 f85e 	bl	80063d4 <_sbrk_r>
 8006318:	1c43      	adds	r3, r0, #1
 800631a:	d124      	bne.n	8006366 <_malloc_r+0x92>
 800631c:	230c      	movs	r3, #12
 800631e:	4630      	mov	r0, r6
 8006320:	6033      	str	r3, [r6, #0]
 8006322:	f000 f868 	bl	80063f6 <__malloc_unlock>
 8006326:	e7e4      	b.n	80062f2 <_malloc_r+0x1e>
 8006328:	680b      	ldr	r3, [r1, #0]
 800632a:	1b5b      	subs	r3, r3, r5
 800632c:	d418      	bmi.n	8006360 <_malloc_r+0x8c>
 800632e:	2b0b      	cmp	r3, #11
 8006330:	d90f      	bls.n	8006352 <_malloc_r+0x7e>
 8006332:	600b      	str	r3, [r1, #0]
 8006334:	18cc      	adds	r4, r1, r3
 8006336:	50cd      	str	r5, [r1, r3]
 8006338:	4630      	mov	r0, r6
 800633a:	f000 f85c 	bl	80063f6 <__malloc_unlock>
 800633e:	f104 000b 	add.w	r0, r4, #11
 8006342:	1d23      	adds	r3, r4, #4
 8006344:	f020 0007 	bic.w	r0, r0, #7
 8006348:	1ac3      	subs	r3, r0, r3
 800634a:	d0d3      	beq.n	80062f4 <_malloc_r+0x20>
 800634c:	425a      	negs	r2, r3
 800634e:	50e2      	str	r2, [r4, r3]
 8006350:	e7d0      	b.n	80062f4 <_malloc_r+0x20>
 8006352:	684b      	ldr	r3, [r1, #4]
 8006354:	428c      	cmp	r4, r1
 8006356:	bf16      	itet	ne
 8006358:	6063      	strne	r3, [r4, #4]
 800635a:	6013      	streq	r3, [r2, #0]
 800635c:	460c      	movne	r4, r1
 800635e:	e7eb      	b.n	8006338 <_malloc_r+0x64>
 8006360:	460c      	mov	r4, r1
 8006362:	6849      	ldr	r1, [r1, #4]
 8006364:	e7cc      	b.n	8006300 <_malloc_r+0x2c>
 8006366:	1cc4      	adds	r4, r0, #3
 8006368:	f024 0403 	bic.w	r4, r4, #3
 800636c:	42a0      	cmp	r0, r4
 800636e:	d005      	beq.n	800637c <_malloc_r+0xa8>
 8006370:	1a21      	subs	r1, r4, r0
 8006372:	4630      	mov	r0, r6
 8006374:	f000 f82e 	bl	80063d4 <_sbrk_r>
 8006378:	3001      	adds	r0, #1
 800637a:	d0cf      	beq.n	800631c <_malloc_r+0x48>
 800637c:	6025      	str	r5, [r4, #0]
 800637e:	e7db      	b.n	8006338 <_malloc_r+0x64>
 8006380:	20000424 	.word	0x20000424
 8006384:	20000428 	.word	0x20000428

08006388 <_realloc_r>:
 8006388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800638a:	4607      	mov	r7, r0
 800638c:	4614      	mov	r4, r2
 800638e:	460e      	mov	r6, r1
 8006390:	b921      	cbnz	r1, 800639c <_realloc_r+0x14>
 8006392:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006396:	4611      	mov	r1, r2
 8006398:	f7ff bf9c 	b.w	80062d4 <_malloc_r>
 800639c:	b922      	cbnz	r2, 80063a8 <_realloc_r+0x20>
 800639e:	f7ff ff4d 	bl	800623c <_free_r>
 80063a2:	4625      	mov	r5, r4
 80063a4:	4628      	mov	r0, r5
 80063a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063a8:	f000 f826 	bl	80063f8 <_malloc_usable_size_r>
 80063ac:	42a0      	cmp	r0, r4
 80063ae:	d20f      	bcs.n	80063d0 <_realloc_r+0x48>
 80063b0:	4621      	mov	r1, r4
 80063b2:	4638      	mov	r0, r7
 80063b4:	f7ff ff8e 	bl	80062d4 <_malloc_r>
 80063b8:	4605      	mov	r5, r0
 80063ba:	2800      	cmp	r0, #0
 80063bc:	d0f2      	beq.n	80063a4 <_realloc_r+0x1c>
 80063be:	4631      	mov	r1, r6
 80063c0:	4622      	mov	r2, r4
 80063c2:	f7ff ff17 	bl	80061f4 <memcpy>
 80063c6:	4631      	mov	r1, r6
 80063c8:	4638      	mov	r0, r7
 80063ca:	f7ff ff37 	bl	800623c <_free_r>
 80063ce:	e7e9      	b.n	80063a4 <_realloc_r+0x1c>
 80063d0:	4635      	mov	r5, r6
 80063d2:	e7e7      	b.n	80063a4 <_realloc_r+0x1c>

080063d4 <_sbrk_r>:
 80063d4:	b538      	push	{r3, r4, r5, lr}
 80063d6:	2300      	movs	r3, #0
 80063d8:	4c05      	ldr	r4, [pc, #20]	; (80063f0 <_sbrk_r+0x1c>)
 80063da:	4605      	mov	r5, r0
 80063dc:	4608      	mov	r0, r1
 80063de:	6023      	str	r3, [r4, #0]
 80063e0:	f7fa f8be 	bl	8000560 <_sbrk>
 80063e4:	1c43      	adds	r3, r0, #1
 80063e6:	d102      	bne.n	80063ee <_sbrk_r+0x1a>
 80063e8:	6823      	ldr	r3, [r4, #0]
 80063ea:	b103      	cbz	r3, 80063ee <_sbrk_r+0x1a>
 80063ec:	602b      	str	r3, [r5, #0]
 80063ee:	bd38      	pop	{r3, r4, r5, pc}
 80063f0:	200013c8 	.word	0x200013c8

080063f4 <__malloc_lock>:
 80063f4:	4770      	bx	lr

080063f6 <__malloc_unlock>:
 80063f6:	4770      	bx	lr

080063f8 <_malloc_usable_size_r>:
 80063f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063fc:	1f18      	subs	r0, r3, #4
 80063fe:	2b00      	cmp	r3, #0
 8006400:	bfbc      	itt	lt
 8006402:	580b      	ldrlt	r3, [r1, r0]
 8006404:	18c0      	addlt	r0, r0, r3
 8006406:	4770      	bx	lr

08006408 <_init>:
 8006408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800640a:	bf00      	nop
 800640c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800640e:	bc08      	pop	{r3}
 8006410:	469e      	mov	lr, r3
 8006412:	4770      	bx	lr

08006414 <_fini>:
 8006414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006416:	bf00      	nop
 8006418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800641a:	bc08      	pop	{r3}
 800641c:	469e      	mov	lr, r3
 800641e:	4770      	bx	lr
